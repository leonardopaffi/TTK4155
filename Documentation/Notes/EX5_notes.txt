- SPI bus between MCU and CAN controller
- Driver that accesses CAN's control registers




- Using MCP2551 as a CAN controller:
	- Clock signal
	- Reset circuit (from existing)
	- Stable power supply

- The controller sends an interrupt:
	- Connect the interrupt pin to the ATMEGA162
	- After the ATMEGA162 receives an interrupt, it should be able to tell the nature of the interrupt by reading the register of the controller CANINTF






- SPI
	- MISO, MOSI, SCK, SS (slave select, only the slave with this signal will partecipate in the transmission)
	- MCU selects one of the slaves by setting its corresponding SS signal to LOW
	- Given that SPI module is enabled, the MCU will start the signal SCK when the program writes to the SPI data register (SPDR)
	- For each period one bit will be shifted from master to the slave (MOSI) and one from slave to master (MISO)
	- After 8 clock periods the SS will be pulled high to indicate that the operation is over and it will release the slave




- Modularization
	- CAN communication -> sending/receivig CAN messages
	- MCP2315 manipulation -> low level driver setting up the CAN controller and accessing its control and status (MCP instuction sets, chapter 12 of MCP2551 CAN controller)
	- SPI communication
