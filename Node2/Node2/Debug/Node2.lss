
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e5c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080e5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  20000434  00081290  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004d0  0008132c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  0008172c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006fef  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001480  00000000  00000000  000274a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013f4  00000000  00000000  00028925  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000250  00000000  00000000  00029d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00029f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012bdc  00000000  00000000  0002a161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000051f8  00000000  00000000  0003cd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005451c  00000000  00000000  00041f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000640  00000000  00000000  00096454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 81 04 08 00 7d 04 08 00 7d 04 08 00     ... ....}...}...
   80010:	7d 04 08 00 7d 04 08 00 7d 04 08 00 00 00 00 00     }...}...}.......
	...
   8002c:	7d 04 08 00 7d 04 08 00 00 00 00 00 7d 04 08 00     }...}.......}...
   8003c:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   8004c:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   8005c:	7d 04 08 00 c5 0b 08 00 7d 04 08 00 00 00 00 00     }.......}.......
   8006c:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
	...
   80084:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   80094:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   800a4:	00 00 00 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     ....}...}...}...
   800b4:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   800c4:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   800d4:	7d 04 08 00 7d 04 08 00 7d 04 08 00 7d 04 08 00     }...}...}...}...
   800e4:	7d 04 08 00 7d 04 08 00 d1 03 08 00 7d 04 08 00     }...}.......}...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080e5c 	.word	0x00080e5c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080e5c 	.word	0x00080e5c
   80154:	20000438 	.word	0x20000438
   80158:	00080e5c 	.word	0x00080e5c
   8015c:	00000000 	.word	0x00000000

00080160 <ADC_init>:
#include "ADC.h"

void ADC_init()
{
    PMC->PMC_PCER1 |= PMC_PCER1_PID37; //ADC CLK ON
   80160:	4a0a      	ldr	r2, [pc, #40]	; (8018c <ADC_init+0x2c>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <ADC_init+0x30>)
   80170:	685a      	ldr	r2, [r3, #4]
   80172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80176:	605a      	str	r2, [r3, #4]
    ADC->ADC_CHER |= ADC_CHER_CH0; // CH0 ON
   80178:	691a      	ldr	r2, [r3, #16]
   8017a:	f042 0201 	orr.w	r2, r2, #1
   8017e:	611a      	str	r2, [r3, #16]
    ADC->ADC_CR |= ADC_CR_START;   //starts analog-to-digital conversion
   80180:	681a      	ldr	r2, [r3, #0]
   80182:	f042 0202 	orr.w	r2, r2, #2
   80186:	601a      	str	r2, [r3, #0]
   80188:	4770      	bx	lr
   8018a:	bf00      	nop
   8018c:	400e0600 	.word	0x400e0600
   80190:	400c0000 	.word	0x400c0000

00080194 <ADC_check_goal>:
}

int ADC_read()
{
    // Getting data in the register
    return ADC->ADC_CDR[0];
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <ADC_check_goal+0x10>)
   80196:	6d18      	ldr	r0, [r3, #80]	; 0x50
        // A GOAL is detected
        return 1;
    }

    return 0;
}
   80198:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   8019c:	bfac      	ite	ge
   8019e:	2000      	movge	r0, #0
   801a0:	2001      	movlt	r0, #1
   801a2:	4770      	bx	lr
   801a4:	400c0000 	.word	0x400c0000

000801a8 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801ac:	1855      	adds	r5, r2, r1
   801ae:	2908      	cmp	r1, #8
   801b0:	bf98      	it	ls
   801b2:	2a08      	cmpls	r2, #8
   801b4:	d864      	bhi.n	80280 <can_init+0xd8>
   801b6:	460e      	mov	r6, r1
   801b8:	2d08      	cmp	r5, #8
   801ba:	dc61      	bgt.n	80280 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801bc:	4a32      	ldr	r2, [pc, #200]	; (80288 <can_init+0xe0>)
   801be:	6813      	ldr	r3, [r2, #0]
   801c0:	f023 0301 	bic.w	r3, r3, #1
   801c4:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801c6:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801c8:	4b30      	ldr	r3, [pc, #192]	; (8028c <can_init+0xe4>)
   801ca:	f44f 7440 	mov.w	r4, #768	; 0x300
   801ce:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801d0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801d2:	f024 0403 	bic.w	r4, r4, #3
   801d6:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801d8:	2403      	movs	r4, #3
   801da:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801dc:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801e2:	4c2b      	ldr	r4, [pc, #172]	; (80290 <can_init+0xe8>)
   801e4:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801e8:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801ec:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801f0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801f4:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f6:	42a9      	cmp	r1, r5
   801f8:	dc40      	bgt.n	8027c <can_init+0xd4>
   801fa:	460a      	mov	r2, r1
   801fc:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801fe:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80200:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80288 <can_init+0xe0>
   80204:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80208:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8020c:	2701      	movs	r7, #1
   8020e:	0153      	lsls	r3, r2, #5
   80210:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80214:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80218:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8021c:	4443      	add	r3, r8
   8021e:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80222:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80226:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   8022a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8022e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80232:	fa07 f302 	lsl.w	r3, r7, r2
   80236:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80238:	3201      	adds	r2, #1
   8023a:	4295      	cmp	r5, r2
   8023c:	dae7      	bge.n	8020e <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   8023e:	b181      	cbz	r1, 80262 <can_init+0xba>
   80240:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80242:	4911      	ldr	r1, [pc, #68]	; (80288 <can_init+0xe0>)
   80244:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80248:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8024c:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80250:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80254:	f103 0210 	add.w	r2, r3, #16
   80258:	0152      	lsls	r2, r2, #5
   8025a:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8025c:	3301      	adds	r3, #1
   8025e:	429e      	cmp	r6, r3
   80260:	d1f4      	bne.n	8024c <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80262:	4b09      	ldr	r3, [pc, #36]	; (80288 <can_init+0xe0>)
   80264:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80266:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8026a:	4a0a      	ldr	r2, [pc, #40]	; (80294 <can_init+0xec>)
   8026c:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   8026e:	681a      	ldr	r2, [r3, #0]
   80270:	f042 0201 	orr.w	r2, r2, #1
   80274:	601a      	str	r2, [r3, #0]

	return 0;
   80276:	2000      	movs	r0, #0
   80278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   8027c:	2400      	movs	r4, #0
   8027e:	e7de      	b.n	8023e <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80280:	2001      	movs	r0, #1
}
   80282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80286:	bf00      	nop
   80288:	400b4000 	.word	0x400b4000
   8028c:	400e0e00 	.word	0x400e0e00
   80290:	1000102b 	.word	0x1000102b
   80294:	e000e100 	.word	0xe000e100

00080298 <can_init_def_tx_rx_mb>:
{
   80298:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   8029a:	2202      	movs	r2, #2
   8029c:	2101      	movs	r1, #1
   8029e:	4b01      	ldr	r3, [pc, #4]	; (802a4 <can_init_def_tx_rx_mb+0xc>)
   802a0:	4798      	blx	r3
}
   802a2:	bd08      	pop	{r3, pc}
   802a4:	000801a9 	.word	0x000801a9

000802a8 <can_send>:
 * \param tx_mb_id ID of transmit mailbox to be used
 *
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
   802a8:	b508      	push	{r3, lr}
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802aa:	014b      	lsls	r3, r1, #5
   802ac:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802b0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802b8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802bc:	d039      	beq.n	80332 <can_send+0x8a>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   802be:	8803      	ldrh	r3, [r0, #0]
   802c0:	4a1e      	ldr	r2, [pc, #120]	; (8033c <can_send+0x94>)
   802c2:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   802c6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   802ca:	014b      	lsls	r3, r1, #5
   802cc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802d0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   802d8:	8843      	ldrh	r3, [r0, #2]
   802da:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   802dc:	bf84      	itt	hi
   802de:	2307      	movhi	r3, #7
   802e0:	8043      	strhhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   802e2:	79c2      	ldrb	r2, [r0, #7]
   802e4:	7983      	ldrb	r3, [r0, #6]
   802e6:	041b      	lsls	r3, r3, #16
   802e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802ec:	7902      	ldrb	r2, [r0, #4]
   802ee:	4313      	orrs	r3, r2
   802f0:	7942      	ldrb	r2, [r0, #5]
   802f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802f6:	0149      	lsls	r1, r1, #5
   802f8:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   802fc:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   80300:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   80304:	7ac2      	ldrb	r2, [r0, #11]
   80306:	7a83      	ldrb	r3, [r0, #10]
   80308:	041b      	lsls	r3, r3, #16
   8030a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   8030e:	7a02      	ldrb	r2, [r0, #8]
   80310:	4313      	orrs	r3, r2
   80312:	7a42      	ldrb	r2, [r0, #9]
   80314:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80318:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   8031c:	8843      	ldrh	r3, [r0, #2]
   8031e:	041b      	lsls	r3, r3, #16
   80320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80324:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		printf("message sent from NODE2");
   80328:	4805      	ldr	r0, [pc, #20]	; (80340 <can_send+0x98>)
   8032a:	4b06      	ldr	r3, [pc, #24]	; (80344 <can_send+0x9c>)
   8032c:	4798      	blx	r3
		return 0;
   8032e:	2000      	movs	r0, #0
   80330:	bd08      	pop	{r3, pc}
	}
	
	else //Mailbox busy
	{
		printf("Mailbox busy");
   80332:	4805      	ldr	r0, [pc, #20]	; (80348 <can_send+0xa0>)
   80334:	4b03      	ldr	r3, [pc, #12]	; (80344 <can_send+0x9c>)
   80336:	4798      	blx	r3
		return 1;
   80338:	2001      	movs	r0, #1
	}
	
}
   8033a:	bd08      	pop	{r3, pc}
   8033c:	1ffc0000 	.word	0x1ffc0000
   80340:	00080d9c 	.word	0x00080d9c
   80344:	00080a45 	.word	0x00080a45
   80348:	00080db4 	.word	0x00080db4

0008034c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8034c:	014b      	lsls	r3, r1, #5
   8034e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80352:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80356:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8035a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8035e:	d033      	beq.n	803c8 <can_receive+0x7c>
{
   80360:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80362:	014b      	lsls	r3, r1, #5
   80364:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80368:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8036c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80370:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80374:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80378:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8037c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8037e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80382:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80386:	8043      	strh	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80388:	461d      	mov	r5, r3
   8038a:	b15b      	cbz	r3, 803a4 <can_receive+0x58>
   8038c:	3004      	adds	r0, #4
   8038e:	2300      	movs	r3, #0
		{
			if(i < 4)
   80390:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80392:	bfd9      	ittee	le
   80394:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   80396:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80398:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8039a:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8039c:	3301      	adds	r3, #1
   8039e:	3001      	adds	r0, #1
   803a0:	42ab      	cmp	r3, r5
   803a2:	d1f5      	bne.n	80390 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803a4:	4b09      	ldr	r3, [pc, #36]	; (803cc <can_receive+0x80>)
   803a6:	f101 0210 	add.w	r2, r1, #16
   803aa:	0152      	lsls	r2, r2, #5
   803ac:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803b0:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   803b2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   803b6:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   803be:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		
		return 0;
   803c2:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   803c4:	bc30      	pop	{r4, r5}
   803c6:	4770      	bx	lr
		return 1;
   803c8:	2001      	movs	r0, #1
   803ca:	4770      	bx	lr
   803cc:	400b4000 	.word	0x400b4000

000803d0 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   803d0:	b510      	push	{r4, lr}
   803d2:	b084      	sub	sp, #16
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   803d4:	4b21      	ldr	r3, [pc, #132]	; (8045c <CAN0_Handler+0x8c>)
   803d6:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   803d8:	f014 0f06 	tst.w	r4, #6
   803dc:	d023      	beq.n	80426 <CAN0_Handler+0x56>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   803de:	f014 0f02 	tst.w	r4, #2
   803e2:	d12d      	bne.n	80440 <CAN0_Handler+0x70>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   803e4:	f014 0f04 	tst.w	r4, #4
   803e8:	d02f      	beq.n	8044a <CAN0_Handler+0x7a>
		
		{
			can_receive(&message, 2);
   803ea:	2102      	movs	r1, #2
   803ec:	a801      	add	r0, sp, #4
   803ee:	4b1c      	ldr	r3, [pc, #112]	; (80460 <CAN0_Handler+0x90>)
   803f0:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   803f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   803f6:	b11a      	cbz	r2, 80400 <CAN0_Handler+0x30>
   803f8:	2300      	movs	r3, #0
   803fa:	3301      	adds	r3, #1
   803fc:	4293      	cmp	r3, r2
   803fe:	d1fc      	bne.n	803fa <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		// Setting step motor with X-Axis when message is received
		if(message.data[0] < 20)
   80400:	f89d 3008 	ldrb.w	r3, [sp, #8]
   80404:	2b13      	cmp	r3, #19
   80406:	d924      	bls.n	80452 <CAN0_Handler+0x82>
		{
			motor_set_direction_speed(LEFT, 81);
		} else if (message.data[0] > 80)
   80408:	2b50      	cmp	r3, #80	; 0x50
		{
			motor_set_direction_speed(RIGHT, 81);	
   8040a:	bf8c      	ite	hi
   8040c:	2151      	movhi	r1, #81	; 0x51
		}
		else {
			motor_set_direction_speed(RIGHT, 0);	
   8040e:	2100      	movls	r1, #0
   80410:	2001      	movs	r0, #1
   80412:	4b14      	ldr	r3, [pc, #80]	; (80464 <CAN0_Handler+0x94>)
   80414:	4798      	blx	r3
		}
		
		// Updating buttons variable
		buttons = message.data[2];
   80416:	f89d 200a 	ldrb.w	r2, [sp, #10]
   8041a:	4b13      	ldr	r3, [pc, #76]	; (80468 <CAN0_Handler+0x98>)
   8041c:	701a      	strb	r2, [r3, #0]
		
		// Updating stepper values
		step_position = message.data[3];
   8041e:	f89d 200b 	ldrb.w	r2, [sp, #11]
   80422:	4b12      	ldr	r3, [pc, #72]	; (8046c <CAN0_Handler+0x9c>)
   80424:	701a      	strb	r2, [r3, #0]
	}
	
	if(can_sr & CAN_SR_MB0)
   80426:	f014 0f01 	tst.w	r4, #1
   8042a:	d002      	beq.n	80432 <CAN0_Handler+0x62>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8042c:	2201      	movs	r2, #1
   8042e:	4b0b      	ldr	r3, [pc, #44]	; (8045c <CAN0_Handler+0x8c>)
   80430:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80432:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80436:	4b0e      	ldr	r3, [pc, #56]	; (80470 <CAN0_Handler+0xa0>)
   80438:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8043c:	b004      	add	sp, #16
   8043e:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80440:	2101      	movs	r1, #1
   80442:	a801      	add	r0, sp, #4
   80444:	4b06      	ldr	r3, [pc, #24]	; (80460 <CAN0_Handler+0x90>)
   80446:	4798      	blx	r3
   80448:	e7d3      	b.n	803f2 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8044a:	480a      	ldr	r0, [pc, #40]	; (80474 <CAN0_Handler+0xa4>)
   8044c:	4b0a      	ldr	r3, [pc, #40]	; (80478 <CAN0_Handler+0xa8>)
   8044e:	4798      	blx	r3
   80450:	e7cf      	b.n	803f2 <CAN0_Handler+0x22>
			motor_set_direction_speed(LEFT, 81);
   80452:	2151      	movs	r1, #81	; 0x51
   80454:	2000      	movs	r0, #0
   80456:	4b03      	ldr	r3, [pc, #12]	; (80464 <CAN0_Handler+0x94>)
   80458:	4798      	blx	r3
   8045a:	e7dc      	b.n	80416 <CAN0_Handler+0x46>
   8045c:	400b4000 	.word	0x400b4000
   80460:	0008034d 	.word	0x0008034d
   80464:	00080759 	.word	0x00080759
   80468:	20000464 	.word	0x20000464
   8046c:	20000450 	.word	0x20000450
   80470:	e000e100 	.word	0xe000e100
   80474:	00080dc4 	.word	0x00080dc4
   80478:	00080a45 	.word	0x00080a45

0008047c <Dummy_Handler>:
   8047c:	e7fe      	b.n	8047c <Dummy_Handler>
	...

00080480 <Reset_Handler>:
   80480:	b508      	push	{r3, lr}
   80482:	4b18      	ldr	r3, [pc, #96]	; (804e4 <Reset_Handler+0x64>)
   80484:	4a18      	ldr	r2, [pc, #96]	; (804e8 <Reset_Handler+0x68>)
   80486:	429a      	cmp	r2, r3
   80488:	d010      	beq.n	804ac <Reset_Handler+0x2c>
   8048a:	4b18      	ldr	r3, [pc, #96]	; (804ec <Reset_Handler+0x6c>)
   8048c:	4a15      	ldr	r2, [pc, #84]	; (804e4 <Reset_Handler+0x64>)
   8048e:	429a      	cmp	r2, r3
   80490:	d20c      	bcs.n	804ac <Reset_Handler+0x2c>
   80492:	3b01      	subs	r3, #1
   80494:	1a9b      	subs	r3, r3, r2
   80496:	f023 0303 	bic.w	r3, r3, #3
   8049a:	3304      	adds	r3, #4
   8049c:	4413      	add	r3, r2
   8049e:	4912      	ldr	r1, [pc, #72]	; (804e8 <Reset_Handler+0x68>)
   804a0:	f851 0b04 	ldr.w	r0, [r1], #4
   804a4:	f842 0b04 	str.w	r0, [r2], #4
   804a8:	429a      	cmp	r2, r3
   804aa:	d1f9      	bne.n	804a0 <Reset_Handler+0x20>
   804ac:	4b10      	ldr	r3, [pc, #64]	; (804f0 <Reset_Handler+0x70>)
   804ae:	4a11      	ldr	r2, [pc, #68]	; (804f4 <Reset_Handler+0x74>)
   804b0:	429a      	cmp	r2, r3
   804b2:	d20a      	bcs.n	804ca <Reset_Handler+0x4a>
   804b4:	3b01      	subs	r3, #1
   804b6:	1a9b      	subs	r3, r3, r2
   804b8:	f023 0303 	bic.w	r3, r3, #3
   804bc:	3304      	adds	r3, #4
   804be:	4413      	add	r3, r2
   804c0:	2100      	movs	r1, #0
   804c2:	f842 1b04 	str.w	r1, [r2], #4
   804c6:	4293      	cmp	r3, r2
   804c8:	d1fb      	bne.n	804c2 <Reset_Handler+0x42>
   804ca:	4b0b      	ldr	r3, [pc, #44]	; (804f8 <Reset_Handler+0x78>)
   804cc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804d4:	4a09      	ldr	r2, [pc, #36]	; (804fc <Reset_Handler+0x7c>)
   804d6:	6093      	str	r3, [r2, #8]
   804d8:	4b09      	ldr	r3, [pc, #36]	; (80500 <Reset_Handler+0x80>)
   804da:	4798      	blx	r3
   804dc:	4b09      	ldr	r3, [pc, #36]	; (80504 <Reset_Handler+0x84>)
   804de:	4798      	blx	r3
   804e0:	e7fe      	b.n	804e0 <Reset_Handler+0x60>
   804e2:	bf00      	nop
   804e4:	20000000 	.word	0x20000000
   804e8:	00080e5c 	.word	0x00080e5c
   804ec:	20000434 	.word	0x20000434
   804f0:	200004d0 	.word	0x200004d0
   804f4:	20000434 	.word	0x20000434
   804f8:	00080000 	.word	0x00080000
   804fc:	e000ed00 	.word	0xe000ed00
   80500:	00080c2d 	.word	0x00080c2d
   80504:	000805ad 	.word	0x000805ad

00080508 <SystemInit>:
   80508:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8050c:	4a20      	ldr	r2, [pc, #128]	; (80590 <SystemInit+0x88>)
   8050e:	6013      	str	r3, [r2, #0]
   80510:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80514:	6013      	str	r3, [r2, #0]
   80516:	4b1f      	ldr	r3, [pc, #124]	; (80594 <SystemInit+0x8c>)
   80518:	6a1b      	ldr	r3, [r3, #32]
   8051a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8051e:	d107      	bne.n	80530 <SystemInit+0x28>
   80520:	4a1d      	ldr	r2, [pc, #116]	; (80598 <SystemInit+0x90>)
   80522:	4b1c      	ldr	r3, [pc, #112]	; (80594 <SystemInit+0x8c>)
   80524:	621a      	str	r2, [r3, #32]
   80526:	461a      	mov	r2, r3
   80528:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8052a:	f013 0f01 	tst.w	r3, #1
   8052e:	d0fb      	beq.n	80528 <SystemInit+0x20>
   80530:	4a1a      	ldr	r2, [pc, #104]	; (8059c <SystemInit+0x94>)
   80532:	4b18      	ldr	r3, [pc, #96]	; (80594 <SystemInit+0x8c>)
   80534:	621a      	str	r2, [r3, #32]
   80536:	461a      	mov	r2, r3
   80538:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8053a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8053e:	d0fb      	beq.n	80538 <SystemInit+0x30>
   80540:	4a14      	ldr	r2, [pc, #80]	; (80594 <SystemInit+0x8c>)
   80542:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80544:	f023 0303 	bic.w	r3, r3, #3
   80548:	f043 0301 	orr.w	r3, r3, #1
   8054c:	6313      	str	r3, [r2, #48]	; 0x30
   8054e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80550:	f013 0f08 	tst.w	r3, #8
   80554:	d0fb      	beq.n	8054e <SystemInit+0x46>
   80556:	4a12      	ldr	r2, [pc, #72]	; (805a0 <SystemInit+0x98>)
   80558:	4b0e      	ldr	r3, [pc, #56]	; (80594 <SystemInit+0x8c>)
   8055a:	629a      	str	r2, [r3, #40]	; 0x28
   8055c:	461a      	mov	r2, r3
   8055e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80560:	f013 0f02 	tst.w	r3, #2
   80564:	d0fb      	beq.n	8055e <SystemInit+0x56>
   80566:	2211      	movs	r2, #17
   80568:	4b0a      	ldr	r3, [pc, #40]	; (80594 <SystemInit+0x8c>)
   8056a:	631a      	str	r2, [r3, #48]	; 0x30
   8056c:	461a      	mov	r2, r3
   8056e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80570:	f013 0f08 	tst.w	r3, #8
   80574:	d0fb      	beq.n	8056e <SystemInit+0x66>
   80576:	2212      	movs	r2, #18
   80578:	4b06      	ldr	r3, [pc, #24]	; (80594 <SystemInit+0x8c>)
   8057a:	631a      	str	r2, [r3, #48]	; 0x30
   8057c:	461a      	mov	r2, r3
   8057e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80580:	f013 0f08 	tst.w	r3, #8
   80584:	d0fb      	beq.n	8057e <SystemInit+0x76>
   80586:	4a07      	ldr	r2, [pc, #28]	; (805a4 <SystemInit+0x9c>)
   80588:	4b07      	ldr	r3, [pc, #28]	; (805a8 <SystemInit+0xa0>)
   8058a:	601a      	str	r2, [r3, #0]
   8058c:	4770      	bx	lr
   8058e:	bf00      	nop
   80590:	400e0a00 	.word	0x400e0a00
   80594:	400e0600 	.word	0x400e0600
   80598:	00370809 	.word	0x00370809
   8059c:	01370809 	.word	0x01370809
   805a0:	200d3f01 	.word	0x200d3f01
   805a4:	0501bd00 	.word	0x0501bd00
   805a8:	20000000 	.word	0x20000000

000805ac <main>:

uint8_t score = 0;
uint8_t game_pause = 0;

int main (void)
{
   805ac:	b570      	push	{r4, r5, r6, lr}
   805ae:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	SystemInit();
   805b0:	4b23      	ldr	r3, [pc, #140]	; (80640 <main+0x94>)
   805b2:	4798      	blx	r3
	configure_uart();
   805b4:	4b23      	ldr	r3, [pc, #140]	; (80644 <main+0x98>)
   805b6:	4798      	blx	r3
	
	PWM_init();
   805b8:	4b23      	ldr	r3, [pc, #140]	; (80648 <main+0x9c>)
   805ba:	4798      	blx	r3
	
	ADC_init();
   805bc:	4b23      	ldr	r3, [pc, #140]	; (8064c <main+0xa0>)
   805be:	4798      	blx	r3
	
	motor_init();
   805c0:	4b23      	ldr	r3, [pc, #140]	; (80650 <main+0xa4>)
   805c2:	4798      	blx	r3
	
	int d = can_init_def_tx_rx_mb(0x00290561);
   805c4:	4823      	ldr	r0, [pc, #140]	; (80654 <main+0xa8>)
   805c6:	4b24      	ldr	r3, [pc, #144]	; (80658 <main+0xac>)
   805c8:	4798      	blx	r3
	printf("Node 2\n\r");
   805ca:	4824      	ldr	r0, [pc, #144]	; (8065c <main+0xb0>)
   805cc:	4b24      	ldr	r3, [pc, #144]	; (80660 <main+0xb4>)
   805ce:	4798      	blx	r3
	
	WDT -> WDT_MR |= WDT_MR_WDDIS;
   805d0:	4a24      	ldr	r2, [pc, #144]	; (80664 <main+0xb8>)
   805d2:	6853      	ldr	r3, [r2, #4]
   805d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   805d8:	6053      	str	r3, [r2, #4]
	PIOC->PIO_CODR |= PIO_PC9;
   805da:	f5a2 6205 	sub.w	r2, r2, #2128	; 0x850
   805de:	6b53      	ldr	r3, [r2, #52]	; 0x34
   805e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   805e4:	6353      	str	r3, [r2, #52]	; 0x34
	
	CAN_MESSAGE msg;
	msg.id = 12;
   805e6:	230c      	movs	r3, #12
   805e8:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.data_length = 1;
   805ec:	2301      	movs	r3, #1
   805ee:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.data[0] = 'x';
   805f2:	2378      	movs	r3, #120	; 0x78
   805f4:	f88d 3008 	strb.w	r3, [sp, #8]
	// Put the motor in the center AUTOHOME
	//motor_set_with_PI(0);
	
	//motor_set_direction_speed(LEFT, 81);
	
	solenoid_init();
   805f8:	4b1b      	ldr	r3, [pc, #108]	; (80668 <main+0xbc>)
   805fa:	4798      	blx	r3
	
	while(1)
	{	
		// GOAL logic
		if (ADC_check_goal() && !game_pause)
   805fc:	4c1b      	ldr	r4, [pc, #108]	; (8066c <main+0xc0>)
   805fe:	4d1c      	ldr	r5, [pc, #112]	; (80670 <main+0xc4>)
		{
			score++;
			printf("score: %d \n\r", score);
   80600:	4e1c      	ldr	r6, [pc, #112]	; (80674 <main+0xc8>)
   80602:	e009      	b.n	80618 <main+0x6c>
		}
		
		// To check data from encoder
		//printf("%d \r\n", motor_encoder_read());
		// Setting step_position value for moving stepper
		PWM_set_value(step_position);
   80604:	4b1c      	ldr	r3, [pc, #112]	; (80678 <main+0xcc>)
   80606:	7818      	ldrb	r0, [r3, #0]
   80608:	4b1c      	ldr	r3, [pc, #112]	; (8067c <main+0xd0>)
   8060a:	4798      	blx	r3
		//printf("%d",step_position);
		// Only joystick button for solenoid
		solenoid_routine(buttons & 0x01);
   8060c:	4b1c      	ldr	r3, [pc, #112]	; (80680 <main+0xd4>)
   8060e:	7818      	ldrb	r0, [r3, #0]
   80610:	f000 0001 	and.w	r0, r0, #1
   80614:	4b1b      	ldr	r3, [pc, #108]	; (80684 <main+0xd8>)
   80616:	4798      	blx	r3
		if (ADC_check_goal() && !game_pause)
   80618:	47a0      	blx	r4
   8061a:	2800      	cmp	r0, #0
   8061c:	d0f2      	beq.n	80604 <main+0x58>
   8061e:	782b      	ldrb	r3, [r5, #0]
   80620:	2b00      	cmp	r3, #0
   80622:	d1ef      	bne.n	80604 <main+0x58>
			score++;
   80624:	7869      	ldrb	r1, [r5, #1]
   80626:	3101      	adds	r1, #1
   80628:	b2c9      	uxtb	r1, r1
   8062a:	7069      	strb	r1, [r5, #1]
			printf("score: %d \n\r", score);
   8062c:	4630      	mov	r0, r6
   8062e:	4b0c      	ldr	r3, [pc, #48]	; (80660 <main+0xb4>)
   80630:	4798      	blx	r3
			game_pause = 1;
   80632:	2301      	movs	r3, #1
   80634:	702b      	strb	r3, [r5, #0]
			can_send(&msg, 0);
   80636:	2100      	movs	r1, #0
   80638:	a801      	add	r0, sp, #4
   8063a:	4b13      	ldr	r3, [pc, #76]	; (80688 <main+0xdc>)
   8063c:	4798      	blx	r3
   8063e:	e7e1      	b.n	80604 <main+0x58>
   80640:	00080509 	.word	0x00080509
   80644:	00080b39 	.word	0x00080b39
   80648:	00080a69 	.word	0x00080a69
   8064c:	00080161 	.word	0x00080161
   80650:	0008068d 	.word	0x0008068d
   80654:	00290561 	.word	0x00290561
   80658:	00080299 	.word	0x00080299
   8065c:	00080df0 	.word	0x00080df0
   80660:	00080a45 	.word	0x00080a45
   80664:	400e1a50 	.word	0x400e1a50
   80668:	00080af9 	.word	0x00080af9
   8066c:	00080195 	.word	0x00080195
   80670:	20000451 	.word	0x20000451
   80674:	00080dfc 	.word	0x00080dfc
   80678:	20000450 	.word	0x20000450
   8067c:	00080abd 	.word	0x00080abd
   80680:	20000464 	.word	0x20000464
   80684:	00080b19 	.word	0x00080b19
   80688:	000802a9 	.word	0x000802a9

0008068c <motor_init>:
#include "motor.h"

void motor_init()
{
   8068c:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);
   8068e:	4c1e      	ldr	r4, [pc, #120]	; (80708 <motor_init+0x7c>)
   80690:	4b1e      	ldr	r3, [pc, #120]	; (8070c <motor_init+0x80>)
   80692:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   80696:	481e      	ldr	r0, [pc, #120]	; (80710 <motor_init+0x84>)
   80698:	6903      	ldr	r3, [r0, #16]
   8069a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8069e:	6103      	str	r3, [r0, #16]
	//PMC->PMC_PCER0 |= (1 << ID_PIOD);
	
	// Set EN pin for motor (PD9)
	PIOD -> PIO_PER |= PIO_PER_P9;
   806a0:	4b1c      	ldr	r3, [pc, #112]	; (80714 <motor_init+0x88>)
   806a2:	681a      	ldr	r2, [r3, #0]
   806a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806a8:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P9;
   806aa:	691a      	ldr	r2, [r3, #16]
   806ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806b0:	611a      	str	r2, [r3, #16]
	PIOD -> PIO_SODR |= PIO_SODR_P9;
   806b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   806b8:	631a      	str	r2, [r3, #48]	; 0x30

	// DIR
	PIOD -> PIO_PER = PIO_PD10;
   806ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806be:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD10;
   806c0:	611a      	str	r2, [r3, #16]
	
	// !OE
	PIOD -> PIO_PER = PIO_PD0;
   806c2:	2101      	movs	r1, #1
   806c4:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER = PIO_PD0;
   806c6:	6119      	str	r1, [r3, #16]
	PIOD -> PIO_CODR = PIO_CODR_P0;
   806c8:	6359      	str	r1, [r3, #52]	; 0x34
	
	// SEL
	PIOD -> PIO_PER = PIO_PD2;
   806ca:	2204      	movs	r2, #4
   806cc:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD2;
   806ce:	611a      	str	r2, [r3, #16]
	
	// !RES
	PIOD -> PIO_PER = PIO_PD1;
   806d0:	2202      	movs	r2, #2
   806d2:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD1;
   806d4:	611a      	str	r2, [r3, #16]
	
	
	// Initialize DAC
	PMC->PMC_PCER1 = PMC_PCER1_PID38;     // DACC power ON
   806d6:	2540      	movs	r5, #64	; 0x40
   806d8:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
	DACC->DACC_CR = DACC_CR_SWRST ;       // Reset DACC
   806dc:	f5a0 30c3 	sub.w	r0, r0, #99840	; 0x18600
   806e0:	6001      	str	r1, [r0, #0]

	DACC->DACC_MR = DACC_MR_TRGEN_DIS                    // Free running mode
   806e2:	f44f 3585 	mov.w	r5, #68096	; 0x10a00
   806e6:	6045      	str	r5, [r0, #4]
	| DACC_MR_USER_SEL_CHANNEL1          // select channel 1
	| DACC_MR_REFRESH (10);

	DACC->DACC_IER |= DACC_IER_EOC;
   806e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
   806ea:	4315      	orrs	r5, r2
   806ec:	6245      	str	r5, [r0, #36]	; 0x24
	// Enable channel 1 = DAC1
	DACC->DACC_CHER = DACC_CHER_CH1;
   806ee:	6102      	str	r2, [r0, #16]
	
	//DACC->DACC_ISR;  // Read and clear status register
	
	// Setting encoder pins as input
	PIOC -> PIO_IFER = (0xFF << 1);
   806f0:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   806f4:	6220      	str	r0, [r4, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);
   806f6:	6620      	str	r0, [r4, #96]	; 0x60
	// !RES to low
	PIOD -> PIO_CODR = PIO_PD1;
   806f8:	635a      	str	r2, [r3, #52]	; 0x34
	// !RES to high
	PIOD -> PIO_SODR = PIO_PD1;
   806fa:	631a      	str	r2, [r3, #48]	; 0x30
	
	// Initialize PI controller
	PI_init(20,1,&pid);
   806fc:	4a06      	ldr	r2, [pc, #24]	; (80718 <motor_init+0x8c>)
   806fe:	2014      	movs	r0, #20
   80700:	4b06      	ldr	r3, [pc, #24]	; (8071c <motor_init+0x90>)
   80702:	4798      	blx	r3
   80704:	bd38      	pop	{r3, r4, r5, pc}
   80706:	bf00      	nop
   80708:	400e1200 	.word	0x400e1200
   8070c:	50494f00 	.word	0x50494f00
   80710:	400e0600 	.word	0x400e0600
   80714:	400e1400 	.word	0x400e1400
   80718:	20000454 	.word	0x20000454
   8071c:	00080771 	.word	0x00080771

00080720 <motor_set_direction>:

}

void motor_set_direction(uint8_t direction)
{
	if(direction == LEFT){
   80720:	b128      	cbz	r0, 8072e <motor_set_direction+0xe>
		// Set LEFT direction (PD10)
		PIOD -> PIO_CODR |= PIO_CODR_P10;
		
		} else {
		// Set RIGHT direction (PD10)
		PIOD -> PIO_SODR |= PIO_SODR_P10;
   80722:	4a06      	ldr	r2, [pc, #24]	; (8073c <motor_set_direction+0x1c>)
   80724:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8072a:	6313      	str	r3, [r2, #48]	; 0x30
   8072c:	4770      	bx	lr
		PIOD -> PIO_CODR |= PIO_CODR_P10;
   8072e:	4a03      	ldr	r2, [pc, #12]	; (8073c <motor_set_direction+0x1c>)
   80730:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80736:	6353      	str	r3, [r2, #52]	; 0x34
   80738:	4770      	bx	lr
   8073a:	bf00      	nop
   8073c:	400e1400 	.word	0x400e1400

00080740 <motor_set_speed>:
	{
		speed = 0;
	}
	
	// Speed should be between 0 and 100
	uint16_t speed_voltage = speed * 30;
   80740:	2864      	cmp	r0, #100	; 0x64
   80742:	bf28      	it	cs
   80744:	2064      	movcs	r0, #100	; 0x64
   80746:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   8074a:	0040      	lsls	r0, r0, #1
	
	// Set speed value
	DACC -> DACC_CDR = speed_voltage;
   8074c:	b280      	uxth	r0, r0
   8074e:	4b01      	ldr	r3, [pc, #4]	; (80754 <motor_set_speed+0x14>)
   80750:	6218      	str	r0, [r3, #32]
   80752:	4770      	bx	lr
   80754:	400c8000 	.word	0x400c8000

00080758 <motor_set_direction_speed>:
}

void motor_set_direction_speed(uint8_t direction, uint16_t speed)
{
   80758:	b510      	push	{r4, lr}
   8075a:	460c      	mov	r4, r1
	motor_set_direction(direction);
   8075c:	4b02      	ldr	r3, [pc, #8]	; (80768 <motor_set_direction_speed+0x10>)
   8075e:	4798      	blx	r3
	motor_set_speed(speed);
   80760:	b2e0      	uxtb	r0, r4
   80762:	4b02      	ldr	r3, [pc, #8]	; (8076c <motor_set_direction_speed+0x14>)
   80764:	4798      	blx	r3
   80766:	bd10      	pop	{r4, pc}
   80768:	00080721 	.word	0x00080721
   8076c:	00080741 	.word	0x00080741

00080770 <PI_init>:
#include "PI.h"

void PI_init(int16_t P_factor, int16_t I_factor, pidData_t* pid_st)
{
	// Initializing data for the PI structure
	pid_st -> P_Factor = P_factor;
   80770:	8110      	strh	r0, [r2, #8]
	pid_st -> I_Factor = I_factor;
   80772:	60d1      	str	r1, [r2, #12]
	pid_st -> error = 0;
   80774:	2300      	movs	r3, #0
   80776:	8013      	strh	r3, [r2, #0]
	pid_st -> integral = 0;
   80778:	6053      	str	r3, [r2, #4]
   8077a:	4770      	bx	lr

0008077c <prints>:
   8077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80780:	460d      	mov	r5, r1
   80782:	1e16      	subs	r6, r2, #0
   80784:	dd48      	ble.n	80818 <prints+0x9c>
   80786:	780a      	ldrb	r2, [r1, #0]
   80788:	2a00      	cmp	r2, #0
   8078a:	d035      	beq.n	807f8 <prints+0x7c>
   8078c:	460a      	mov	r2, r1
   8078e:	2400      	movs	r4, #0
   80790:	3401      	adds	r4, #1
   80792:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80796:	2900      	cmp	r1, #0
   80798:	d1fa      	bne.n	80790 <prints+0x14>
   8079a:	42a6      	cmp	r6, r4
   8079c:	dc2d      	bgt.n	807fa <prints+0x7e>
   8079e:	2400      	movs	r4, #0
   807a0:	f003 0202 	and.w	r2, r3, #2
   807a4:	2a00      	cmp	r2, #0
   807a6:	bf0c      	ite	eq
   807a8:	f04f 0820 	moveq.w	r8, #32
   807ac:	f04f 0830 	movne.w	r8, #48	; 0x30
   807b0:	f013 0301 	ands.w	r3, r3, #1
   807b4:	d123      	bne.n	807fe <prints+0x82>
   807b6:	2c00      	cmp	r4, #0
   807b8:	dd28      	ble.n	8080c <prints+0x90>
   807ba:	4626      	mov	r6, r4
   807bc:	fa5f f988 	uxtb.w	r9, r8
   807c0:	4f18      	ldr	r7, [pc, #96]	; (80824 <prints+0xa8>)
   807c2:	4648      	mov	r0, r9
   807c4:	47b8      	blx	r7
   807c6:	3e01      	subs	r6, #1
   807c8:	d1fb      	bne.n	807c2 <prints+0x46>
   807ca:	7828      	ldrb	r0, [r5, #0]
   807cc:	b188      	cbz	r0, 807f2 <prints+0x76>
   807ce:	4f15      	ldr	r7, [pc, #84]	; (80824 <prints+0xa8>)
   807d0:	47b8      	blx	r7
   807d2:	3401      	adds	r4, #1
   807d4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   807d8:	2800      	cmp	r0, #0
   807da:	d1f9      	bne.n	807d0 <prints+0x54>
   807dc:	2e00      	cmp	r6, #0
   807de:	dd08      	ble.n	807f2 <prints+0x76>
   807e0:	4635      	mov	r5, r6
   807e2:	fa5f f888 	uxtb.w	r8, r8
   807e6:	4f0f      	ldr	r7, [pc, #60]	; (80824 <prints+0xa8>)
   807e8:	4640      	mov	r0, r8
   807ea:	47b8      	blx	r7
   807ec:	3d01      	subs	r5, #1
   807ee:	d1fb      	bne.n	807e8 <prints+0x6c>
   807f0:	4434      	add	r4, r6
   807f2:	4620      	mov	r0, r4
   807f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   807f8:	2400      	movs	r4, #0
   807fa:	1b34      	subs	r4, r6, r4
   807fc:	e7d0      	b.n	807a0 <prints+0x24>
   807fe:	4626      	mov	r6, r4
   80800:	7828      	ldrb	r0, [r5, #0]
   80802:	b108      	cbz	r0, 80808 <prints+0x8c>
   80804:	2400      	movs	r4, #0
   80806:	e7e2      	b.n	807ce <prints+0x52>
   80808:	2400      	movs	r4, #0
   8080a:	e7e7      	b.n	807dc <prints+0x60>
   8080c:	4626      	mov	r6, r4
   8080e:	461c      	mov	r4, r3
   80810:	e7db      	b.n	807ca <prints+0x4e>
   80812:	f04f 0820 	mov.w	r8, #32
   80816:	e7d8      	b.n	807ca <prints+0x4e>
   80818:	f013 0401 	ands.w	r4, r3, #1
   8081c:	d0f9      	beq.n	80812 <prints+0x96>
   8081e:	f04f 0820 	mov.w	r8, #32
   80822:	e7ed      	b.n	80800 <prints+0x84>
   80824:	00080ba1 	.word	0x00080ba1

00080828 <printi>:
   80828:	b5f0      	push	{r4, r5, r6, r7, lr}
   8082a:	b085      	sub	sp, #20
   8082c:	4607      	mov	r7, r0
   8082e:	b381      	cbz	r1, 80892 <printi+0x6a>
   80830:	460c      	mov	r4, r1
   80832:	b10b      	cbz	r3, 80838 <printi+0x10>
   80834:	2a0a      	cmp	r2, #10
   80836:	d038      	beq.n	808aa <printi+0x82>
   80838:	2300      	movs	r3, #0
   8083a:	f88d 300f 	strb.w	r3, [sp, #15]
   8083e:	2600      	movs	r6, #0
   80840:	2900      	cmp	r1, #0
   80842:	d046      	beq.n	808d2 <printi+0xaa>
   80844:	f10d 050f 	add.w	r5, sp, #15
   80848:	990c      	ldr	r1, [sp, #48]	; 0x30
   8084a:	393a      	subs	r1, #58	; 0x3a
   8084c:	fbb4 f3f2 	udiv	r3, r4, r2
   80850:	fb02 4313 	mls	r3, r2, r3, r4
   80854:	2b09      	cmp	r3, #9
   80856:	bfc8      	it	gt
   80858:	185b      	addgt	r3, r3, r1
   8085a:	3330      	adds	r3, #48	; 0x30
   8085c:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80860:	fbb4 f4f2 	udiv	r4, r4, r2
   80864:	2c00      	cmp	r4, #0
   80866:	d1f1      	bne.n	8084c <printi+0x24>
   80868:	b156      	cbz	r6, 80880 <printi+0x58>
   8086a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8086c:	b11b      	cbz	r3, 80876 <printi+0x4e>
   8086e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80870:	f013 0f02 	tst.w	r3, #2
   80874:	d125      	bne.n	808c2 <printi+0x9a>
   80876:	232d      	movs	r3, #45	; 0x2d
   80878:	f805 3c01 	strb.w	r3, [r5, #-1]
   8087c:	3d01      	subs	r5, #1
   8087e:	2600      	movs	r6, #0
   80880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80884:	4629      	mov	r1, r5
   80886:	4638      	mov	r0, r7
   80888:	4c14      	ldr	r4, [pc, #80]	; (808dc <printi+0xb4>)
   8088a:	47a0      	blx	r4
   8088c:	4430      	add	r0, r6
   8088e:	b005      	add	sp, #20
   80890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80892:	2330      	movs	r3, #48	; 0x30
   80894:	f88d 3004 	strb.w	r3, [sp, #4]
   80898:	2300      	movs	r3, #0
   8089a:	f88d 3005 	strb.w	r3, [sp, #5]
   8089e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   808a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   808a2:	a901      	add	r1, sp, #4
   808a4:	4c0d      	ldr	r4, [pc, #52]	; (808dc <printi+0xb4>)
   808a6:	47a0      	blx	r4
   808a8:	e7f1      	b.n	8088e <printi+0x66>
   808aa:	2900      	cmp	r1, #0
   808ac:	dac4      	bge.n	80838 <printi+0x10>
   808ae:	424c      	negs	r4, r1
   808b0:	2300      	movs	r3, #0
   808b2:	f88d 300f 	strb.w	r3, [sp, #15]
   808b6:	f10d 050f 	add.w	r5, sp, #15
   808ba:	2c00      	cmp	r4, #0
   808bc:	d0d5      	beq.n	8086a <printi+0x42>
   808be:	2601      	movs	r6, #1
   808c0:	e7c0      	b.n	80844 <printi+0x1c>
   808c2:	202d      	movs	r0, #45	; 0x2d
   808c4:	4b06      	ldr	r3, [pc, #24]	; (808e0 <printi+0xb8>)
   808c6:	4798      	blx	r3
   808c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   808ca:	3b01      	subs	r3, #1
   808cc:	930a      	str	r3, [sp, #40]	; 0x28
   808ce:	2601      	movs	r6, #1
   808d0:	e7d6      	b.n	80880 <printi+0x58>
   808d2:	461e      	mov	r6, r3
   808d4:	f10d 050f 	add.w	r5, sp, #15
   808d8:	e7d2      	b.n	80880 <printi+0x58>
   808da:	bf00      	nop
   808dc:	0008077d 	.word	0x0008077d
   808e0:	00080ba1 	.word	0x00080ba1

000808e4 <print>:
   808e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808e8:	b087      	sub	sp, #28
   808ea:	4680      	mov	r8, r0
   808ec:	780b      	ldrb	r3, [r1, #0]
   808ee:	2b00      	cmp	r3, #0
   808f0:	f000 8094 	beq.w	80a1c <print+0x138>
   808f4:	468b      	mov	fp, r1
   808f6:	4617      	mov	r7, r2
   808f8:	2500      	movs	r5, #0
   808fa:	4e4e      	ldr	r6, [pc, #312]	; (80a34 <print+0x150>)
   808fc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80a3c <print+0x158>
   80900:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80a40 <print+0x15c>
   80904:	e046      	b.n	80994 <print+0xb0>
   80906:	2200      	movs	r2, #0
   80908:	e070      	b.n	809ec <print+0x108>
   8090a:	6839      	ldr	r1, [r7, #0]
   8090c:	3704      	adds	r7, #4
   8090e:	484a      	ldr	r0, [pc, #296]	; (80a38 <print+0x154>)
   80910:	2900      	cmp	r1, #0
   80912:	bf08      	it	eq
   80914:	4601      	moveq	r1, r0
   80916:	4640      	mov	r0, r8
   80918:	47d0      	blx	sl
   8091a:	4405      	add	r5, r0
   8091c:	e035      	b.n	8098a <print+0xa6>
   8091e:	6839      	ldr	r1, [r7, #0]
   80920:	3704      	adds	r7, #4
   80922:	2061      	movs	r0, #97	; 0x61
   80924:	9002      	str	r0, [sp, #8]
   80926:	9301      	str	r3, [sp, #4]
   80928:	9200      	str	r2, [sp, #0]
   8092a:	2301      	movs	r3, #1
   8092c:	220a      	movs	r2, #10
   8092e:	4640      	mov	r0, r8
   80930:	47c8      	blx	r9
   80932:	4405      	add	r5, r0
   80934:	e029      	b.n	8098a <print+0xa6>
   80936:	6839      	ldr	r1, [r7, #0]
   80938:	3704      	adds	r7, #4
   8093a:	2061      	movs	r0, #97	; 0x61
   8093c:	9002      	str	r0, [sp, #8]
   8093e:	9301      	str	r3, [sp, #4]
   80940:	9200      	str	r2, [sp, #0]
   80942:	2300      	movs	r3, #0
   80944:	2210      	movs	r2, #16
   80946:	4640      	mov	r0, r8
   80948:	47c8      	blx	r9
   8094a:	4405      	add	r5, r0
   8094c:	e01d      	b.n	8098a <print+0xa6>
   8094e:	6839      	ldr	r1, [r7, #0]
   80950:	3704      	adds	r7, #4
   80952:	2041      	movs	r0, #65	; 0x41
   80954:	9002      	str	r0, [sp, #8]
   80956:	9301      	str	r3, [sp, #4]
   80958:	9200      	str	r2, [sp, #0]
   8095a:	2300      	movs	r3, #0
   8095c:	2210      	movs	r2, #16
   8095e:	4640      	mov	r0, r8
   80960:	47c8      	blx	r9
   80962:	4405      	add	r5, r0
   80964:	e011      	b.n	8098a <print+0xa6>
   80966:	6839      	ldr	r1, [r7, #0]
   80968:	3704      	adds	r7, #4
   8096a:	2061      	movs	r0, #97	; 0x61
   8096c:	9002      	str	r0, [sp, #8]
   8096e:	9301      	str	r3, [sp, #4]
   80970:	9200      	str	r2, [sp, #0]
   80972:	2300      	movs	r3, #0
   80974:	220a      	movs	r2, #10
   80976:	4640      	mov	r0, r8
   80978:	47c8      	blx	r9
   8097a:	4405      	add	r5, r0
   8097c:	e005      	b.n	8098a <print+0xa6>
   8097e:	46a3      	mov	fp, r4
   80980:	f89b 0000 	ldrb.w	r0, [fp]
   80984:	47b0      	blx	r6
   80986:	3501      	adds	r5, #1
   80988:	465c      	mov	r4, fp
   8098a:	f104 0b01 	add.w	fp, r4, #1
   8098e:	7863      	ldrb	r3, [r4, #1]
   80990:	2b00      	cmp	r3, #0
   80992:	d044      	beq.n	80a1e <print+0x13a>
   80994:	2b25      	cmp	r3, #37	; 0x25
   80996:	d1f3      	bne.n	80980 <print+0x9c>
   80998:	f10b 0401 	add.w	r4, fp, #1
   8099c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   809a0:	2b00      	cmp	r3, #0
   809a2:	d03c      	beq.n	80a1e <print+0x13a>
   809a4:	2b25      	cmp	r3, #37	; 0x25
   809a6:	d0ea      	beq.n	8097e <print+0x9a>
   809a8:	2b2d      	cmp	r3, #45	; 0x2d
   809aa:	bf06      	itte	eq
   809ac:	f10b 0402 	addeq.w	r4, fp, #2
   809b0:	2301      	moveq	r3, #1
   809b2:	2300      	movne	r3, #0
   809b4:	7822      	ldrb	r2, [r4, #0]
   809b6:	2a30      	cmp	r2, #48	; 0x30
   809b8:	d105      	bne.n	809c6 <print+0xe2>
   809ba:	f043 0302 	orr.w	r3, r3, #2
   809be:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   809c2:	2a30      	cmp	r2, #48	; 0x30
   809c4:	d0f9      	beq.n	809ba <print+0xd6>
   809c6:	7821      	ldrb	r1, [r4, #0]
   809c8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   809cc:	b2d2      	uxtb	r2, r2
   809ce:	2a09      	cmp	r2, #9
   809d0:	d899      	bhi.n	80906 <print+0x22>
   809d2:	2200      	movs	r2, #0
   809d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   809d8:	3930      	subs	r1, #48	; 0x30
   809da:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   809de:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   809e2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   809e6:	b2c0      	uxtb	r0, r0
   809e8:	2809      	cmp	r0, #9
   809ea:	d9f3      	bls.n	809d4 <print+0xf0>
   809ec:	2973      	cmp	r1, #115	; 0x73
   809ee:	d08c      	beq.n	8090a <print+0x26>
   809f0:	2964      	cmp	r1, #100	; 0x64
   809f2:	d094      	beq.n	8091e <print+0x3a>
   809f4:	2978      	cmp	r1, #120	; 0x78
   809f6:	d09e      	beq.n	80936 <print+0x52>
   809f8:	2958      	cmp	r1, #88	; 0x58
   809fa:	d0a8      	beq.n	8094e <print+0x6a>
   809fc:	2975      	cmp	r1, #117	; 0x75
   809fe:	d0b2      	beq.n	80966 <print+0x82>
   80a00:	2963      	cmp	r1, #99	; 0x63
   80a02:	d1c2      	bne.n	8098a <print+0xa6>
   80a04:	6839      	ldr	r1, [r7, #0]
   80a06:	3704      	adds	r7, #4
   80a08:	f88d 1014 	strb.w	r1, [sp, #20]
   80a0c:	2100      	movs	r1, #0
   80a0e:	f88d 1015 	strb.w	r1, [sp, #21]
   80a12:	a905      	add	r1, sp, #20
   80a14:	4640      	mov	r0, r8
   80a16:	47d0      	blx	sl
   80a18:	4405      	add	r5, r0
   80a1a:	e7b6      	b.n	8098a <print+0xa6>
   80a1c:	2500      	movs	r5, #0
   80a1e:	f1b8 0f00 	cmp.w	r8, #0
   80a22:	d003      	beq.n	80a2c <print+0x148>
   80a24:	f8d8 3000 	ldr.w	r3, [r8]
   80a28:	2200      	movs	r2, #0
   80a2a:	701a      	strb	r2, [r3, #0]
   80a2c:	4628      	mov	r0, r5
   80a2e:	b007      	add	sp, #28
   80a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a34:	00080ba1 	.word	0x00080ba1
   80a38:	00080e0c 	.word	0x00080e0c
   80a3c:	0008077d 	.word	0x0008077d
   80a40:	00080829 	.word	0x00080829

00080a44 <printf>:
   80a44:	b40f      	push	{r0, r1, r2, r3}
   80a46:	b500      	push	{lr}
   80a48:	b083      	sub	sp, #12
   80a4a:	aa04      	add	r2, sp, #16
   80a4c:	f852 1b04 	ldr.w	r1, [r2], #4
   80a50:	9201      	str	r2, [sp, #4]
   80a52:	2000      	movs	r0, #0
   80a54:	4b03      	ldr	r3, [pc, #12]	; (80a64 <printf+0x20>)
   80a56:	4798      	blx	r3
   80a58:	b003      	add	sp, #12
   80a5a:	f85d eb04 	ldr.w	lr, [sp], #4
   80a5e:	b004      	add	sp, #16
   80a60:	4770      	bx	lr
   80a62:	bf00      	nop
   80a64:	000808e5 	.word	0x000808e5

00080a68 <PWM_init>:
#include "PWM.h"

void PWM_init()
{
	REG_PMC_PCER1 |= PMC_PCER1_PID36;				  // Enable PWM
   80a68:	4a12      	ldr	r2, [pc, #72]	; (80ab4 <PWM_init+0x4c>)
   80a6a:	6813      	ldr	r3, [r2, #0]
   80a6c:	f043 0310 	orr.w	r3, r3, #16
   80a70:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABSR |= PIO_ABSR_P19;					  // Set PWM pin perhipheral C
   80a72:	f502 6237 	add.w	r2, r2, #2928	; 0xb70
   80a76:	6813      	ldr	r3, [r2, #0]
   80a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   80a7c:	6013      	str	r3, [r2, #0]
	REG_PIOC_PDR |= PIO_PDR_P19;					  // Set PWM pin to an output1
   80a7e:	3a6c      	subs	r2, #108	; 0x6c
   80a80:	6813      	ldr	r3, [r2, #0]
   80a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   80a86:	6013      	str	r3, [r2, #0]
	REG_PWM_CLK = PWM_CLK_PREA(0) | PWM_CLK_DIVA(42); // Set the PWM clock rate to 2MHz (84MHz/42)
   80a88:	222a      	movs	r2, #42	; 0x2a
   80a8a:	4b0b      	ldr	r3, [pc, #44]	; (80ab8 <PWM_init+0x50>)
   80a8c:	601a      	str	r2, [r3, #0]
	REG_PWM_CMR5 = PWM_CMR_CALG | PWM_CMR_CPRE_CLKA;  // Enable dual slope PWM and set the clock source as CLKA
   80a8e:	f240 120b 	movw	r2, #267	; 0x10b
   80a92:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   80a96:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 20000;							  // Set the PWM frequency 2MHz/(2 * 20000) = 50Hz = 20ms
   80a98:	f644 6220 	movw	r2, #20000	; 0x4e20
   80a9c:	330c      	adds	r3, #12
   80a9e:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 20000 - STEP_CENTER;			  // Set the PWM duty cycle to 1500 - centre the servo
   80aa0:	f644 02f8 	movw	r2, #18680	; 0x48f8
   80aa4:	3b08      	subs	r3, #8
   80aa6:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;					  // Enable the PWM channel
   80aa8:	2220      	movs	r2, #32
   80aaa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   80aae:	601a      	str	r2, [r3, #0]
   80ab0:	4770      	bx	lr
   80ab2:	bf00      	nop
   80ab4:	400e0700 	.word	0x400e0700
   80ab8:	40094000 	.word	0x40094000

00080abc <PWM_set_value>:
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   80abc:	f44f 7352 	mov.w	r3, #840	; 0x348
   80ac0:	fb03 f000 	mul.w	r0, r3, r0
   80ac4:	4b0a      	ldr	r3, [pc, #40]	; (80af0 <PWM_set_value+0x34>)
   80ac6:	fb83 2300 	smull	r2, r3, r3, r0
   80aca:	4403      	add	r3, r0
   80acc:	17c0      	asrs	r0, r0, #31
   80ace:	ebc0 10e3 	rsb	r0, r0, r3, asr #7
	int16_t step_value = STEP_CENTER;

	step_value = map(value, 0, 255, STEP_LEFT_MAX, STEP_RIGHT_MAX);
	//printf("STEP %d\r\n", step_value);

	if (step_value < STEP_LEFT_MAX || step_value > STEP_RIGHT_MAX)
   80ad2:	f500 7361 	add.w	r3, r0, #900	; 0x384
   80ad6:	b280      	uxth	r0, r0
   80ad8:	f5b0 7f52 	cmp.w	r0, #840	; 0x348
   80adc:	d901      	bls.n	80ae2 <PWM_set_value+0x26>
	{
		// Error: Value is outside range
		return 1;
   80ade:	2001      	movs	r0, #1
   80ae0:	4770      	bx	lr
	}
	else
	{
		REG_PWM_CDTY5 = 20000 - step_value;
   80ae2:	b21b      	sxth	r3, r3
   80ae4:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
   80ae8:	3320      	adds	r3, #32
   80aea:	4a02      	ldr	r2, [pc, #8]	; (80af4 <PWM_set_value+0x38>)
   80aec:	6013      	str	r3, [r2, #0]
	}
   80aee:	4770      	bx	lr
   80af0:	80808081 	.word	0x80808081
   80af4:	400942a4 	.word	0x400942a4

00080af8 <solenoid_init>:
#include "solenoid.h"

void solenoid_init(){
	/* Disable pull-up on bit PC2(D0) */
	PIOC->PIO_PUDR |= PIO_PC9;
   80af8:	4b06      	ldr	r3, [pc, #24]	; (80b14 <solenoid_init+0x1c>)
   80afa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80b00:	661a      	str	r2, [r3, #96]	; 0x60
	/* Enable PIO controller on bit PC2(D0) */
	PIOC->PIO_PER |= PIO_PC9;
   80b02:	681a      	ldr	r2, [r3, #0]
   80b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80b08:	601a      	str	r2, [r3, #0]
	/* Set output enable on PC2(D0) */
	PIOC->PIO_OER |= PIO_PC9;
   80b0a:	691a      	ldr	r2, [r3, #16]
   80b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80b10:	611a      	str	r2, [r3, #16]
   80b12:	4770      	bx	lr
   80b14:	400e1200 	.word	0x400e1200

00080b18 <solenoid_routine>:
}

void solenoid_routine(uint8_t pressed){

	if (pressed == 1){
   80b18:	2801      	cmp	r0, #1
   80b1a:	d005      	beq.n	80b28 <solenoid_routine+0x10>
		PIOC->PIO_CODR |= PIO_PC9;
		} else {
		PIOC->PIO_SODR |= PIO_PC9;
   80b1c:	4a05      	ldr	r2, [pc, #20]	; (80b34 <solenoid_routine+0x1c>)
   80b1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80b24:	6313      	str	r3, [r2, #48]	; 0x30
   80b26:	4770      	bx	lr
		PIOC->PIO_CODR |= PIO_PC9;
   80b28:	4a02      	ldr	r2, [pc, #8]	; (80b34 <solenoid_routine+0x1c>)
   80b2a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80b30:	6353      	str	r3, [r2, #52]	; 0x34
   80b32:	4770      	bx	lr
   80b34:	400e1200 	.word	0x400e1200

00080b38 <configure_uart>:
   80b38:	4b16      	ldr	r3, [pc, #88]	; (80b94 <configure_uart+0x5c>)
   80b3a:	2200      	movs	r2, #0
   80b3c:	701a      	strb	r2, [r3, #0]
   80b3e:	705a      	strb	r2, [r3, #1]
   80b40:	4b15      	ldr	r3, [pc, #84]	; (80b98 <configure_uart+0x60>)
   80b42:	f44f 7140 	mov.w	r1, #768	; 0x300
   80b46:	6459      	str	r1, [r3, #68]	; 0x44
   80b48:	6059      	str	r1, [r3, #4]
   80b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80b4c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80b4e:	4002      	ands	r2, r0
   80b50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80b54:	671a      	str	r2, [r3, #112]	; 0x70
   80b56:	6659      	str	r1, [r3, #100]	; 0x64
   80b58:	f44f 7280 	mov.w	r2, #256	; 0x100
   80b5c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80b60:	611a      	str	r2, [r3, #16]
   80b62:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80b66:	21ac      	movs	r1, #172	; 0xac
   80b68:	6019      	str	r1, [r3, #0]
   80b6a:	f240 2123 	movw	r1, #547	; 0x223
   80b6e:	6219      	str	r1, [r3, #32]
   80b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80b74:	6059      	str	r1, [r3, #4]
   80b76:	f240 2102 	movw	r1, #514	; 0x202
   80b7a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80b7e:	f04f 31ff 	mov.w	r1, #4294967295
   80b82:	60d9      	str	r1, [r3, #12]
   80b84:	21e1      	movs	r1, #225	; 0xe1
   80b86:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80b88:	4904      	ldr	r1, [pc, #16]	; (80b9c <configure_uart+0x64>)
   80b8a:	600a      	str	r2, [r1, #0]
   80b8c:	2250      	movs	r2, #80	; 0x50
   80b8e:	601a      	str	r2, [r3, #0]
   80b90:	4770      	bx	lr
   80b92:	bf00      	nop
   80b94:	20000468 	.word	0x20000468
   80b98:	400e0e00 	.word	0x400e0e00
   80b9c:	e000e100 	.word	0xe000e100

00080ba0 <uart_putchar>:
   80ba0:	4b07      	ldr	r3, [pc, #28]	; (80bc0 <uart_putchar+0x20>)
   80ba2:	695b      	ldr	r3, [r3, #20]
   80ba4:	f013 0f02 	tst.w	r3, #2
   80ba8:	d008      	beq.n	80bbc <uart_putchar+0x1c>
   80baa:	4b05      	ldr	r3, [pc, #20]	; (80bc0 <uart_putchar+0x20>)
   80bac:	61d8      	str	r0, [r3, #28]
   80bae:	461a      	mov	r2, r3
   80bb0:	6953      	ldr	r3, [r2, #20]
   80bb2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80bb6:	d0fb      	beq.n	80bb0 <uart_putchar+0x10>
   80bb8:	2000      	movs	r0, #0
   80bba:	4770      	bx	lr
   80bbc:	2001      	movs	r0, #1
   80bbe:	4770      	bx	lr
   80bc0:	400e0800 	.word	0x400e0800

00080bc4 <UART_Handler>:
   80bc4:	b508      	push	{r3, lr}
   80bc6:	4b15      	ldr	r3, [pc, #84]	; (80c1c <UART_Handler+0x58>)
   80bc8:	695b      	ldr	r3, [r3, #20]
   80bca:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80bce:	d003      	beq.n	80bd8 <UART_Handler+0x14>
   80bd0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80bd4:	4a11      	ldr	r2, [pc, #68]	; (80c1c <UART_Handler+0x58>)
   80bd6:	6011      	str	r1, [r2, #0]
   80bd8:	f013 0f01 	tst.w	r3, #1
   80bdc:	d012      	beq.n	80c04 <UART_Handler+0x40>
   80bde:	4810      	ldr	r0, [pc, #64]	; (80c20 <UART_Handler+0x5c>)
   80be0:	7842      	ldrb	r2, [r0, #1]
   80be2:	1c53      	adds	r3, r2, #1
   80be4:	4259      	negs	r1, r3
   80be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80bea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80bee:	bf58      	it	pl
   80bf0:	424b      	negpl	r3, r1
   80bf2:	7801      	ldrb	r1, [r0, #0]
   80bf4:	428b      	cmp	r3, r1
   80bf6:	d006      	beq.n	80c06 <UART_Handler+0x42>
   80bf8:	4908      	ldr	r1, [pc, #32]	; (80c1c <UART_Handler+0x58>)
   80bfa:	6988      	ldr	r0, [r1, #24]
   80bfc:	4908      	ldr	r1, [pc, #32]	; (80c20 <UART_Handler+0x5c>)
   80bfe:	440a      	add	r2, r1
   80c00:	7090      	strb	r0, [r2, #2]
   80c02:	704b      	strb	r3, [r1, #1]
   80c04:	bd08      	pop	{r3, pc}
   80c06:	4807      	ldr	r0, [pc, #28]	; (80c24 <UART_Handler+0x60>)
   80c08:	4b07      	ldr	r3, [pc, #28]	; (80c28 <UART_Handler+0x64>)
   80c0a:	4798      	blx	r3
   80c0c:	4b03      	ldr	r3, [pc, #12]	; (80c1c <UART_Handler+0x58>)
   80c0e:	699a      	ldr	r2, [r3, #24]
   80c10:	4b03      	ldr	r3, [pc, #12]	; (80c20 <UART_Handler+0x5c>)
   80c12:	7859      	ldrb	r1, [r3, #1]
   80c14:	440b      	add	r3, r1
   80c16:	709a      	strb	r2, [r3, #2]
   80c18:	bd08      	pop	{r3, pc}
   80c1a:	bf00      	nop
   80c1c:	400e0800 	.word	0x400e0800
   80c20:	20000468 	.word	0x20000468
   80c24:	00080e14 	.word	0x00080e14
   80c28:	00080a45 	.word	0x00080a45

00080c2c <__libc_init_array>:
   80c2c:	b570      	push	{r4, r5, r6, lr}
   80c2e:	4e0f      	ldr	r6, [pc, #60]	; (80c6c <__libc_init_array+0x40>)
   80c30:	4d0f      	ldr	r5, [pc, #60]	; (80c70 <__libc_init_array+0x44>)
   80c32:	1b76      	subs	r6, r6, r5
   80c34:	10b6      	asrs	r6, r6, #2
   80c36:	bf18      	it	ne
   80c38:	2400      	movne	r4, #0
   80c3a:	d005      	beq.n	80c48 <__libc_init_array+0x1c>
   80c3c:	3401      	adds	r4, #1
   80c3e:	f855 3b04 	ldr.w	r3, [r5], #4
   80c42:	4798      	blx	r3
   80c44:	42a6      	cmp	r6, r4
   80c46:	d1f9      	bne.n	80c3c <__libc_init_array+0x10>
   80c48:	4e0a      	ldr	r6, [pc, #40]	; (80c74 <__libc_init_array+0x48>)
   80c4a:	4d0b      	ldr	r5, [pc, #44]	; (80c78 <__libc_init_array+0x4c>)
   80c4c:	f000 f8f4 	bl	80e38 <_init>
   80c50:	1b76      	subs	r6, r6, r5
   80c52:	10b6      	asrs	r6, r6, #2
   80c54:	bf18      	it	ne
   80c56:	2400      	movne	r4, #0
   80c58:	d006      	beq.n	80c68 <__libc_init_array+0x3c>
   80c5a:	3401      	adds	r4, #1
   80c5c:	f855 3b04 	ldr.w	r3, [r5], #4
   80c60:	4798      	blx	r3
   80c62:	42a6      	cmp	r6, r4
   80c64:	d1f9      	bne.n	80c5a <__libc_init_array+0x2e>
   80c66:	bd70      	pop	{r4, r5, r6, pc}
   80c68:	bd70      	pop	{r4, r5, r6, pc}
   80c6a:	bf00      	nop
   80c6c:	00080e44 	.word	0x00080e44
   80c70:	00080e44 	.word	0x00080e44
   80c74:	00080e4c 	.word	0x00080e4c
   80c78:	00080e44 	.word	0x00080e44

00080c7c <register_fini>:
   80c7c:	4b02      	ldr	r3, [pc, #8]	; (80c88 <register_fini+0xc>)
   80c7e:	b113      	cbz	r3, 80c86 <register_fini+0xa>
   80c80:	4802      	ldr	r0, [pc, #8]	; (80c8c <register_fini+0x10>)
   80c82:	f000 b805 	b.w	80c90 <atexit>
   80c86:	4770      	bx	lr
   80c88:	00000000 	.word	0x00000000
   80c8c:	00080c9d 	.word	0x00080c9d

00080c90 <atexit>:
   80c90:	2300      	movs	r3, #0
   80c92:	4601      	mov	r1, r0
   80c94:	461a      	mov	r2, r3
   80c96:	4618      	mov	r0, r3
   80c98:	f000 b81e 	b.w	80cd8 <__register_exitproc>

00080c9c <__libc_fini_array>:
   80c9c:	b538      	push	{r3, r4, r5, lr}
   80c9e:	4c0a      	ldr	r4, [pc, #40]	; (80cc8 <__libc_fini_array+0x2c>)
   80ca0:	4d0a      	ldr	r5, [pc, #40]	; (80ccc <__libc_fini_array+0x30>)
   80ca2:	1b64      	subs	r4, r4, r5
   80ca4:	10a4      	asrs	r4, r4, #2
   80ca6:	d00a      	beq.n	80cbe <__libc_fini_array+0x22>
   80ca8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80cac:	3b01      	subs	r3, #1
   80cae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80cb2:	3c01      	subs	r4, #1
   80cb4:	f855 3904 	ldr.w	r3, [r5], #-4
   80cb8:	4798      	blx	r3
   80cba:	2c00      	cmp	r4, #0
   80cbc:	d1f9      	bne.n	80cb2 <__libc_fini_array+0x16>
   80cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80cc2:	f000 b8c3 	b.w	80e4c <_fini>
   80cc6:	bf00      	nop
   80cc8:	00080e5c 	.word	0x00080e5c
   80ccc:	00080e58 	.word	0x00080e58

00080cd0 <__retarget_lock_acquire_recursive>:
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop

00080cd4 <__retarget_lock_release_recursive>:
   80cd4:	4770      	bx	lr
   80cd6:	bf00      	nop

00080cd8 <__register_exitproc>:
   80cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80cdc:	4d2c      	ldr	r5, [pc, #176]	; (80d90 <__register_exitproc+0xb8>)
   80cde:	4606      	mov	r6, r0
   80ce0:	6828      	ldr	r0, [r5, #0]
   80ce2:	4698      	mov	r8, r3
   80ce4:	460f      	mov	r7, r1
   80ce6:	4691      	mov	r9, r2
   80ce8:	f7ff fff2 	bl	80cd0 <__retarget_lock_acquire_recursive>
   80cec:	4b29      	ldr	r3, [pc, #164]	; (80d94 <__register_exitproc+0xbc>)
   80cee:	681c      	ldr	r4, [r3, #0]
   80cf0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80cf4:	2b00      	cmp	r3, #0
   80cf6:	d03e      	beq.n	80d76 <__register_exitproc+0x9e>
   80cf8:	685a      	ldr	r2, [r3, #4]
   80cfa:	2a1f      	cmp	r2, #31
   80cfc:	dc1c      	bgt.n	80d38 <__register_exitproc+0x60>
   80cfe:	f102 0e01 	add.w	lr, r2, #1
   80d02:	b176      	cbz	r6, 80d22 <__register_exitproc+0x4a>
   80d04:	2101      	movs	r1, #1
   80d06:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80d0a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80d0e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80d12:	4091      	lsls	r1, r2
   80d14:	4308      	orrs	r0, r1
   80d16:	2e02      	cmp	r6, #2
   80d18:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80d1c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80d20:	d023      	beq.n	80d6a <__register_exitproc+0x92>
   80d22:	3202      	adds	r2, #2
   80d24:	f8c3 e004 	str.w	lr, [r3, #4]
   80d28:	6828      	ldr	r0, [r5, #0]
   80d2a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80d2e:	f7ff ffd1 	bl	80cd4 <__retarget_lock_release_recursive>
   80d32:	2000      	movs	r0, #0
   80d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80d38:	4b17      	ldr	r3, [pc, #92]	; (80d98 <__register_exitproc+0xc0>)
   80d3a:	b30b      	cbz	r3, 80d80 <__register_exitproc+0xa8>
   80d3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80d40:	f3af 8000 	nop.w
   80d44:	4603      	mov	r3, r0
   80d46:	b1d8      	cbz	r0, 80d80 <__register_exitproc+0xa8>
   80d48:	2000      	movs	r0, #0
   80d4a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80d4e:	f04f 0e01 	mov.w	lr, #1
   80d52:	6058      	str	r0, [r3, #4]
   80d54:	6019      	str	r1, [r3, #0]
   80d56:	4602      	mov	r2, r0
   80d58:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80d5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80d60:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80d64:	2e00      	cmp	r6, #0
   80d66:	d0dc      	beq.n	80d22 <__register_exitproc+0x4a>
   80d68:	e7cc      	b.n	80d04 <__register_exitproc+0x2c>
   80d6a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80d6e:	4301      	orrs	r1, r0
   80d70:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80d74:	e7d5      	b.n	80d22 <__register_exitproc+0x4a>
   80d76:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80d7a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80d7e:	e7bb      	b.n	80cf8 <__register_exitproc+0x20>
   80d80:	6828      	ldr	r0, [r5, #0]
   80d82:	f7ff ffa7 	bl	80cd4 <__retarget_lock_release_recursive>
   80d86:	f04f 30ff 	mov.w	r0, #4294967295
   80d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80d8e:	bf00      	nop
   80d90:	20000430 	.word	0x20000430
   80d94:	00080e34 	.word	0x00080e34
   80d98:	00000000 	.word	0x00000000
   80d9c:	7373656d 	.word	0x7373656d
   80da0:	20656761 	.word	0x20656761
   80da4:	746e6573 	.word	0x746e6573
   80da8:	6f726620 	.word	0x6f726620
   80dac:	4f4e206d 	.word	0x4f4e206d
   80db0:	00324544 	.word	0x00324544
   80db4:	6c69614d 	.word	0x6c69614d
   80db8:	20786f62 	.word	0x20786f62
   80dbc:	79737562 	.word	0x79737562
   80dc0:	00000000 	.word	0x00000000
   80dc4:	304e4143 	.word	0x304e4143
   80dc8:	73656d20 	.word	0x73656d20
   80dcc:	65676173 	.word	0x65676173
   80dd0:	72726120 	.word	0x72726120
   80dd4:	64657669 	.word	0x64657669
   80dd8:	206e6920 	.word	0x206e6920
   80ddc:	2d6e6f6e 	.word	0x2d6e6f6e
   80de0:	64657375 	.word	0x64657375
   80de4:	69616d20 	.word	0x69616d20
   80de8:	786f626c 	.word	0x786f626c
   80dec:	00000d0a 	.word	0x00000d0a
   80df0:	65646f4e 	.word	0x65646f4e
   80df4:	0d0a3220 	.word	0x0d0a3220
   80df8:	00000000 	.word	0x00000000
   80dfc:	726f6373 	.word	0x726f6373
   80e00:	25203a65 	.word	0x25203a65
   80e04:	0d0a2064 	.word	0x0d0a2064
   80e08:	00000000 	.word	0x00000000
   80e0c:	6c756e28 	.word	0x6c756e28
   80e10:	0000296c 	.word	0x0000296c
   80e14:	3a525245 	.word	0x3a525245
   80e18:	52415520 	.word	0x52415520
   80e1c:	58522054 	.word	0x58522054
   80e20:	66756220 	.word	0x66756220
   80e24:	20726566 	.word	0x20726566
   80e28:	66207369 	.word	0x66207369
   80e2c:	0a6c6c75 	.word	0x0a6c6c75
   80e30:	0000000d 	.word	0x0000000d

00080e34 <_global_impure_ptr>:
   80e34:	20000008                                ... 

00080e38 <_init>:
   80e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e3a:	bf00      	nop
   80e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80e3e:	bc08      	pop	{r3}
   80e40:	469e      	mov	lr, r3
   80e42:	4770      	bx	lr

00080e44 <__init_array_start>:
   80e44:	00080c7d 	.word	0x00080c7d

00080e48 <__frame_dummy_init_array_entry>:
   80e48:	00080119                                ....

00080e4c <_fini>:
   80e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e4e:	bf00      	nop
   80e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80e52:	bc08      	pop	{r3}
   80e54:	469e      	mov	lr, r3
   80e56:	4770      	bx	lr

00080e58 <__fini_array_start>:
   80e58:	000800f5 	.word	0x000800f5
