
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ea8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080ea8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  20000434  000812dc  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004d0  00081378  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008d0  00081778  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006e6f  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001630  00000000  00000000  00027325  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000144e  00000000  00000000  00028955  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000278  00000000  00000000  00029da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0002a01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012f37  00000000  00000000  0002a22b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000058f5  00000000  00000000  0003d162  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054546  00000000  00000000  00042a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000067c  00000000  00000000  00096fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 e9 03 08 00 e5 03 08 00 e5 03 08 00     ... ............
   80010:	e5 03 08 00 e5 03 08 00 e5 03 08 00 00 00 00 00     ................
	...
   8002c:	e5 03 08 00 e5 03 08 00 00 00 00 00 e5 03 08 00     ................
   8003c:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   8004c:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   8005c:	e5 03 08 00 29 0c 08 00 e5 03 08 00 00 00 00 00     ....)...........
   8006c:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
	...
   80084:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   80094:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800a4:	00 00 00 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800b4:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800c4:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800d4:	e5 03 08 00 e5 03 08 00 e5 03 08 00 e5 03 08 00     ................
   800e4:	e5 03 08 00 e5 03 08 00 2d 03 08 00 e5 03 08 00     ........-.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080ea8 	.word	0x00080ea8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080ea8 	.word	0x00080ea8
   80154:	20000438 	.word	0x20000438
   80158:	00080ea8 	.word	0x00080ea8
   8015c:	00000000 	.word	0x00000000

00080160 <ADC_init>:
#include "ADC.h"

void ADC_init()
{
    PMC->PMC_PCER1 |= PMC_PCER1_PID37; //ADC CLK ON
   80160:	4a0a      	ldr	r2, [pc, #40]	; (8018c <ADC_init+0x2c>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <ADC_init+0x30>)
   80170:	685a      	ldr	r2, [r3, #4]
   80172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80176:	605a      	str	r2, [r3, #4]
    ADC->ADC_CHER |= ADC_CHER_CH0; // CH0 ON
   80178:	691a      	ldr	r2, [r3, #16]
   8017a:	f042 0201 	orr.w	r2, r2, #1
   8017e:	611a      	str	r2, [r3, #16]
    ADC->ADC_CR |= ADC_CR_START;   //starts analog-to-digital conversion
   80180:	681a      	ldr	r2, [r3, #0]
   80182:	f042 0202 	orr.w	r2, r2, #2
   80186:	601a      	str	r2, [r3, #0]
   80188:	4770      	bx	lr
   8018a:	bf00      	nop
   8018c:	400e0600 	.word	0x400e0600
   80190:	400c0000 	.word	0x400c0000

00080194 <ADC_check_goal>:
}

int ADC_read()
{
    // Getting data in the register
    return ADC->ADC_CDR[0];
   80194:	4b03      	ldr	r3, [pc, #12]	; (801a4 <ADC_check_goal+0x10>)
   80196:	6d18      	ldr	r0, [r3, #80]	; 0x50
        // A GOAL is detected
        return 1;
    }

    return 0;
}
   80198:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   8019c:	bfac      	ite	ge
   8019e:	2000      	movge	r0, #0
   801a0:	2001      	movlt	r0, #1
   801a2:	4770      	bx	lr
   801a4:	400c0000 	.word	0x400c0000

000801a8 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801ac:	1855      	adds	r5, r2, r1
   801ae:	2908      	cmp	r1, #8
   801b0:	bf98      	it	ls
   801b2:	2a08      	cmpls	r2, #8
   801b4:	d864      	bhi.n	80280 <can_init+0xd8>
   801b6:	460e      	mov	r6, r1
   801b8:	2d08      	cmp	r5, #8
   801ba:	dc61      	bgt.n	80280 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801bc:	4a32      	ldr	r2, [pc, #200]	; (80288 <can_init+0xe0>)
   801be:	6813      	ldr	r3, [r2, #0]
   801c0:	f023 0301 	bic.w	r3, r3, #1
   801c4:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801c6:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801c8:	4b30      	ldr	r3, [pc, #192]	; (8028c <can_init+0xe4>)
   801ca:	f44f 7440 	mov.w	r4, #768	; 0x300
   801ce:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801d0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801d2:	f024 0403 	bic.w	r4, r4, #3
   801d6:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801d8:	2403      	movs	r4, #3
   801da:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801dc:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801e2:	4c2b      	ldr	r4, [pc, #172]	; (80290 <can_init+0xe8>)
   801e4:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801e8:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801ec:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801f0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801f4:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f6:	42a9      	cmp	r1, r5
   801f8:	dc40      	bgt.n	8027c <can_init+0xd4>
   801fa:	460a      	mov	r2, r1
   801fc:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801fe:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80200:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80288 <can_init+0xe0>
   80204:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80208:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8020c:	2701      	movs	r7, #1
   8020e:	0153      	lsls	r3, r2, #5
   80210:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80214:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80218:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8021c:	4443      	add	r3, r8
   8021e:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80222:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80226:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   8022a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8022e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80232:	fa07 f302 	lsl.w	r3, r7, r2
   80236:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80238:	3201      	adds	r2, #1
   8023a:	4295      	cmp	r5, r2
   8023c:	dae7      	bge.n	8020e <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   8023e:	b181      	cbz	r1, 80262 <can_init+0xba>
   80240:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80242:	4911      	ldr	r1, [pc, #68]	; (80288 <can_init+0xe0>)
   80244:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80248:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8024c:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80250:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80254:	f103 0210 	add.w	r2, r3, #16
   80258:	0152      	lsls	r2, r2, #5
   8025a:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8025c:	3301      	adds	r3, #1
   8025e:	429e      	cmp	r6, r3
   80260:	d1f4      	bne.n	8024c <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80262:	4b09      	ldr	r3, [pc, #36]	; (80288 <can_init+0xe0>)
   80264:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80266:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8026a:	4a0a      	ldr	r2, [pc, #40]	; (80294 <can_init+0xec>)
   8026c:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   8026e:	681a      	ldr	r2, [r3, #0]
   80270:	f042 0201 	orr.w	r2, r2, #1
   80274:	601a      	str	r2, [r3, #0]

	return 0;
   80276:	2000      	movs	r0, #0
   80278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   8027c:	2400      	movs	r4, #0
   8027e:	e7de      	b.n	8023e <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80280:	2001      	movs	r0, #1
}
   80282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80286:	bf00      	nop
   80288:	400b4000 	.word	0x400b4000
   8028c:	400e0e00 	.word	0x400e0e00
   80290:	1000102b 	.word	0x1000102b
   80294:	e000e100 	.word	0xe000e100

00080298 <can_init_def_tx_rx_mb>:
{
   80298:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   8029a:	2202      	movs	r2, #2
   8029c:	2101      	movs	r1, #1
   8029e:	4b01      	ldr	r3, [pc, #4]	; (802a4 <can_init_def_tx_rx_mb+0xc>)
   802a0:	4798      	blx	r3
}
   802a2:	bd08      	pop	{r3, pc}
   802a4:	000801a9 	.word	0x000801a9

000802a8 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802a8:	014b      	lsls	r3, r1, #5
   802aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ae:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ba:	d033      	beq.n	80324 <can_receive+0x7c>
{
   802bc:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802be:	014b      	lsls	r3, r1, #5
   802c0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802c4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802cc:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802d0:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802d4:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802d8:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802de:	f3c3 4303 	ubfx	r3, r3, #16, #4
   802e2:	8043      	strh	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802e4:	461d      	mov	r5, r3
   802e6:	b15b      	cbz	r3, 80300 <can_receive+0x58>
   802e8:	3004      	adds	r0, #4
   802ea:	2300      	movs	r3, #0
		{
			if(i < 4)
   802ec:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802ee:	bfd9      	ittee	le
   802f0:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802f2:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802f4:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802f6:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802f8:	3301      	adds	r3, #1
   802fa:	3001      	adds	r0, #1
   802fc:	42ab      	cmp	r3, r5
   802fe:	d1f5      	bne.n	802ec <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80300:	4b09      	ldr	r3, [pc, #36]	; (80328 <can_receive+0x80>)
   80302:	f101 0210 	add.w	r2, r1, #16
   80306:	0152      	lsls	r2, r2, #5
   80308:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8030c:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   8030e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80312:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80316:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8031a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   8031e:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80320:	bc30      	pop	{r4, r5}
   80322:	4770      	bx	lr
		return 1;
   80324:	2001      	movs	r0, #1
   80326:	4770      	bx	lr
   80328:	400b4000 	.word	0x400b4000

0008032c <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   8032c:	b510      	push	{r4, lr}
   8032e:	b084      	sub	sp, #16
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80330:	4b21      	ldr	r3, [pc, #132]	; (803b8 <CAN0_Handler+0x8c>)
   80332:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80334:	f014 0f06 	tst.w	r4, #6
   80338:	d023      	beq.n	80382 <CAN0_Handler+0x56>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8033a:	f014 0f02 	tst.w	r4, #2
   8033e:	d12d      	bne.n	8039c <CAN0_Handler+0x70>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80340:	f014 0f04 	tst.w	r4, #4
   80344:	d02f      	beq.n	803a6 <CAN0_Handler+0x7a>
		
		{
			can_receive(&message, 2);
   80346:	2102      	movs	r1, #2
   80348:	a801      	add	r0, sp, #4
   8034a:	4b1c      	ldr	r3, [pc, #112]	; (803bc <CAN0_Handler+0x90>)
   8034c:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8034e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   80352:	b11a      	cbz	r2, 8035c <CAN0_Handler+0x30>
   80354:	2300      	movs	r3, #0
   80356:	3301      	adds	r3, #1
   80358:	4293      	cmp	r3, r2
   8035a:	d1fc      	bne.n	80356 <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		// Setting step motor with X-Axis when message is received
		if(message.data[0] < 20)
   8035c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   80360:	2b13      	cmp	r3, #19
   80362:	d924      	bls.n	803ae <CAN0_Handler+0x82>
		{
			motor_set_direction_speed(LEFT, 81);
		} else if (message.data[0] > 80)
   80364:	2b50      	cmp	r3, #80	; 0x50
		{
			motor_set_direction_speed(RIGHT, 81);	
   80366:	bf8c      	ite	hi
   80368:	2151      	movhi	r1, #81	; 0x51
		}
		else {
			motor_set_direction_speed(RIGHT, 0);	
   8036a:	2100      	movls	r1, #0
   8036c:	2001      	movs	r0, #1
   8036e:	4b14      	ldr	r3, [pc, #80]	; (803c0 <CAN0_Handler+0x94>)
   80370:	4798      	blx	r3
		}
		
		// Updating buttons variable
		buttons = message.data[2];
   80372:	f89d 200a 	ldrb.w	r2, [sp, #10]
   80376:	4b13      	ldr	r3, [pc, #76]	; (803c4 <CAN0_Handler+0x98>)
   80378:	701a      	strb	r2, [r3, #0]
		
		// Updating stepper values
		step_position = message.data[3];
   8037a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   8037e:	4b12      	ldr	r3, [pc, #72]	; (803c8 <CAN0_Handler+0x9c>)
   80380:	701a      	strb	r2, [r3, #0]
	}
	
	if(can_sr & CAN_SR_MB0)
   80382:	f014 0f01 	tst.w	r4, #1
   80386:	d002      	beq.n	8038e <CAN0_Handler+0x62>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80388:	2201      	movs	r2, #1
   8038a:	4b0b      	ldr	r3, [pc, #44]	; (803b8 <CAN0_Handler+0x8c>)
   8038c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8038e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80392:	4b0e      	ldr	r3, [pc, #56]	; (803cc <CAN0_Handler+0xa0>)
   80394:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80398:	b004      	add	sp, #16
   8039a:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   8039c:	2101      	movs	r1, #1
   8039e:	a801      	add	r0, sp, #4
   803a0:	4b06      	ldr	r3, [pc, #24]	; (803bc <CAN0_Handler+0x90>)
   803a2:	4798      	blx	r3
   803a4:	e7d3      	b.n	8034e <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803a6:	480a      	ldr	r0, [pc, #40]	; (803d0 <CAN0_Handler+0xa4>)
   803a8:	4b0a      	ldr	r3, [pc, #40]	; (803d4 <CAN0_Handler+0xa8>)
   803aa:	4798      	blx	r3
   803ac:	e7cf      	b.n	8034e <CAN0_Handler+0x22>
			motor_set_direction_speed(LEFT, 81);
   803ae:	2151      	movs	r1, #81	; 0x51
   803b0:	2000      	movs	r0, #0
   803b2:	4b03      	ldr	r3, [pc, #12]	; (803c0 <CAN0_Handler+0x94>)
   803b4:	4798      	blx	r3
   803b6:	e7dc      	b.n	80372 <CAN0_Handler+0x46>
   803b8:	400b4000 	.word	0x400b4000
   803bc:	000802a9 	.word	0x000802a9
   803c0:	000806a9 	.word	0x000806a9
   803c4:	20000464 	.word	0x20000464
   803c8:	20000450 	.word	0x20000450
   803cc:	e000e100 	.word	0xe000e100
   803d0:	00080e00 	.word	0x00080e00
   803d4:	00080a91 	.word	0x00080a91

000803d8 <delay_us>:
	printf("delayed");
}

void delay_us(uint16_t value)
{
	for(int i = value; i > 0; i--)
   803d8:	4603      	mov	r3, r0
   803da:	b110      	cbz	r0, 803e2 <delay_us+0xa>
		asm("NOP");
   803dc:	bf00      	nop
	for(int i = value; i > 0; i--)
   803de:	3b01      	subs	r3, #1
   803e0:	d1fc      	bne.n	803dc <delay_us+0x4>
   803e2:	4770      	bx	lr

000803e4 <Dummy_Handler>:
   803e4:	e7fe      	b.n	803e4 <Dummy_Handler>
	...

000803e8 <Reset_Handler>:
   803e8:	b508      	push	{r3, lr}
   803ea:	4b18      	ldr	r3, [pc, #96]	; (8044c <Reset_Handler+0x64>)
   803ec:	4a18      	ldr	r2, [pc, #96]	; (80450 <Reset_Handler+0x68>)
   803ee:	429a      	cmp	r2, r3
   803f0:	d010      	beq.n	80414 <Reset_Handler+0x2c>
   803f2:	4b18      	ldr	r3, [pc, #96]	; (80454 <Reset_Handler+0x6c>)
   803f4:	4a15      	ldr	r2, [pc, #84]	; (8044c <Reset_Handler+0x64>)
   803f6:	429a      	cmp	r2, r3
   803f8:	d20c      	bcs.n	80414 <Reset_Handler+0x2c>
   803fa:	3b01      	subs	r3, #1
   803fc:	1a9b      	subs	r3, r3, r2
   803fe:	f023 0303 	bic.w	r3, r3, #3
   80402:	3304      	adds	r3, #4
   80404:	4413      	add	r3, r2
   80406:	4912      	ldr	r1, [pc, #72]	; (80450 <Reset_Handler+0x68>)
   80408:	f851 0b04 	ldr.w	r0, [r1], #4
   8040c:	f842 0b04 	str.w	r0, [r2], #4
   80410:	429a      	cmp	r2, r3
   80412:	d1f9      	bne.n	80408 <Reset_Handler+0x20>
   80414:	4b10      	ldr	r3, [pc, #64]	; (80458 <Reset_Handler+0x70>)
   80416:	4a11      	ldr	r2, [pc, #68]	; (8045c <Reset_Handler+0x74>)
   80418:	429a      	cmp	r2, r3
   8041a:	d20a      	bcs.n	80432 <Reset_Handler+0x4a>
   8041c:	3b01      	subs	r3, #1
   8041e:	1a9b      	subs	r3, r3, r2
   80420:	f023 0303 	bic.w	r3, r3, #3
   80424:	3304      	adds	r3, #4
   80426:	4413      	add	r3, r2
   80428:	2100      	movs	r1, #0
   8042a:	f842 1b04 	str.w	r1, [r2], #4
   8042e:	4293      	cmp	r3, r2
   80430:	d1fb      	bne.n	8042a <Reset_Handler+0x42>
   80432:	4b0b      	ldr	r3, [pc, #44]	; (80460 <Reset_Handler+0x78>)
   80434:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80438:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8043c:	4a09      	ldr	r2, [pc, #36]	; (80464 <Reset_Handler+0x7c>)
   8043e:	6093      	str	r3, [r2, #8]
   80440:	4b09      	ldr	r3, [pc, #36]	; (80468 <Reset_Handler+0x80>)
   80442:	4798      	blx	r3
   80444:	4b09      	ldr	r3, [pc, #36]	; (8046c <Reset_Handler+0x84>)
   80446:	4798      	blx	r3
   80448:	e7fe      	b.n	80448 <Reset_Handler+0x60>
   8044a:	bf00      	nop
   8044c:	20000000 	.word	0x20000000
   80450:	00080ea8 	.word	0x00080ea8
   80454:	20000434 	.word	0x20000434
   80458:	200004d0 	.word	0x200004d0
   8045c:	20000434 	.word	0x20000434
   80460:	00080000 	.word	0x00080000
   80464:	e000ed00 	.word	0xe000ed00
   80468:	00080c91 	.word	0x00080c91
   8046c:	00080515 	.word	0x00080515

00080470 <SystemInit>:
   80470:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80474:	4a20      	ldr	r2, [pc, #128]	; (804f8 <SystemInit+0x88>)
   80476:	6013      	str	r3, [r2, #0]
   80478:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8047c:	6013      	str	r3, [r2, #0]
   8047e:	4b1f      	ldr	r3, [pc, #124]	; (804fc <SystemInit+0x8c>)
   80480:	6a1b      	ldr	r3, [r3, #32]
   80482:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80486:	d107      	bne.n	80498 <SystemInit+0x28>
   80488:	4a1d      	ldr	r2, [pc, #116]	; (80500 <SystemInit+0x90>)
   8048a:	4b1c      	ldr	r3, [pc, #112]	; (804fc <SystemInit+0x8c>)
   8048c:	621a      	str	r2, [r3, #32]
   8048e:	461a      	mov	r2, r3
   80490:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80492:	f013 0f01 	tst.w	r3, #1
   80496:	d0fb      	beq.n	80490 <SystemInit+0x20>
   80498:	4a1a      	ldr	r2, [pc, #104]	; (80504 <SystemInit+0x94>)
   8049a:	4b18      	ldr	r3, [pc, #96]	; (804fc <SystemInit+0x8c>)
   8049c:	621a      	str	r2, [r3, #32]
   8049e:	461a      	mov	r2, r3
   804a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804a6:	d0fb      	beq.n	804a0 <SystemInit+0x30>
   804a8:	4a14      	ldr	r2, [pc, #80]	; (804fc <SystemInit+0x8c>)
   804aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804ac:	f023 0303 	bic.w	r3, r3, #3
   804b0:	f043 0301 	orr.w	r3, r3, #1
   804b4:	6313      	str	r3, [r2, #48]	; 0x30
   804b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804b8:	f013 0f08 	tst.w	r3, #8
   804bc:	d0fb      	beq.n	804b6 <SystemInit+0x46>
   804be:	4a12      	ldr	r2, [pc, #72]	; (80508 <SystemInit+0x98>)
   804c0:	4b0e      	ldr	r3, [pc, #56]	; (804fc <SystemInit+0x8c>)
   804c2:	629a      	str	r2, [r3, #40]	; 0x28
   804c4:	461a      	mov	r2, r3
   804c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804c8:	f013 0f02 	tst.w	r3, #2
   804cc:	d0fb      	beq.n	804c6 <SystemInit+0x56>
   804ce:	2211      	movs	r2, #17
   804d0:	4b0a      	ldr	r3, [pc, #40]	; (804fc <SystemInit+0x8c>)
   804d2:	631a      	str	r2, [r3, #48]	; 0x30
   804d4:	461a      	mov	r2, r3
   804d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804d8:	f013 0f08 	tst.w	r3, #8
   804dc:	d0fb      	beq.n	804d6 <SystemInit+0x66>
   804de:	2212      	movs	r2, #18
   804e0:	4b06      	ldr	r3, [pc, #24]	; (804fc <SystemInit+0x8c>)
   804e2:	631a      	str	r2, [r3, #48]	; 0x30
   804e4:	461a      	mov	r2, r3
   804e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804e8:	f013 0f08 	tst.w	r3, #8
   804ec:	d0fb      	beq.n	804e6 <SystemInit+0x76>
   804ee:	4a07      	ldr	r2, [pc, #28]	; (8050c <SystemInit+0x9c>)
   804f0:	4b07      	ldr	r3, [pc, #28]	; (80510 <SystemInit+0xa0>)
   804f2:	601a      	str	r2, [r3, #0]
   804f4:	4770      	bx	lr
   804f6:	bf00      	nop
   804f8:	400e0a00 	.word	0x400e0a00
   804fc:	400e0600 	.word	0x400e0600
   80500:	00370809 	.word	0x00370809
   80504:	01370809 	.word	0x01370809
   80508:	200d3f01 	.word	0x200d3f01
   8050c:	0501bd00 	.word	0x0501bd00
   80510:	20000000 	.word	0x20000000

00080514 <main>:

uint8_t score = 0;
uint8_t game_pause = 0;

int main (void)
{
   80514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	SystemInit();
   80516:	4b1d      	ldr	r3, [pc, #116]	; (8058c <main+0x78>)
   80518:	4798      	blx	r3
	configure_uart();
   8051a:	4b1d      	ldr	r3, [pc, #116]	; (80590 <main+0x7c>)
   8051c:	4798      	blx	r3
	
	PWM_init();
   8051e:	4b1d      	ldr	r3, [pc, #116]	; (80594 <main+0x80>)
   80520:	4798      	blx	r3
	
	ADC_init();
   80522:	4b1d      	ldr	r3, [pc, #116]	; (80598 <main+0x84>)
   80524:	4798      	blx	r3
	
	motor_init();
   80526:	4b1d      	ldr	r3, [pc, #116]	; (8059c <main+0x88>)
   80528:	4798      	blx	r3
	
	int d = can_init_def_tx_rx_mb(0x00290561);
   8052a:	481d      	ldr	r0, [pc, #116]	; (805a0 <main+0x8c>)
   8052c:	4b1d      	ldr	r3, [pc, #116]	; (805a4 <main+0x90>)
   8052e:	4798      	blx	r3
	printf("Node 2\n\r");
   80530:	481d      	ldr	r0, [pc, #116]	; (805a8 <main+0x94>)
   80532:	4b1e      	ldr	r3, [pc, #120]	; (805ac <main+0x98>)
   80534:	4798      	blx	r3
	
	WDT -> WDT_MR |= WDT_MR_WDDIS;
   80536:	4a1e      	ldr	r2, [pc, #120]	; (805b0 <main+0x9c>)
   80538:	6853      	ldr	r3, [r2, #4]
   8053a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8053e:	6053      	str	r3, [r2, #4]
	msg.data[1] = 'f';
	
	int16_t value = 80;
	
	// Put the motor in the center
	motor_set_with_PI(0);
   80540:	2000      	movs	r0, #0
   80542:	4b1c      	ldr	r3, [pc, #112]	; (805b4 <main+0xa0>)
   80544:	4798      	blx	r3
	
	//motor_set_direction_speed(LEFT, 81);
	
	solenoid_init();
   80546:	4b1c      	ldr	r3, [pc, #112]	; (805b8 <main+0xa4>)
   80548:	4798      	blx	r3
	
	while(1){
		
		// GOAL logic
		if (ADC_check_goal() && !game_pause)
   8054a:	4e1c      	ldr	r6, [pc, #112]	; (805bc <main+0xa8>)
   8054c:	4f1c      	ldr	r7, [pc, #112]	; (805c0 <main+0xac>)
		{
			score++;
			printf("score: %d \n\r", score);
   8054e:	4d17      	ldr	r5, [pc, #92]	; (805ac <main+0x98>)
   80550:	e00c      	b.n	8056c <main+0x58>
		}
		
		// To check data from encoder
		//printf("%d \r\n", motor_encoder_read());
		// Setting step_position value for moving stepper
		PWM_set_value(step_position);
   80552:	4c1c      	ldr	r4, [pc, #112]	; (805c4 <main+0xb0>)
   80554:	7820      	ldrb	r0, [r4, #0]
   80556:	4b1c      	ldr	r3, [pc, #112]	; (805c8 <main+0xb4>)
   80558:	4798      	blx	r3
		printf("%d",step_position);
   8055a:	7821      	ldrb	r1, [r4, #0]
   8055c:	481b      	ldr	r0, [pc, #108]	; (805cc <main+0xb8>)
   8055e:	47a8      	blx	r5
		// Only joystick button for solenoid
		solenoid_routine(buttons & 0x01);
   80560:	4b1b      	ldr	r3, [pc, #108]	; (805d0 <main+0xbc>)
   80562:	7818      	ldrb	r0, [r3, #0]
   80564:	f000 0001 	and.w	r0, r0, #1
   80568:	4b1a      	ldr	r3, [pc, #104]	; (805d4 <main+0xc0>)
   8056a:	4798      	blx	r3
		if (ADC_check_goal() && !game_pause)
   8056c:	47b0      	blx	r6
   8056e:	2800      	cmp	r0, #0
   80570:	d0ef      	beq.n	80552 <main+0x3e>
   80572:	783b      	ldrb	r3, [r7, #0]
   80574:	2b00      	cmp	r3, #0
   80576:	d1ec      	bne.n	80552 <main+0x3e>
			score++;
   80578:	7879      	ldrb	r1, [r7, #1]
   8057a:	3101      	adds	r1, #1
   8057c:	b2c9      	uxtb	r1, r1
   8057e:	7079      	strb	r1, [r7, #1]
			printf("score: %d \n\r", score);
   80580:	4815      	ldr	r0, [pc, #84]	; (805d8 <main+0xc4>)
   80582:	47a8      	blx	r5
			game_pause = 1;
   80584:	2301      	movs	r3, #1
   80586:	703b      	strb	r3, [r7, #0]
   80588:	e7e3      	b.n	80552 <main+0x3e>
   8058a:	bf00      	nop
   8058c:	00080471 	.word	0x00080471
   80590:	00080b9d 	.word	0x00080b9d
   80594:	00080ab5 	.word	0x00080ab5
   80598:	00080161 	.word	0x00080161
   8059c:	000805dd 	.word	0x000805dd
   805a0:	00290561 	.word	0x00290561
   805a4:	00080299 	.word	0x00080299
   805a8:	00080e2c 	.word	0x00080e2c
   805ac:	00080a91 	.word	0x00080a91
   805b0:	400e1a50 	.word	0x400e1a50
   805b4:	0008072d 	.word	0x0008072d
   805b8:	00080b5d 	.word	0x00080b5d
   805bc:	00080195 	.word	0x00080195
   805c0:	20000451 	.word	0x20000451
   805c4:	20000450 	.word	0x20000450
   805c8:	00080b09 	.word	0x00080b09
   805cc:	00080e48 	.word	0x00080e48
   805d0:	20000464 	.word	0x20000464
   805d4:	00080b7d 	.word	0x00080b7d
   805d8:	00080e38 	.word	0x00080e38

000805dc <motor_init>:
#include "motor.h"

void motor_init()
{
   805dc:	b538      	push	{r3, r4, r5, lr}
	PIOC -> PIO_WPMR = (0x50494F << 8);
   805de:	4c1e      	ldr	r4, [pc, #120]	; (80658 <motor_init+0x7c>)
   805e0:	4b1e      	ldr	r3, [pc, #120]	; (8065c <motor_init+0x80>)
   805e2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   805e6:	481e      	ldr	r0, [pc, #120]	; (80660 <motor_init+0x84>)
   805e8:	6903      	ldr	r3, [r0, #16]
   805ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   805ee:	6103      	str	r3, [r0, #16]
	//PMC->PMC_PCER0 |= (1 << ID_PIOD);
	
	// Set EN pin for motor (PD9)
	PIOD -> PIO_PER |= PIO_PER_P9;
   805f0:	4b1c      	ldr	r3, [pc, #112]	; (80664 <motor_init+0x88>)
   805f2:	681a      	ldr	r2, [r3, #0]
   805f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   805f8:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P9;
   805fa:	691a      	ldr	r2, [r3, #16]
   805fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80600:	611a      	str	r2, [r3, #16]
	PIOD -> PIO_SODR |= PIO_SODR_P9;
   80602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80608:	631a      	str	r2, [r3, #48]	; 0x30

	// DIR
	PIOD -> PIO_PER = PIO_PD10;
   8060a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8060e:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD10;
   80610:	611a      	str	r2, [r3, #16]
	
	// !OE
	PIOD -> PIO_PER = PIO_PD0;
   80612:	2101      	movs	r1, #1
   80614:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER = PIO_PD0;
   80616:	6119      	str	r1, [r3, #16]
	PIOD -> PIO_CODR = PIO_CODR_P0;
   80618:	6359      	str	r1, [r3, #52]	; 0x34
	
	// SEL
	PIOD -> PIO_PER = PIO_PD2;
   8061a:	2204      	movs	r2, #4
   8061c:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD2;
   8061e:	611a      	str	r2, [r3, #16]
	
	// !RES
	PIOD -> PIO_PER = PIO_PD1;
   80620:	2202      	movs	r2, #2
   80622:	601a      	str	r2, [r3, #0]
	PIOD -> PIO_OER = PIO_PD1;
   80624:	611a      	str	r2, [r3, #16]
	
	
	// Initialize DAC
	PMC->PMC_PCER1 = PMC_PCER1_PID38;     // DACC power ON
   80626:	2540      	movs	r5, #64	; 0x40
   80628:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
	DACC->DACC_CR = DACC_CR_SWRST ;       // Reset DACC
   8062c:	f5a0 30c3 	sub.w	r0, r0, #99840	; 0x18600
   80630:	6001      	str	r1, [r0, #0]

	DACC->DACC_MR = DACC_MR_TRGEN_DIS                    // Free running mode
   80632:	f44f 3585 	mov.w	r5, #68096	; 0x10a00
   80636:	6045      	str	r5, [r0, #4]
	| DACC_MR_USER_SEL_CHANNEL1          // select channel 1
	| DACC_MR_REFRESH (10);

	DACC->DACC_IER |= DACC_IER_EOC;
   80638:	6a45      	ldr	r5, [r0, #36]	; 0x24
   8063a:	4315      	orrs	r5, r2
   8063c:	6245      	str	r5, [r0, #36]	; 0x24
	// Enable channel 1 = DAC1
	DACC->DACC_CHER = DACC_CHER_CH1;
   8063e:	6102      	str	r2, [r0, #16]
	
	//DACC->DACC_ISR;  // Read and clear status register
	
	// Setting encoder pins as input
	PIOC -> PIO_IFER = (0xFF << 1);
   80640:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
   80644:	6220      	str	r0, [r4, #32]
	PIOC -> PIO_PUDR = (0xFF << 1);
   80646:	6620      	str	r0, [r4, #96]	; 0x60
	// !RES to low
	PIOD -> PIO_CODR = PIO_PD1;
   80648:	635a      	str	r2, [r3, #52]	; 0x34
	// !RES to high
	PIOD -> PIO_SODR = PIO_PD1;
   8064a:	631a      	str	r2, [r3, #48]	; 0x30
	
	// Initialize PI controller
	PI_init(20,1,&pid);
   8064c:	4a06      	ldr	r2, [pc, #24]	; (80668 <motor_init+0x8c>)
   8064e:	2014      	movs	r0, #20
   80650:	4b06      	ldr	r3, [pc, #24]	; (8066c <motor_init+0x90>)
   80652:	4798      	blx	r3
   80654:	bd38      	pop	{r3, r4, r5, pc}
   80656:	bf00      	nop
   80658:	400e1200 	.word	0x400e1200
   8065c:	50494f00 	.word	0x50494f00
   80660:	400e0600 	.word	0x400e0600
   80664:	400e1400 	.word	0x400e1400
   80668:	20000454 	.word	0x20000454
   8066c:	0008078d 	.word	0x0008078d

00080670 <motor_set_direction>:

}

void motor_set_direction(uint8_t direction)
{
	if(direction == LEFT){
   80670:	b128      	cbz	r0, 8067e <motor_set_direction+0xe>
		// Set LEFT direction (PD10)
		PIOD -> PIO_CODR |= PIO_CODR_P10;
		
		} else {
		// Set RIGHT direction (PD10)
		PIOD -> PIO_SODR |= PIO_SODR_P10;
   80672:	4a06      	ldr	r2, [pc, #24]	; (8068c <motor_set_direction+0x1c>)
   80674:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8067a:	6313      	str	r3, [r2, #48]	; 0x30
   8067c:	4770      	bx	lr
		PIOD -> PIO_CODR |= PIO_CODR_P10;
   8067e:	4a03      	ldr	r2, [pc, #12]	; (8068c <motor_set_direction+0x1c>)
   80680:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80686:	6353      	str	r3, [r2, #52]	; 0x34
   80688:	4770      	bx	lr
   8068a:	bf00      	nop
   8068c:	400e1400 	.word	0x400e1400

00080690 <motor_set_speed>:
	{
		speed = 0;
	}
	
	// Speed should be between 0 and 100
	uint16_t speed_voltage = speed * 30;
   80690:	2864      	cmp	r0, #100	; 0x64
   80692:	bf28      	it	cs
   80694:	2064      	movcs	r0, #100	; 0x64
   80696:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   8069a:	0040      	lsls	r0, r0, #1
	
	// Set speed value
	DACC -> DACC_CDR = speed_voltage;
   8069c:	b280      	uxth	r0, r0
   8069e:	4b01      	ldr	r3, [pc, #4]	; (806a4 <motor_set_speed+0x14>)
   806a0:	6218      	str	r0, [r3, #32]
   806a2:	4770      	bx	lr
   806a4:	400c8000 	.word	0x400c8000

000806a8 <motor_set_direction_speed>:
}

void motor_set_direction_speed(uint8_t direction, uint16_t speed)
{
   806a8:	b510      	push	{r4, lr}
   806aa:	460c      	mov	r4, r1
	motor_set_direction(direction);
   806ac:	4b02      	ldr	r3, [pc, #8]	; (806b8 <motor_set_direction_speed+0x10>)
   806ae:	4798      	blx	r3
	motor_set_speed(speed);
   806b0:	b2e0      	uxtb	r0, r4
   806b2:	4b02      	ldr	r3, [pc, #8]	; (806bc <motor_set_direction_speed+0x14>)
   806b4:	4798      	blx	r3
   806b6:	bd10      	pop	{r4, pc}
   806b8:	00080671 	.word	0x00080671
   806bc:	00080691 	.word	0x00080691

000806c0 <motor_encoder_read>:
}

int16_t motor_encoder_read()
{
   806c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// !RST HIGH
	//PIOD -> PIO_SODR = PIO_SODR_P1;
	
	PIOC -> PIO_PER = PIO_PC8;
   806c4:	4c16      	ldr	r4, [pc, #88]	; (80720 <motor_encoder_read+0x60>)
   806c6:	f44f 7380 	mov.w	r3, #256	; 0x100
   806ca:	6023      	str	r3, [r4, #0]
	PIOC -> PIO_PER = PIO_PC7;
   806cc:	2380      	movs	r3, #128	; 0x80
   806ce:	6023      	str	r3, [r4, #0]
	PIOC -> PIO_PER = PIO_PC6;
   806d0:	2340      	movs	r3, #64	; 0x40
   806d2:	6023      	str	r3, [r4, #0]
	PIOC -> PIO_PER = PIO_PC5;
   806d4:	2320      	movs	r3, #32
   806d6:	6023      	str	r3, [r4, #0]
	PIOC -> PIO_PER = PIO_PC4;
   806d8:	2310      	movs	r3, #16
   806da:	6023      	str	r3, [r4, #0]
	PIOC -> PIO_PER = PIO_PC3;
   806dc:	2308      	movs	r3, #8
   806de:	6023      	str	r3, [r4, #0]
	PIOC -> PIO_PER = PIO_PC2;
   806e0:	2704      	movs	r7, #4
   806e2:	6027      	str	r7, [r4, #0]
	PIOC -> PIO_PER = PIO_PC1;
   806e4:	2302      	movs	r3, #2
   806e6:	6023      	str	r3, [r4, #0]
	
	int16_t data;
	// !OE LOW
	PIOD -> PIO_CODR = PIO_PD0;
   806e8:	4e0e      	ldr	r6, [pc, #56]	; (80724 <motor_encoder_read+0x64>)
   806ea:	f04f 0801 	mov.w	r8, #1
   806ee:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
	// SEL LOW
	PIOD -> PIO_CODR = PIO_PD2;
   806f2:	6377      	str	r7, [r6, #52]	; 0x34
	
	delay_us(1000);
   806f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   806f8:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80728 <motor_encoder_read+0x68>
   806fc:	47c8      	blx	r9
	
	// Read MSB
	data |= ((PIOC->PIO_PDSR >> 1) & 0xFF) << 8;
   806fe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   80700:	01ed      	lsls	r5, r5, #7
   80702:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
	// SEL HIGH
	PIOD -> PIO_SODR = PIO_PD2;
   80706:	6337      	str	r7, [r6, #48]	; 0x30
	
	delay_us(1000);
   80708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8070c:	47c8      	blx	r9
	
	// Read LSB
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF;
   8070e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	// !OE HIGH
	PIOD -> PIO_SODR = PIO_PD0;
   80710:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
	data |= (PIOC->PIO_PDSR >> 1) & 0xFF;
   80714:	f3c0 0047 	ubfx	r0, r0, #1, #8
   80718:	4328      	orrs	r0, r5
	
	return data;
	
}
   8071a:	b200      	sxth	r0, r0
   8071c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80720:	400e1200 	.word	0x400e1200
   80724:	400e1400 	.word	0x400e1400
   80728:	000803d9 	.word	0x000803d9

0008072c <motor_set_with_PI>:

void motor_set_with_PI(uint16_t desired_value)
{
   8072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80730:	4605      	mov	r5, r0
	int16_t value = motor_encoder_read();
   80732:	4b12      	ldr	r3, [pc, #72]	; (8077c <motor_set_with_PI+0x50>)
   80734:	4798      	blx	r3
   80736:	4604      	mov	r4, r0
	
	while(value != desired_value)
	{
		value = motor_encoder_read();
   80738:	4f10      	ldr	r7, [pc, #64]	; (8077c <motor_set_with_PI+0x50>)
		int16_t speed  = PI_controller(desired_value, value, &pid);
   8073a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80788 <motor_set_with_PI+0x5c>
   8073e:	4e10      	ldr	r6, [pc, #64]	; (80780 <motor_set_with_PI+0x54>)
	while(value != desired_value)
   80740:	e001      	b.n	80746 <motor_set_with_PI+0x1a>
		if(desired_value-value > 0)
		{
			motor_set_direction_speed(LEFT, speed);
		}
		
		else if (desired_value-value < 0)
   80742:	2b00      	cmp	r3, #0
   80744:	db13      	blt.n	8076e <motor_set_with_PI+0x42>
	while(value != desired_value)
   80746:	42ac      	cmp	r4, r5
   80748:	d016      	beq.n	80778 <motor_set_with_PI+0x4c>
		value = motor_encoder_read();
   8074a:	47b8      	blx	r7
   8074c:	4604      	mov	r4, r0
		int16_t speed  = PI_controller(desired_value, value, &pid);
   8074e:	4642      	mov	r2, r8
   80750:	4601      	mov	r1, r0
   80752:	b228      	sxth	r0, r5
   80754:	47b0      	blx	r6
		if(speed > 100 | speed < 0)
   80756:	b283      	uxth	r3, r0
			speed = 30;
   80758:	2b65      	cmp	r3, #101	; 0x65
   8075a:	bf28      	it	cs
   8075c:	201e      	movcs	r0, #30
		if(desired_value-value > 0)
   8075e:	1b2b      	subs	r3, r5, r4
   80760:	2b00      	cmp	r3, #0
   80762:	ddee      	ble.n	80742 <motor_set_with_PI+0x16>
			motor_set_direction_speed(LEFT, speed);
   80764:	b281      	uxth	r1, r0
   80766:	2000      	movs	r0, #0
   80768:	4b06      	ldr	r3, [pc, #24]	; (80784 <motor_set_with_PI+0x58>)
   8076a:	4798      	blx	r3
   8076c:	e7eb      	b.n	80746 <motor_set_with_PI+0x1a>
		{
			motor_set_direction_speed(RIGHT, speed);
   8076e:	b281      	uxth	r1, r0
   80770:	2001      	movs	r0, #1
   80772:	4b04      	ldr	r3, [pc, #16]	; (80784 <motor_set_with_PI+0x58>)
   80774:	4798      	blx	r3
   80776:	e7e6      	b.n	80746 <motor_set_with_PI+0x1a>
		}
	}
	
}
   80778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8077c:	000806c1 	.word	0x000806c1
   80780:	00080799 	.word	0x00080799
   80784:	000806a9 	.word	0x000806a9
   80788:	20000454 	.word	0x20000454

0008078c <PI_init>:
#include "PI.h"

void PI_init(int16_t P_factor, int16_t I_factor, pidData_t* pid_st)
{
	// Initializing data for the PI structure
	pid_st -> P_Factor = P_factor;
   8078c:	8110      	strh	r0, [r2, #8]
	pid_st -> I_Factor = I_factor;
   8078e:	60d1      	str	r1, [r2, #12]
	pid_st -> error = 0;
   80790:	2300      	movs	r3, #0
   80792:	8013      	strh	r3, [r2, #0]
	pid_st -> integral = 0;
   80794:	6053      	str	r3, [r2, #4]
   80796:	4770      	bx	lr

00080798 <PI_controller>:
}

int16_t PI_controller(int16_t set_point, int16_t process_value, pidData_t  *pid_st)
{
   80798:	b430      	push	{r4, r5}
	// Adds previous error
	pid_st->integral = pid_st->integral +  (pid_st->error * pid_st->I_Factor);
   8079a:	68d3      	ldr	r3, [r2, #12]
   8079c:	f9b2 4000 	ldrsh.w	r4, [r2]
   807a0:	6855      	ldr	r5, [r2, #4]
   807a2:	fb03 5404 	mla	r4, r3, r4, r5
	// Calculates new error
	pid_st->error = set_point - process_value;
   807a6:	1a40      	subs	r0, r0, r1
   807a8:	b200      	sxth	r0, r0
   807aa:	8010      	strh	r0, [r2, #0]
	// Adds new error
	pid_st->integral = pid_st->integral +  (pid_st->error * pid_st->I_Factor);
   807ac:	fb00 4303 	mla	r3, r0, r3, r4
   807b0:	6053      	str	r3, [r2, #4]

	return (uint16_t)(((pid_st->error * pid_st->P_Factor) + pid_st->integral) / 128);
   807b2:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
   807b6:	fb00 3001 	mla	r0, r0, r1, r3
   807ba:	2800      	cmp	r0, #0
   807bc:	bfb8      	it	lt
   807be:	307f      	addlt	r0, #127	; 0x7f
   807c0:	f340 10cf 	sbfx	r0, r0, #7, #16
   807c4:	bc30      	pop	{r4, r5}
   807c6:	4770      	bx	lr

000807c8 <prints>:
   807c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807cc:	460d      	mov	r5, r1
   807ce:	1e16      	subs	r6, r2, #0
   807d0:	dd48      	ble.n	80864 <prints+0x9c>
   807d2:	780a      	ldrb	r2, [r1, #0]
   807d4:	2a00      	cmp	r2, #0
   807d6:	d035      	beq.n	80844 <prints+0x7c>
   807d8:	460a      	mov	r2, r1
   807da:	2400      	movs	r4, #0
   807dc:	3401      	adds	r4, #1
   807de:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   807e2:	2900      	cmp	r1, #0
   807e4:	d1fa      	bne.n	807dc <prints+0x14>
   807e6:	42a6      	cmp	r6, r4
   807e8:	dc2d      	bgt.n	80846 <prints+0x7e>
   807ea:	2400      	movs	r4, #0
   807ec:	f003 0202 	and.w	r2, r3, #2
   807f0:	2a00      	cmp	r2, #0
   807f2:	bf0c      	ite	eq
   807f4:	f04f 0820 	moveq.w	r8, #32
   807f8:	f04f 0830 	movne.w	r8, #48	; 0x30
   807fc:	f013 0301 	ands.w	r3, r3, #1
   80800:	d123      	bne.n	8084a <prints+0x82>
   80802:	2c00      	cmp	r4, #0
   80804:	dd28      	ble.n	80858 <prints+0x90>
   80806:	4626      	mov	r6, r4
   80808:	fa5f f988 	uxtb.w	r9, r8
   8080c:	4f18      	ldr	r7, [pc, #96]	; (80870 <prints+0xa8>)
   8080e:	4648      	mov	r0, r9
   80810:	47b8      	blx	r7
   80812:	3e01      	subs	r6, #1
   80814:	d1fb      	bne.n	8080e <prints+0x46>
   80816:	7828      	ldrb	r0, [r5, #0]
   80818:	b188      	cbz	r0, 8083e <prints+0x76>
   8081a:	4f15      	ldr	r7, [pc, #84]	; (80870 <prints+0xa8>)
   8081c:	47b8      	blx	r7
   8081e:	3401      	adds	r4, #1
   80820:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80824:	2800      	cmp	r0, #0
   80826:	d1f9      	bne.n	8081c <prints+0x54>
   80828:	2e00      	cmp	r6, #0
   8082a:	dd08      	ble.n	8083e <prints+0x76>
   8082c:	4635      	mov	r5, r6
   8082e:	fa5f f888 	uxtb.w	r8, r8
   80832:	4f0f      	ldr	r7, [pc, #60]	; (80870 <prints+0xa8>)
   80834:	4640      	mov	r0, r8
   80836:	47b8      	blx	r7
   80838:	3d01      	subs	r5, #1
   8083a:	d1fb      	bne.n	80834 <prints+0x6c>
   8083c:	4434      	add	r4, r6
   8083e:	4620      	mov	r0, r4
   80840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80844:	2400      	movs	r4, #0
   80846:	1b34      	subs	r4, r6, r4
   80848:	e7d0      	b.n	807ec <prints+0x24>
   8084a:	4626      	mov	r6, r4
   8084c:	7828      	ldrb	r0, [r5, #0]
   8084e:	b108      	cbz	r0, 80854 <prints+0x8c>
   80850:	2400      	movs	r4, #0
   80852:	e7e2      	b.n	8081a <prints+0x52>
   80854:	2400      	movs	r4, #0
   80856:	e7e7      	b.n	80828 <prints+0x60>
   80858:	4626      	mov	r6, r4
   8085a:	461c      	mov	r4, r3
   8085c:	e7db      	b.n	80816 <prints+0x4e>
   8085e:	f04f 0820 	mov.w	r8, #32
   80862:	e7d8      	b.n	80816 <prints+0x4e>
   80864:	f013 0401 	ands.w	r4, r3, #1
   80868:	d0f9      	beq.n	8085e <prints+0x96>
   8086a:	f04f 0820 	mov.w	r8, #32
   8086e:	e7ed      	b.n	8084c <prints+0x84>
   80870:	00080c05 	.word	0x00080c05

00080874 <printi>:
   80874:	b5f0      	push	{r4, r5, r6, r7, lr}
   80876:	b085      	sub	sp, #20
   80878:	4607      	mov	r7, r0
   8087a:	b381      	cbz	r1, 808de <printi+0x6a>
   8087c:	460c      	mov	r4, r1
   8087e:	b10b      	cbz	r3, 80884 <printi+0x10>
   80880:	2a0a      	cmp	r2, #10
   80882:	d038      	beq.n	808f6 <printi+0x82>
   80884:	2300      	movs	r3, #0
   80886:	f88d 300f 	strb.w	r3, [sp, #15]
   8088a:	2600      	movs	r6, #0
   8088c:	2900      	cmp	r1, #0
   8088e:	d046      	beq.n	8091e <printi+0xaa>
   80890:	f10d 050f 	add.w	r5, sp, #15
   80894:	990c      	ldr	r1, [sp, #48]	; 0x30
   80896:	393a      	subs	r1, #58	; 0x3a
   80898:	fbb4 f3f2 	udiv	r3, r4, r2
   8089c:	fb02 4313 	mls	r3, r2, r3, r4
   808a0:	2b09      	cmp	r3, #9
   808a2:	bfc8      	it	gt
   808a4:	185b      	addgt	r3, r3, r1
   808a6:	3330      	adds	r3, #48	; 0x30
   808a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   808ac:	fbb4 f4f2 	udiv	r4, r4, r2
   808b0:	2c00      	cmp	r4, #0
   808b2:	d1f1      	bne.n	80898 <printi+0x24>
   808b4:	b156      	cbz	r6, 808cc <printi+0x58>
   808b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   808b8:	b11b      	cbz	r3, 808c2 <printi+0x4e>
   808ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   808bc:	f013 0f02 	tst.w	r3, #2
   808c0:	d125      	bne.n	8090e <printi+0x9a>
   808c2:	232d      	movs	r3, #45	; 0x2d
   808c4:	f805 3c01 	strb.w	r3, [r5, #-1]
   808c8:	3d01      	subs	r5, #1
   808ca:	2600      	movs	r6, #0
   808cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   808ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   808d0:	4629      	mov	r1, r5
   808d2:	4638      	mov	r0, r7
   808d4:	4c14      	ldr	r4, [pc, #80]	; (80928 <printi+0xb4>)
   808d6:	47a0      	blx	r4
   808d8:	4430      	add	r0, r6
   808da:	b005      	add	sp, #20
   808dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808de:	2330      	movs	r3, #48	; 0x30
   808e0:	f88d 3004 	strb.w	r3, [sp, #4]
   808e4:	2300      	movs	r3, #0
   808e6:	f88d 3005 	strb.w	r3, [sp, #5]
   808ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   808ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   808ee:	a901      	add	r1, sp, #4
   808f0:	4c0d      	ldr	r4, [pc, #52]	; (80928 <printi+0xb4>)
   808f2:	47a0      	blx	r4
   808f4:	e7f1      	b.n	808da <printi+0x66>
   808f6:	2900      	cmp	r1, #0
   808f8:	dac4      	bge.n	80884 <printi+0x10>
   808fa:	424c      	negs	r4, r1
   808fc:	2300      	movs	r3, #0
   808fe:	f88d 300f 	strb.w	r3, [sp, #15]
   80902:	f10d 050f 	add.w	r5, sp, #15
   80906:	2c00      	cmp	r4, #0
   80908:	d0d5      	beq.n	808b6 <printi+0x42>
   8090a:	2601      	movs	r6, #1
   8090c:	e7c0      	b.n	80890 <printi+0x1c>
   8090e:	202d      	movs	r0, #45	; 0x2d
   80910:	4b06      	ldr	r3, [pc, #24]	; (8092c <printi+0xb8>)
   80912:	4798      	blx	r3
   80914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80916:	3b01      	subs	r3, #1
   80918:	930a      	str	r3, [sp, #40]	; 0x28
   8091a:	2601      	movs	r6, #1
   8091c:	e7d6      	b.n	808cc <printi+0x58>
   8091e:	461e      	mov	r6, r3
   80920:	f10d 050f 	add.w	r5, sp, #15
   80924:	e7d2      	b.n	808cc <printi+0x58>
   80926:	bf00      	nop
   80928:	000807c9 	.word	0x000807c9
   8092c:	00080c05 	.word	0x00080c05

00080930 <print>:
   80930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80934:	b087      	sub	sp, #28
   80936:	4680      	mov	r8, r0
   80938:	780b      	ldrb	r3, [r1, #0]
   8093a:	2b00      	cmp	r3, #0
   8093c:	f000 8094 	beq.w	80a68 <print+0x138>
   80940:	468b      	mov	fp, r1
   80942:	4617      	mov	r7, r2
   80944:	2500      	movs	r5, #0
   80946:	4e4e      	ldr	r6, [pc, #312]	; (80a80 <print+0x150>)
   80948:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80a88 <print+0x158>
   8094c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80a8c <print+0x15c>
   80950:	e046      	b.n	809e0 <print+0xb0>
   80952:	2200      	movs	r2, #0
   80954:	e070      	b.n	80a38 <print+0x108>
   80956:	6839      	ldr	r1, [r7, #0]
   80958:	3704      	adds	r7, #4
   8095a:	484a      	ldr	r0, [pc, #296]	; (80a84 <print+0x154>)
   8095c:	2900      	cmp	r1, #0
   8095e:	bf08      	it	eq
   80960:	4601      	moveq	r1, r0
   80962:	4640      	mov	r0, r8
   80964:	47d0      	blx	sl
   80966:	4405      	add	r5, r0
   80968:	e035      	b.n	809d6 <print+0xa6>
   8096a:	6839      	ldr	r1, [r7, #0]
   8096c:	3704      	adds	r7, #4
   8096e:	2061      	movs	r0, #97	; 0x61
   80970:	9002      	str	r0, [sp, #8]
   80972:	9301      	str	r3, [sp, #4]
   80974:	9200      	str	r2, [sp, #0]
   80976:	2301      	movs	r3, #1
   80978:	220a      	movs	r2, #10
   8097a:	4640      	mov	r0, r8
   8097c:	47c8      	blx	r9
   8097e:	4405      	add	r5, r0
   80980:	e029      	b.n	809d6 <print+0xa6>
   80982:	6839      	ldr	r1, [r7, #0]
   80984:	3704      	adds	r7, #4
   80986:	2061      	movs	r0, #97	; 0x61
   80988:	9002      	str	r0, [sp, #8]
   8098a:	9301      	str	r3, [sp, #4]
   8098c:	9200      	str	r2, [sp, #0]
   8098e:	2300      	movs	r3, #0
   80990:	2210      	movs	r2, #16
   80992:	4640      	mov	r0, r8
   80994:	47c8      	blx	r9
   80996:	4405      	add	r5, r0
   80998:	e01d      	b.n	809d6 <print+0xa6>
   8099a:	6839      	ldr	r1, [r7, #0]
   8099c:	3704      	adds	r7, #4
   8099e:	2041      	movs	r0, #65	; 0x41
   809a0:	9002      	str	r0, [sp, #8]
   809a2:	9301      	str	r3, [sp, #4]
   809a4:	9200      	str	r2, [sp, #0]
   809a6:	2300      	movs	r3, #0
   809a8:	2210      	movs	r2, #16
   809aa:	4640      	mov	r0, r8
   809ac:	47c8      	blx	r9
   809ae:	4405      	add	r5, r0
   809b0:	e011      	b.n	809d6 <print+0xa6>
   809b2:	6839      	ldr	r1, [r7, #0]
   809b4:	3704      	adds	r7, #4
   809b6:	2061      	movs	r0, #97	; 0x61
   809b8:	9002      	str	r0, [sp, #8]
   809ba:	9301      	str	r3, [sp, #4]
   809bc:	9200      	str	r2, [sp, #0]
   809be:	2300      	movs	r3, #0
   809c0:	220a      	movs	r2, #10
   809c2:	4640      	mov	r0, r8
   809c4:	47c8      	blx	r9
   809c6:	4405      	add	r5, r0
   809c8:	e005      	b.n	809d6 <print+0xa6>
   809ca:	46a3      	mov	fp, r4
   809cc:	f89b 0000 	ldrb.w	r0, [fp]
   809d0:	47b0      	blx	r6
   809d2:	3501      	adds	r5, #1
   809d4:	465c      	mov	r4, fp
   809d6:	f104 0b01 	add.w	fp, r4, #1
   809da:	7863      	ldrb	r3, [r4, #1]
   809dc:	2b00      	cmp	r3, #0
   809de:	d044      	beq.n	80a6a <print+0x13a>
   809e0:	2b25      	cmp	r3, #37	; 0x25
   809e2:	d1f3      	bne.n	809cc <print+0x9c>
   809e4:	f10b 0401 	add.w	r4, fp, #1
   809e8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   809ec:	2b00      	cmp	r3, #0
   809ee:	d03c      	beq.n	80a6a <print+0x13a>
   809f0:	2b25      	cmp	r3, #37	; 0x25
   809f2:	d0ea      	beq.n	809ca <print+0x9a>
   809f4:	2b2d      	cmp	r3, #45	; 0x2d
   809f6:	bf06      	itte	eq
   809f8:	f10b 0402 	addeq.w	r4, fp, #2
   809fc:	2301      	moveq	r3, #1
   809fe:	2300      	movne	r3, #0
   80a00:	7822      	ldrb	r2, [r4, #0]
   80a02:	2a30      	cmp	r2, #48	; 0x30
   80a04:	d105      	bne.n	80a12 <print+0xe2>
   80a06:	f043 0302 	orr.w	r3, r3, #2
   80a0a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80a0e:	2a30      	cmp	r2, #48	; 0x30
   80a10:	d0f9      	beq.n	80a06 <print+0xd6>
   80a12:	7821      	ldrb	r1, [r4, #0]
   80a14:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80a18:	b2d2      	uxtb	r2, r2
   80a1a:	2a09      	cmp	r2, #9
   80a1c:	d899      	bhi.n	80952 <print+0x22>
   80a1e:	2200      	movs	r2, #0
   80a20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a24:	3930      	subs	r1, #48	; 0x30
   80a26:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80a2a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80a2e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80a32:	b2c0      	uxtb	r0, r0
   80a34:	2809      	cmp	r0, #9
   80a36:	d9f3      	bls.n	80a20 <print+0xf0>
   80a38:	2973      	cmp	r1, #115	; 0x73
   80a3a:	d08c      	beq.n	80956 <print+0x26>
   80a3c:	2964      	cmp	r1, #100	; 0x64
   80a3e:	d094      	beq.n	8096a <print+0x3a>
   80a40:	2978      	cmp	r1, #120	; 0x78
   80a42:	d09e      	beq.n	80982 <print+0x52>
   80a44:	2958      	cmp	r1, #88	; 0x58
   80a46:	d0a8      	beq.n	8099a <print+0x6a>
   80a48:	2975      	cmp	r1, #117	; 0x75
   80a4a:	d0b2      	beq.n	809b2 <print+0x82>
   80a4c:	2963      	cmp	r1, #99	; 0x63
   80a4e:	d1c2      	bne.n	809d6 <print+0xa6>
   80a50:	6839      	ldr	r1, [r7, #0]
   80a52:	3704      	adds	r7, #4
   80a54:	f88d 1014 	strb.w	r1, [sp, #20]
   80a58:	2100      	movs	r1, #0
   80a5a:	f88d 1015 	strb.w	r1, [sp, #21]
   80a5e:	a905      	add	r1, sp, #20
   80a60:	4640      	mov	r0, r8
   80a62:	47d0      	blx	sl
   80a64:	4405      	add	r5, r0
   80a66:	e7b6      	b.n	809d6 <print+0xa6>
   80a68:	2500      	movs	r5, #0
   80a6a:	f1b8 0f00 	cmp.w	r8, #0
   80a6e:	d003      	beq.n	80a78 <print+0x148>
   80a70:	f8d8 3000 	ldr.w	r3, [r8]
   80a74:	2200      	movs	r2, #0
   80a76:	701a      	strb	r2, [r3, #0]
   80a78:	4628      	mov	r0, r5
   80a7a:	b007      	add	sp, #28
   80a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a80:	00080c05 	.word	0x00080c05
   80a84:	00080e4c 	.word	0x00080e4c
   80a88:	000807c9 	.word	0x000807c9
   80a8c:	00080875 	.word	0x00080875

00080a90 <printf>:
   80a90:	b40f      	push	{r0, r1, r2, r3}
   80a92:	b500      	push	{lr}
   80a94:	b083      	sub	sp, #12
   80a96:	aa04      	add	r2, sp, #16
   80a98:	f852 1b04 	ldr.w	r1, [r2], #4
   80a9c:	9201      	str	r2, [sp, #4]
   80a9e:	2000      	movs	r0, #0
   80aa0:	4b03      	ldr	r3, [pc, #12]	; (80ab0 <printf+0x20>)
   80aa2:	4798      	blx	r3
   80aa4:	b003      	add	sp, #12
   80aa6:	f85d eb04 	ldr.w	lr, [sp], #4
   80aaa:	b004      	add	sp, #16
   80aac:	4770      	bx	lr
   80aae:	bf00      	nop
   80ab0:	00080931 	.word	0x00080931

00080ab4 <PWM_init>:
#include "PWM.h"

void PWM_init()
{
	REG_PMC_PCER1 |= PMC_PCER1_PID36;				  // Enable PWM
   80ab4:	4a12      	ldr	r2, [pc, #72]	; (80b00 <PWM_init+0x4c>)
   80ab6:	6813      	ldr	r3, [r2, #0]
   80ab8:	f043 0310 	orr.w	r3, r3, #16
   80abc:	6013      	str	r3, [r2, #0]
	REG_PIOC_ABSR |= PIO_ABSR_P19;					  // Set PWM pin perhipheral C
   80abe:	f502 6237 	add.w	r2, r2, #2928	; 0xb70
   80ac2:	6813      	ldr	r3, [r2, #0]
   80ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   80ac8:	6013      	str	r3, [r2, #0]
	REG_PIOC_PDR |= PIO_PDR_P19;					  // Set PWM pin to an output1
   80aca:	3a6c      	subs	r2, #108	; 0x6c
   80acc:	6813      	ldr	r3, [r2, #0]
   80ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   80ad2:	6013      	str	r3, [r2, #0]
	REG_PWM_CLK = PWM_CLK_PREA(0) | PWM_CLK_DIVA(42); // Set the PWM clock rate to 2MHz (84MHz/42)
   80ad4:	222a      	movs	r2, #42	; 0x2a
   80ad6:	4b0b      	ldr	r3, [pc, #44]	; (80b04 <PWM_init+0x50>)
   80ad8:	601a      	str	r2, [r3, #0]
	REG_PWM_CMR5 = PWM_CMR_CALG | PWM_CMR_CPRE_CLKA;  // Enable dual slope PWM and set the clock source as CLKA
   80ada:	f240 120b 	movw	r2, #267	; 0x10b
   80ade:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   80ae2:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 20000;							  // Set the PWM frequency 2MHz/(2 * 20000) = 50Hz = 20ms
   80ae4:	f644 6220 	movw	r2, #20000	; 0x4e20
   80ae8:	330c      	adds	r3, #12
   80aea:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 20000 - STEP_CENTER;			  // Set the PWM duty cycle to 1500 - centre the servo
   80aec:	f644 02f8 	movw	r2, #18680	; 0x48f8
   80af0:	3b08      	subs	r3, #8
   80af2:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;					  // Enable the PWM channel
   80af4:	2220      	movs	r2, #32
   80af6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   80afa:	601a      	str	r2, [r3, #0]
   80afc:	4770      	bx	lr
   80afe:	bf00      	nop
   80b00:	400e0700 	.word	0x400e0700
   80b04:	40094000 	.word	0x40094000

00080b08 <PWM_set_value>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int PWM_set_value(uint8_t value)
{
   80b08:	b538      	push	{r3, r4, r5, lr}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   80b0a:	f44f 7352 	mov.w	r3, #840	; 0x348
   80b0e:	fb03 f000 	mul.w	r0, r3, r0
   80b12:	4c0e      	ldr	r4, [pc, #56]	; (80b4c <PWM_set_value+0x44>)
   80b14:	fb84 3400 	smull	r3, r4, r4, r0
   80b18:	1823      	adds	r3, r4, r0
   80b1a:	17c4      	asrs	r4, r0, #31
   80b1c:	ebc4 14e3 	rsb	r4, r4, r3, asr #7
   80b20:	f504 7461 	add.w	r4, r4, #900	; 0x384
	int16_t step_value = STEP_CENTER;

	step_value = map(value, 0, 255, STEP_LEFT_MAX, STEP_RIGHT_MAX);
	printf("STEP %d\r\n", step_value);
   80b24:	b225      	sxth	r5, r4
   80b26:	4629      	mov	r1, r5
   80b28:	4809      	ldr	r0, [pc, #36]	; (80b50 <PWM_set_value+0x48>)
   80b2a:	4b0a      	ldr	r3, [pc, #40]	; (80b54 <PWM_set_value+0x4c>)
   80b2c:	4798      	blx	r3

	if (step_value < STEP_LEFT_MAX || step_value > STEP_RIGHT_MAX)
   80b2e:	f5a4 7461 	sub.w	r4, r4, #900	; 0x384
   80b32:	b2a4      	uxth	r4, r4
   80b34:	f5b4 7f52 	cmp.w	r4, #840	; 0x348
   80b38:	d901      	bls.n	80b3e <PWM_set_value+0x36>
	{
		// Error: Value is outside range
		return 1;
   80b3a:	2001      	movs	r0, #1
   80b3c:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		REG_PWM_CDTY5 = 20000 - step_value;
   80b3e:	f5c5 459c 	rsb	r5, r5, #19968	; 0x4e00
   80b42:	3520      	adds	r5, #32
   80b44:	4b04      	ldr	r3, [pc, #16]	; (80b58 <PWM_set_value+0x50>)
   80b46:	601d      	str	r5, [r3, #0]
	}
   80b48:	bd38      	pop	{r3, r4, r5, pc}
   80b4a:	bf00      	nop
   80b4c:	80808081 	.word	0x80808081
   80b50:	00080e54 	.word	0x00080e54
   80b54:	00080a91 	.word	0x00080a91
   80b58:	400942a4 	.word	0x400942a4

00080b5c <solenoid_init>:
#include "solenoid.h"

void solenoid_init(){
	/* Disable pull-up on bit PC2(D0) */
	PIOC->PIO_PUDR |= PIO_PC9;
   80b5c:	4b06      	ldr	r3, [pc, #24]	; (80b78 <solenoid_init+0x1c>)
   80b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80b64:	661a      	str	r2, [r3, #96]	; 0x60
	/* Enable PIO controller on bit PC2(D0) */
	PIOC->PIO_PER |= PIO_PC9;
   80b66:	681a      	ldr	r2, [r3, #0]
   80b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80b6c:	601a      	str	r2, [r3, #0]
	/* Set output enable on PC2(D0) */
	PIOC->PIO_OER |= PIO_PC9;
   80b6e:	691a      	ldr	r2, [r3, #16]
   80b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80b74:	611a      	str	r2, [r3, #16]
   80b76:	4770      	bx	lr
   80b78:	400e1200 	.word	0x400e1200

00080b7c <solenoid_routine>:
}

void solenoid_routine(uint8_t pressed){

	if (pressed == 1){
   80b7c:	2801      	cmp	r0, #1
   80b7e:	d005      	beq.n	80b8c <solenoid_routine+0x10>
		PIOC->PIO_CODR |= PIO_PC9;
		} else {
		PIOC->PIO_SODR |= PIO_PC9;
   80b80:	4a05      	ldr	r2, [pc, #20]	; (80b98 <solenoid_routine+0x1c>)
   80b82:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80b88:	6313      	str	r3, [r2, #48]	; 0x30
   80b8a:	4770      	bx	lr
		PIOC->PIO_CODR |= PIO_PC9;
   80b8c:	4a02      	ldr	r2, [pc, #8]	; (80b98 <solenoid_routine+0x1c>)
   80b8e:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80b94:	6353      	str	r3, [r2, #52]	; 0x34
   80b96:	4770      	bx	lr
   80b98:	400e1200 	.word	0x400e1200

00080b9c <configure_uart>:
   80b9c:	4b16      	ldr	r3, [pc, #88]	; (80bf8 <configure_uart+0x5c>)
   80b9e:	2200      	movs	r2, #0
   80ba0:	701a      	strb	r2, [r3, #0]
   80ba2:	705a      	strb	r2, [r3, #1]
   80ba4:	4b15      	ldr	r3, [pc, #84]	; (80bfc <configure_uart+0x60>)
   80ba6:	f44f 7140 	mov.w	r1, #768	; 0x300
   80baa:	6459      	str	r1, [r3, #68]	; 0x44
   80bac:	6059      	str	r1, [r3, #4]
   80bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bb0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80bb2:	4002      	ands	r2, r0
   80bb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80bb8:	671a      	str	r2, [r3, #112]	; 0x70
   80bba:	6659      	str	r1, [r3, #100]	; 0x64
   80bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
   80bc0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80bc4:	611a      	str	r2, [r3, #16]
   80bc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80bca:	21ac      	movs	r1, #172	; 0xac
   80bcc:	6019      	str	r1, [r3, #0]
   80bce:	f240 2123 	movw	r1, #547	; 0x223
   80bd2:	6219      	str	r1, [r3, #32]
   80bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80bd8:	6059      	str	r1, [r3, #4]
   80bda:	f240 2102 	movw	r1, #514	; 0x202
   80bde:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80be2:	f04f 31ff 	mov.w	r1, #4294967295
   80be6:	60d9      	str	r1, [r3, #12]
   80be8:	21e1      	movs	r1, #225	; 0xe1
   80bea:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80bec:	4904      	ldr	r1, [pc, #16]	; (80c00 <configure_uart+0x64>)
   80bee:	600a      	str	r2, [r1, #0]
   80bf0:	2250      	movs	r2, #80	; 0x50
   80bf2:	601a      	str	r2, [r3, #0]
   80bf4:	4770      	bx	lr
   80bf6:	bf00      	nop
   80bf8:	20000468 	.word	0x20000468
   80bfc:	400e0e00 	.word	0x400e0e00
   80c00:	e000e100 	.word	0xe000e100

00080c04 <uart_putchar>:
   80c04:	4b07      	ldr	r3, [pc, #28]	; (80c24 <uart_putchar+0x20>)
   80c06:	695b      	ldr	r3, [r3, #20]
   80c08:	f013 0f02 	tst.w	r3, #2
   80c0c:	d008      	beq.n	80c20 <uart_putchar+0x1c>
   80c0e:	4b05      	ldr	r3, [pc, #20]	; (80c24 <uart_putchar+0x20>)
   80c10:	61d8      	str	r0, [r3, #28]
   80c12:	461a      	mov	r2, r3
   80c14:	6953      	ldr	r3, [r2, #20]
   80c16:	f413 7f00 	tst.w	r3, #512	; 0x200
   80c1a:	d0fb      	beq.n	80c14 <uart_putchar+0x10>
   80c1c:	2000      	movs	r0, #0
   80c1e:	4770      	bx	lr
   80c20:	2001      	movs	r0, #1
   80c22:	4770      	bx	lr
   80c24:	400e0800 	.word	0x400e0800

00080c28 <UART_Handler>:
   80c28:	b508      	push	{r3, lr}
   80c2a:	4b15      	ldr	r3, [pc, #84]	; (80c80 <UART_Handler+0x58>)
   80c2c:	695b      	ldr	r3, [r3, #20]
   80c2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80c32:	d003      	beq.n	80c3c <UART_Handler+0x14>
   80c34:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80c38:	4a11      	ldr	r2, [pc, #68]	; (80c80 <UART_Handler+0x58>)
   80c3a:	6011      	str	r1, [r2, #0]
   80c3c:	f013 0f01 	tst.w	r3, #1
   80c40:	d012      	beq.n	80c68 <UART_Handler+0x40>
   80c42:	4810      	ldr	r0, [pc, #64]	; (80c84 <UART_Handler+0x5c>)
   80c44:	7842      	ldrb	r2, [r0, #1]
   80c46:	1c53      	adds	r3, r2, #1
   80c48:	4259      	negs	r1, r3
   80c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80c4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80c52:	bf58      	it	pl
   80c54:	424b      	negpl	r3, r1
   80c56:	7801      	ldrb	r1, [r0, #0]
   80c58:	428b      	cmp	r3, r1
   80c5a:	d006      	beq.n	80c6a <UART_Handler+0x42>
   80c5c:	4908      	ldr	r1, [pc, #32]	; (80c80 <UART_Handler+0x58>)
   80c5e:	6988      	ldr	r0, [r1, #24]
   80c60:	4908      	ldr	r1, [pc, #32]	; (80c84 <UART_Handler+0x5c>)
   80c62:	440a      	add	r2, r1
   80c64:	7090      	strb	r0, [r2, #2]
   80c66:	704b      	strb	r3, [r1, #1]
   80c68:	bd08      	pop	{r3, pc}
   80c6a:	4807      	ldr	r0, [pc, #28]	; (80c88 <UART_Handler+0x60>)
   80c6c:	4b07      	ldr	r3, [pc, #28]	; (80c8c <UART_Handler+0x64>)
   80c6e:	4798      	blx	r3
   80c70:	4b03      	ldr	r3, [pc, #12]	; (80c80 <UART_Handler+0x58>)
   80c72:	699a      	ldr	r2, [r3, #24]
   80c74:	4b03      	ldr	r3, [pc, #12]	; (80c84 <UART_Handler+0x5c>)
   80c76:	7859      	ldrb	r1, [r3, #1]
   80c78:	440b      	add	r3, r1
   80c7a:	709a      	strb	r2, [r3, #2]
   80c7c:	bd08      	pop	{r3, pc}
   80c7e:	bf00      	nop
   80c80:	400e0800 	.word	0x400e0800
   80c84:	20000468 	.word	0x20000468
   80c88:	00080e60 	.word	0x00080e60
   80c8c:	00080a91 	.word	0x00080a91

00080c90 <__libc_init_array>:
   80c90:	b570      	push	{r4, r5, r6, lr}
   80c92:	4e0f      	ldr	r6, [pc, #60]	; (80cd0 <__libc_init_array+0x40>)
   80c94:	4d0f      	ldr	r5, [pc, #60]	; (80cd4 <__libc_init_array+0x44>)
   80c96:	1b76      	subs	r6, r6, r5
   80c98:	10b6      	asrs	r6, r6, #2
   80c9a:	bf18      	it	ne
   80c9c:	2400      	movne	r4, #0
   80c9e:	d005      	beq.n	80cac <__libc_init_array+0x1c>
   80ca0:	3401      	adds	r4, #1
   80ca2:	f855 3b04 	ldr.w	r3, [r5], #4
   80ca6:	4798      	blx	r3
   80ca8:	42a6      	cmp	r6, r4
   80caa:	d1f9      	bne.n	80ca0 <__libc_init_array+0x10>
   80cac:	4e0a      	ldr	r6, [pc, #40]	; (80cd8 <__libc_init_array+0x48>)
   80cae:	4d0b      	ldr	r5, [pc, #44]	; (80cdc <__libc_init_array+0x4c>)
   80cb0:	f000 f8e8 	bl	80e84 <_init>
   80cb4:	1b76      	subs	r6, r6, r5
   80cb6:	10b6      	asrs	r6, r6, #2
   80cb8:	bf18      	it	ne
   80cba:	2400      	movne	r4, #0
   80cbc:	d006      	beq.n	80ccc <__libc_init_array+0x3c>
   80cbe:	3401      	adds	r4, #1
   80cc0:	f855 3b04 	ldr.w	r3, [r5], #4
   80cc4:	4798      	blx	r3
   80cc6:	42a6      	cmp	r6, r4
   80cc8:	d1f9      	bne.n	80cbe <__libc_init_array+0x2e>
   80cca:	bd70      	pop	{r4, r5, r6, pc}
   80ccc:	bd70      	pop	{r4, r5, r6, pc}
   80cce:	bf00      	nop
   80cd0:	00080e90 	.word	0x00080e90
   80cd4:	00080e90 	.word	0x00080e90
   80cd8:	00080e98 	.word	0x00080e98
   80cdc:	00080e90 	.word	0x00080e90

00080ce0 <register_fini>:
   80ce0:	4b02      	ldr	r3, [pc, #8]	; (80cec <register_fini+0xc>)
   80ce2:	b113      	cbz	r3, 80cea <register_fini+0xa>
   80ce4:	4802      	ldr	r0, [pc, #8]	; (80cf0 <register_fini+0x10>)
   80ce6:	f000 b805 	b.w	80cf4 <atexit>
   80cea:	4770      	bx	lr
   80cec:	00000000 	.word	0x00000000
   80cf0:	00080d01 	.word	0x00080d01

00080cf4 <atexit>:
   80cf4:	2300      	movs	r3, #0
   80cf6:	4601      	mov	r1, r0
   80cf8:	461a      	mov	r2, r3
   80cfa:	4618      	mov	r0, r3
   80cfc:	f000 b81e 	b.w	80d3c <__register_exitproc>

00080d00 <__libc_fini_array>:
   80d00:	b538      	push	{r3, r4, r5, lr}
   80d02:	4c0a      	ldr	r4, [pc, #40]	; (80d2c <__libc_fini_array+0x2c>)
   80d04:	4d0a      	ldr	r5, [pc, #40]	; (80d30 <__libc_fini_array+0x30>)
   80d06:	1b64      	subs	r4, r4, r5
   80d08:	10a4      	asrs	r4, r4, #2
   80d0a:	d00a      	beq.n	80d22 <__libc_fini_array+0x22>
   80d0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80d10:	3b01      	subs	r3, #1
   80d12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80d16:	3c01      	subs	r4, #1
   80d18:	f855 3904 	ldr.w	r3, [r5], #-4
   80d1c:	4798      	blx	r3
   80d1e:	2c00      	cmp	r4, #0
   80d20:	d1f9      	bne.n	80d16 <__libc_fini_array+0x16>
   80d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80d26:	f000 b8b7 	b.w	80e98 <_fini>
   80d2a:	bf00      	nop
   80d2c:	00080ea8 	.word	0x00080ea8
   80d30:	00080ea4 	.word	0x00080ea4

00080d34 <__retarget_lock_acquire_recursive>:
   80d34:	4770      	bx	lr
   80d36:	bf00      	nop

00080d38 <__retarget_lock_release_recursive>:
   80d38:	4770      	bx	lr
   80d3a:	bf00      	nop

00080d3c <__register_exitproc>:
   80d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80d40:	4d2c      	ldr	r5, [pc, #176]	; (80df4 <__register_exitproc+0xb8>)
   80d42:	4606      	mov	r6, r0
   80d44:	6828      	ldr	r0, [r5, #0]
   80d46:	4698      	mov	r8, r3
   80d48:	460f      	mov	r7, r1
   80d4a:	4691      	mov	r9, r2
   80d4c:	f7ff fff2 	bl	80d34 <__retarget_lock_acquire_recursive>
   80d50:	4b29      	ldr	r3, [pc, #164]	; (80df8 <__register_exitproc+0xbc>)
   80d52:	681c      	ldr	r4, [r3, #0]
   80d54:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80d58:	2b00      	cmp	r3, #0
   80d5a:	d03e      	beq.n	80dda <__register_exitproc+0x9e>
   80d5c:	685a      	ldr	r2, [r3, #4]
   80d5e:	2a1f      	cmp	r2, #31
   80d60:	dc1c      	bgt.n	80d9c <__register_exitproc+0x60>
   80d62:	f102 0e01 	add.w	lr, r2, #1
   80d66:	b176      	cbz	r6, 80d86 <__register_exitproc+0x4a>
   80d68:	2101      	movs	r1, #1
   80d6a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80d6e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80d72:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80d76:	4091      	lsls	r1, r2
   80d78:	4308      	orrs	r0, r1
   80d7a:	2e02      	cmp	r6, #2
   80d7c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80d80:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80d84:	d023      	beq.n	80dce <__register_exitproc+0x92>
   80d86:	3202      	adds	r2, #2
   80d88:	f8c3 e004 	str.w	lr, [r3, #4]
   80d8c:	6828      	ldr	r0, [r5, #0]
   80d8e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80d92:	f7ff ffd1 	bl	80d38 <__retarget_lock_release_recursive>
   80d96:	2000      	movs	r0, #0
   80d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80d9c:	4b17      	ldr	r3, [pc, #92]	; (80dfc <__register_exitproc+0xc0>)
   80d9e:	b30b      	cbz	r3, 80de4 <__register_exitproc+0xa8>
   80da0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80da4:	f3af 8000 	nop.w
   80da8:	4603      	mov	r3, r0
   80daa:	b1d8      	cbz	r0, 80de4 <__register_exitproc+0xa8>
   80dac:	2000      	movs	r0, #0
   80dae:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80db2:	f04f 0e01 	mov.w	lr, #1
   80db6:	6058      	str	r0, [r3, #4]
   80db8:	6019      	str	r1, [r3, #0]
   80dba:	4602      	mov	r2, r0
   80dbc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80dc0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80dc4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80dc8:	2e00      	cmp	r6, #0
   80dca:	d0dc      	beq.n	80d86 <__register_exitproc+0x4a>
   80dcc:	e7cc      	b.n	80d68 <__register_exitproc+0x2c>
   80dce:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80dd2:	4301      	orrs	r1, r0
   80dd4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80dd8:	e7d5      	b.n	80d86 <__register_exitproc+0x4a>
   80dda:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80dde:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80de2:	e7bb      	b.n	80d5c <__register_exitproc+0x20>
   80de4:	6828      	ldr	r0, [r5, #0]
   80de6:	f7ff ffa7 	bl	80d38 <__retarget_lock_release_recursive>
   80dea:	f04f 30ff 	mov.w	r0, #4294967295
   80dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80df2:	bf00      	nop
   80df4:	20000430 	.word	0x20000430
   80df8:	00080e80 	.word	0x00080e80
   80dfc:	00000000 	.word	0x00000000
   80e00:	304e4143 	.word	0x304e4143
   80e04:	73656d20 	.word	0x73656d20
   80e08:	65676173 	.word	0x65676173
   80e0c:	72726120 	.word	0x72726120
   80e10:	64657669 	.word	0x64657669
   80e14:	206e6920 	.word	0x206e6920
   80e18:	2d6e6f6e 	.word	0x2d6e6f6e
   80e1c:	64657375 	.word	0x64657375
   80e20:	69616d20 	.word	0x69616d20
   80e24:	786f626c 	.word	0x786f626c
   80e28:	00000d0a 	.word	0x00000d0a
   80e2c:	65646f4e 	.word	0x65646f4e
   80e30:	0d0a3220 	.word	0x0d0a3220
   80e34:	00000000 	.word	0x00000000
   80e38:	726f6373 	.word	0x726f6373
   80e3c:	25203a65 	.word	0x25203a65
   80e40:	0d0a2064 	.word	0x0d0a2064
   80e44:	00000000 	.word	0x00000000
   80e48:	00006425 	.word	0x00006425
   80e4c:	6c756e28 	.word	0x6c756e28
   80e50:	0000296c 	.word	0x0000296c
   80e54:	50455453 	.word	0x50455453
   80e58:	0d642520 	.word	0x0d642520
   80e5c:	0000000a 	.word	0x0000000a
   80e60:	3a525245 	.word	0x3a525245
   80e64:	52415520 	.word	0x52415520
   80e68:	58522054 	.word	0x58522054
   80e6c:	66756220 	.word	0x66756220
   80e70:	20726566 	.word	0x20726566
   80e74:	66207369 	.word	0x66207369
   80e78:	0a6c6c75 	.word	0x0a6c6c75
   80e7c:	0000000d 	.word	0x0000000d

00080e80 <_global_impure_ptr>:
   80e80:	20000008                                ... 

00080e84 <_init>:
   80e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e86:	bf00      	nop
   80e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80e8a:	bc08      	pop	{r3}
   80e8c:	469e      	mov	lr, r3
   80e8e:	4770      	bx	lr

00080e90 <__init_array_start>:
   80e90:	00080ce1 	.word	0x00080ce1

00080e94 <__frame_dummy_init_array_entry>:
   80e94:	00080119                                ....

00080e98 <_fini>:
   80e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e9a:	bf00      	nop
   80e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80e9e:	bc08      	pop	{r3}
   80ea0:	469e      	mov	lr, r3
   80ea2:	4770      	bx	lr

00080ea4 <__fini_array_start>:
   80ea4:	000800f5 	.word	0x000800f5
