
TTK4155-node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001094  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000056c  20070000  00081094  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000f4  2007056c  00081600  0002056c  2**2
                  ALLOC
  3 .stack        00002000  20070660  000816f4  0002056c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020595  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f2d5  00000000  00000000  000205ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000238e  00000000  00000000  0002f8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002c66  00000000  00000000  00031c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000588  00000000  00000000  000348b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000520  00000000  00000000  00034e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017677  00000000  00000000  0003535f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aff5  00000000  00000000  0004c9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000632c3  00000000  00000000  000579cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d14  00000000  00000000  000bac90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	60 26 07 20 5d 0c 08 00 59 0c 08 00 59 0c 08 00     `&. ]...Y...Y...
   80010:	59 0c 08 00 59 0c 08 00 59 0c 08 00 00 00 00 00     Y...Y...Y.......
	...
   8002c:	59 0c 08 00 59 0c 08 00 00 00 00 00 59 0c 08 00     Y...Y.......Y...
   8003c:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   8004c:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   8005c:	59 0c 08 00 59 07 08 00 59 0c 08 00 00 00 00 00     Y...Y...Y.......
   8006c:	01 0b 08 00 15 0b 08 00 29 0b 08 00 3d 0b 08 00     ........)...=...
	...
   80084:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   80094:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   800a4:	00 00 00 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     ....Y...Y...Y...
   800b4:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   800c4:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   800d4:	59 0c 08 00 59 0c 08 00 59 0c 08 00 59 0c 08 00     Y...Y...Y...Y...
   800e4:	59 0c 08 00 59 0c 08 00 71 03 08 00 59 0c 08 00     Y...Y...q...Y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007056c 	.word	0x2007056c
   80110:	00000000 	.word	0x00000000
   80114:	00081094 	.word	0x00081094

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081094 	.word	0x00081094
   80154:	20070570 	.word	0x20070570
   80158:	00081094 	.word	0x00081094
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
{
   80250:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
}
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d036      	beq.n	802e2 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80274:	8803      	ldrh	r3, [r0, #0]
   80276:	4a1c      	ldr	r2, [pc, #112]	; (802e8 <can_send+0x88>)
   80278:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   8027c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80280:	014b      	lsls	r3, r1, #5
   80282:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80286:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8028a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   8028e:	8843      	ldrh	r3, [r0, #2]
   80290:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   80292:	bf84      	itt	hi
   80294:	2307      	movhi	r3, #7
   80296:	8043      	strhhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   80298:	79c2      	ldrb	r2, [r0, #7]
   8029a:	7983      	ldrb	r3, [r0, #6]
   8029c:	041b      	lsls	r3, r3, #16
   8029e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802a2:	7902      	ldrb	r2, [r0, #4]
   802a4:	4313      	orrs	r3, r2
   802a6:	7942      	ldrb	r2, [r0, #5]
   802a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802ac:	0149      	lsls	r1, r1, #5
   802ae:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   802b2:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   802b6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   802ba:	7ac2      	ldrb	r2, [r0, #11]
   802bc:	7a83      	ldrb	r3, [r0, #10]
   802be:	041b      	lsls	r3, r3, #16
   802c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802c4:	7a02      	ldrb	r2, [r0, #8]
   802c6:	4313      	orrs	r3, r2
   802c8:	7a42      	ldrb	r2, [r0, #9]
   802ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802ce:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   802d2:	8843      	ldrh	r3, [r0, #2]
   802d4:	041b      	lsls	r3, r3, #16
   802d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802da:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802de:	2000      	movs	r0, #0
   802e0:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   802e2:	2001      	movs	r0, #1
	}
	
}
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop
   802e8:	1ffc0000 	.word	0x1ffc0000

000802ec <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802ec:	014b      	lsls	r3, r1, #5
   802ee:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802f2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802fa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802fe:	d033      	beq.n	80368 <can_receive+0x7c>
{
   80300:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80302:	014b      	lsls	r3, r1, #5
   80304:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80308:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8030c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80310:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80314:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80318:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8031c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8031e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80322:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80326:	8043      	strh	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80328:	461d      	mov	r5, r3
   8032a:	b15b      	cbz	r3, 80344 <can_receive+0x58>
   8032c:	3004      	adds	r0, #4
   8032e:	2300      	movs	r3, #0
		{
			if(i < 4)
   80330:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80332:	bfd9      	ittee	le
   80334:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   80336:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80338:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8033a:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8033c:	3301      	adds	r3, #1
   8033e:	3001      	adds	r0, #1
   80340:	42ab      	cmp	r3, r5
   80342:	d1f5      	bne.n	80330 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80344:	4b09      	ldr	r3, [pc, #36]	; (8036c <can_receive+0x80>)
   80346:	f101 0210 	add.w	r2, r1, #16
   8034a:	0152      	lsls	r2, r2, #5
   8034c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80350:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80352:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80356:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8035a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8035e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80362:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80364:	bc30      	pop	{r4, r5}
   80366:	4770      	bx	lr
		return 1;
   80368:	2001      	movs	r0, #1
   8036a:	4770      	bx	lr
   8036c:	400b4000 	.word	0x400b4000

00080370 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80370:	b510      	push	{r4, lr}
   80372:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80374:	4b15      	ldr	r3, [pc, #84]	; (803cc <CAN0_Handler+0x5c>)
   80376:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80378:	f014 0f06 	tst.w	r4, #6
   8037c:	d010      	beq.n	803a0 <CAN0_Handler+0x30>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8037e:	f014 0f02 	tst.w	r4, #2
   80382:	d11a      	bne.n	803ba <CAN0_Handler+0x4a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80384:	f014 0f04 	tst.w	r4, #4
   80388:	d01c      	beq.n	803c4 <CAN0_Handler+0x54>
		
		{
			can_receive(&message, 2);
   8038a:	2102      	movs	r1, #2
   8038c:	a801      	add	r0, sp, #4
   8038e:	4b10      	ldr	r3, [pc, #64]	; (803d0 <CAN0_Handler+0x60>)
   80390:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80392:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   80396:	b11a      	cbz	r2, 803a0 <CAN0_Handler+0x30>
   80398:	2300      	movs	r3, #0
   8039a:	3301      	adds	r3, #1
   8039c:	4293      	cmp	r3, r2
   8039e:	d1fc      	bne.n	8039a <CAN0_Handler+0x2a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   803a0:	f014 0f01 	tst.w	r4, #1
   803a4:	d002      	beq.n	803ac <CAN0_Handler+0x3c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803a6:	2201      	movs	r2, #1
   803a8:	4b08      	ldr	r3, [pc, #32]	; (803cc <CAN0_Handler+0x5c>)
   803aa:	609a      	str	r2, [r3, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   803ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803b0:	4b08      	ldr	r3, [pc, #32]	; (803d4 <CAN0_Handler+0x64>)
   803b2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803b6:	b004      	add	sp, #16
   803b8:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   803ba:	2101      	movs	r1, #1
   803bc:	a801      	add	r0, sp, #4
   803be:	4b04      	ldr	r3, [pc, #16]	; (803d0 <CAN0_Handler+0x60>)
   803c0:	4798      	blx	r3
   803c2:	e7e6      	b.n	80392 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803c4:	4804      	ldr	r0, [pc, #16]	; (803d8 <CAN0_Handler+0x68>)
   803c6:	4b05      	ldr	r3, [pc, #20]	; (803dc <CAN0_Handler+0x6c>)
   803c8:	4798      	blx	r3
   803ca:	e7e2      	b.n	80392 <CAN0_Handler+0x22>
   803cc:	400b4000 	.word	0x400b4000
   803d0:	000802ed 	.word	0x000802ed
   803d4:	e000e100 	.word	0xe000e100
   803d8:	00081018 	.word	0x00081018
   803dc:	000806a9 	.word	0x000806a9

000803e0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   803e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   803e4:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   803e6:	1e16      	subs	r6, r2, #0
   803e8:	dd48      	ble.n	8047c <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   803ea:	780a      	ldrb	r2, [r1, #0]
   803ec:	2a00      	cmp	r2, #0
   803ee:	d035      	beq.n	8045c <prints+0x7c>
   803f0:	460a      	mov	r2, r1
   803f2:	2400      	movs	r4, #0
   803f4:	3401      	adds	r4, #1
   803f6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   803fa:	2900      	cmp	r1, #0
   803fc:	d1fa      	bne.n	803f4 <prints+0x14>
		if (len >= width) width = 0;
   803fe:	42a6      	cmp	r6, r4
   80400:	dc2d      	bgt.n	8045e <prints+0x7e>
   80402:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80404:	f003 0202 	and.w	r2, r3, #2
   80408:	2a00      	cmp	r2, #0
   8040a:	bf0c      	ite	eq
   8040c:	f04f 0820 	moveq.w	r8, #32
   80410:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80414:	f013 0301 	ands.w	r3, r3, #1
   80418:	d123      	bne.n	80462 <prints+0x82>
		for ( ; width > 0; --width) {
   8041a:	2c00      	cmp	r4, #0
   8041c:	dd28      	ble.n	80470 <prints+0x90>
   8041e:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80420:	fa5f f988 	uxtb.w	r9, r8
   80424:	4f18      	ldr	r7, [pc, #96]	; (80488 <prints+0xa8>)
   80426:	4648      	mov	r0, r9
   80428:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   8042a:	3e01      	subs	r6, #1
   8042c:	d1fb      	bne.n	80426 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   8042e:	7828      	ldrb	r0, [r5, #0]
   80430:	b188      	cbz	r0, 80456 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80432:	4f15      	ldr	r7, [pc, #84]	; (80488 <prints+0xa8>)
   80434:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80436:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80438:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   8043c:	2800      	cmp	r0, #0
   8043e:	d1f9      	bne.n	80434 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80440:	2e00      	cmp	r6, #0
   80442:	dd08      	ble.n	80456 <prints+0x76>
   80444:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80446:	fa5f f888 	uxtb.w	r8, r8
   8044a:	4f0f      	ldr	r7, [pc, #60]	; (80488 <prints+0xa8>)
   8044c:	4640      	mov	r0, r8
   8044e:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80450:	3d01      	subs	r5, #1
   80452:	d1fb      	bne.n	8044c <prints+0x6c>
   80454:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80456:	4620      	mov	r0, r4
   80458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   8045c:	2400      	movs	r4, #0
		else width -= len;
   8045e:	1b34      	subs	r4, r6, r4
   80460:	e7d0      	b.n	80404 <prints+0x24>
   80462:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80464:	7828      	ldrb	r0, [r5, #0]
   80466:	b108      	cbz	r0, 8046c <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80468:	2400      	movs	r4, #0
   8046a:	e7e2      	b.n	80432 <prints+0x52>
   8046c:	2400      	movs	r4, #0
   8046e:	e7e7      	b.n	80440 <prints+0x60>
		for ( ; width > 0; --width) {
   80470:	4626      	mov	r6, r4
   80472:	461c      	mov	r4, r3
   80474:	e7db      	b.n	8042e <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80476:	f04f 0820 	mov.w	r8, #32
   8047a:	e7d8      	b.n	8042e <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   8047c:	f013 0401 	ands.w	r4, r3, #1
   80480:	d0f9      	beq.n	80476 <prints+0x96>
	register int pc = 0, padchar = ' ';
   80482:	f04f 0820 	mov.w	r8, #32
   80486:	e7ed      	b.n	80464 <prints+0x84>
   80488:	00080735 	.word	0x00080735

0008048c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   8048c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8048e:	b085      	sub	sp, #20
   80490:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80492:	b381      	cbz	r1, 804f6 <printi+0x6a>
   80494:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80496:	b10b      	cbz	r3, 8049c <printi+0x10>
   80498:	2a0a      	cmp	r2, #10
   8049a:	d038      	beq.n	8050e <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8049c:	2300      	movs	r3, #0
   8049e:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   804a2:	2600      	movs	r6, #0
   804a4:	2900      	cmp	r1, #0
   804a6:	d046      	beq.n	80536 <printi+0xaa>
   804a8:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   804ac:	990c      	ldr	r1, [sp, #48]	; 0x30
   804ae:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   804b0:	fbb4 f3f2 	udiv	r3, r4, r2
   804b4:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   804b8:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   804ba:	bfc8      	it	gt
   804bc:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   804be:	3330      	adds	r3, #48	; 0x30
   804c0:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   804c4:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   804c8:	2c00      	cmp	r4, #0
   804ca:	d1f1      	bne.n	804b0 <printi+0x24>
	}

	if (neg) {
   804cc:	b156      	cbz	r6, 804e4 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   804ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   804d0:	b11b      	cbz	r3, 804da <printi+0x4e>
   804d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   804d4:	f013 0f02 	tst.w	r3, #2
   804d8:	d125      	bne.n	80526 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   804da:	232d      	movs	r3, #45	; 0x2d
   804dc:	f805 3c01 	strb.w	r3, [r5, #-1]
   804e0:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   804e2:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   804e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   804e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   804e8:	4629      	mov	r1, r5
   804ea:	4638      	mov	r0, r7
   804ec:	4c14      	ldr	r4, [pc, #80]	; (80540 <printi+0xb4>)
   804ee:	47a0      	blx	r4
   804f0:	4430      	add	r0, r6
}
   804f2:	b005      	add	sp, #20
   804f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   804f6:	2330      	movs	r3, #48	; 0x30
   804f8:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   804fc:	2300      	movs	r3, #0
   804fe:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80506:	a901      	add	r1, sp, #4
   80508:	4c0d      	ldr	r4, [pc, #52]	; (80540 <printi+0xb4>)
   8050a:	47a0      	blx	r4
   8050c:	e7f1      	b.n	804f2 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   8050e:	2900      	cmp	r1, #0
   80510:	dac4      	bge.n	8049c <printi+0x10>
		u = -i;
   80512:	424c      	negs	r4, r1
	*s = '\0';
   80514:	2300      	movs	r3, #0
   80516:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   8051a:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   8051e:	2c00      	cmp	r4, #0
   80520:	d0d5      	beq.n	804ce <printi+0x42>
		neg = 1;
   80522:	2601      	movs	r6, #1
   80524:	e7c0      	b.n	804a8 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80526:	202d      	movs	r0, #45	; 0x2d
   80528:	4b06      	ldr	r3, [pc, #24]	; (80544 <printi+0xb8>)
   8052a:	4798      	blx	r3
			--width;
   8052c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8052e:	3b01      	subs	r3, #1
   80530:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80532:	2601      	movs	r6, #1
			--width;
   80534:	e7d6      	b.n	804e4 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80536:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80538:	f10d 050f 	add.w	r5, sp, #15
   8053c:	e7d2      	b.n	804e4 <printi+0x58>
   8053e:	bf00      	nop
   80540:	000803e1 	.word	0x000803e1
   80544:	00080735 	.word	0x00080735

00080548 <print>:

static int print( char **out, const char *format, va_list args )
{
   80548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8054c:	b087      	sub	sp, #28
   8054e:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80550:	780b      	ldrb	r3, [r1, #0]
   80552:	2b00      	cmp	r3, #0
   80554:	f000 8094 	beq.w	80680 <print+0x138>
   80558:	468b      	mov	fp, r1
   8055a:	4617      	mov	r7, r2
   8055c:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   8055e:	4e4e      	ldr	r6, [pc, #312]	; (80698 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80560:	f8df a13c 	ldr.w	sl, [pc, #316]	; 806a0 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80564:	f8df 913c 	ldr.w	r9, [pc, #316]	; 806a4 <print+0x15c>
   80568:	e046      	b.n	805f8 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8056a:	2200      	movs	r2, #0
   8056c:	e070      	b.n	80650 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   8056e:	6839      	ldr	r1, [r7, #0]
   80570:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80572:	484a      	ldr	r0, [pc, #296]	; (8069c <print+0x154>)
   80574:	2900      	cmp	r1, #0
   80576:	bf08      	it	eq
   80578:	4601      	moveq	r1, r0
   8057a:	4640      	mov	r0, r8
   8057c:	47d0      	blx	sl
   8057e:	4405      	add	r5, r0
				continue;
   80580:	e035      	b.n	805ee <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80582:	6839      	ldr	r1, [r7, #0]
   80584:	3704      	adds	r7, #4
   80586:	2061      	movs	r0, #97	; 0x61
   80588:	9002      	str	r0, [sp, #8]
   8058a:	9301      	str	r3, [sp, #4]
   8058c:	9200      	str	r2, [sp, #0]
   8058e:	2301      	movs	r3, #1
   80590:	220a      	movs	r2, #10
   80592:	4640      	mov	r0, r8
   80594:	47c8      	blx	r9
   80596:	4405      	add	r5, r0
				continue;
   80598:	e029      	b.n	805ee <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8059a:	6839      	ldr	r1, [r7, #0]
   8059c:	3704      	adds	r7, #4
   8059e:	2061      	movs	r0, #97	; 0x61
   805a0:	9002      	str	r0, [sp, #8]
   805a2:	9301      	str	r3, [sp, #4]
   805a4:	9200      	str	r2, [sp, #0]
   805a6:	2300      	movs	r3, #0
   805a8:	2210      	movs	r2, #16
   805aa:	4640      	mov	r0, r8
   805ac:	47c8      	blx	r9
   805ae:	4405      	add	r5, r0
				continue;
   805b0:	e01d      	b.n	805ee <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   805b2:	6839      	ldr	r1, [r7, #0]
   805b4:	3704      	adds	r7, #4
   805b6:	2041      	movs	r0, #65	; 0x41
   805b8:	9002      	str	r0, [sp, #8]
   805ba:	9301      	str	r3, [sp, #4]
   805bc:	9200      	str	r2, [sp, #0]
   805be:	2300      	movs	r3, #0
   805c0:	2210      	movs	r2, #16
   805c2:	4640      	mov	r0, r8
   805c4:	47c8      	blx	r9
   805c6:	4405      	add	r5, r0
				continue;
   805c8:	e011      	b.n	805ee <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   805ca:	6839      	ldr	r1, [r7, #0]
   805cc:	3704      	adds	r7, #4
   805ce:	2061      	movs	r0, #97	; 0x61
   805d0:	9002      	str	r0, [sp, #8]
   805d2:	9301      	str	r3, [sp, #4]
   805d4:	9200      	str	r2, [sp, #0]
   805d6:	2300      	movs	r3, #0
   805d8:	220a      	movs	r2, #10
   805da:	4640      	mov	r0, r8
   805dc:	47c8      	blx	r9
   805de:	4405      	add	r5, r0
				continue;
   805e0:	e005      	b.n	805ee <print+0xa6>
			++format;
   805e2:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   805e4:	f89b 0000 	ldrb.w	r0, [fp]
   805e8:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   805ea:	3501      	adds	r5, #1
   805ec:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   805ee:	f104 0b01 	add.w	fp, r4, #1
   805f2:	7863      	ldrb	r3, [r4, #1]
   805f4:	2b00      	cmp	r3, #0
   805f6:	d044      	beq.n	80682 <print+0x13a>
		if (*format == '%') {
   805f8:	2b25      	cmp	r3, #37	; 0x25
   805fa:	d1f3      	bne.n	805e4 <print+0x9c>
			++format;
   805fc:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80600:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80604:	2b00      	cmp	r3, #0
   80606:	d03c      	beq.n	80682 <print+0x13a>
			if (*format == '%') goto out;
   80608:	2b25      	cmp	r3, #37	; 0x25
   8060a:	d0ea      	beq.n	805e2 <print+0x9a>
			if (*format == '-') {
   8060c:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   8060e:	bf06      	itte	eq
   80610:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80614:	2301      	moveq	r3, #1
			width = pad = 0;
   80616:	2300      	movne	r3, #0
			while (*format == '0') {
   80618:	7822      	ldrb	r2, [r4, #0]
   8061a:	2a30      	cmp	r2, #48	; 0x30
   8061c:	d105      	bne.n	8062a <print+0xe2>
				pad |= PAD_ZERO;
   8061e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80622:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80626:	2a30      	cmp	r2, #48	; 0x30
   80628:	d0f9      	beq.n	8061e <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8062a:	7821      	ldrb	r1, [r4, #0]
   8062c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80630:	b2d2      	uxtb	r2, r2
   80632:	2a09      	cmp	r2, #9
   80634:	d899      	bhi.n	8056a <print+0x22>
   80636:	2200      	movs	r2, #0
				width *= 10;
   80638:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   8063c:	3930      	subs	r1, #48	; 0x30
   8063e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80642:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80646:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8064a:	b2c0      	uxtb	r0, r0
   8064c:	2809      	cmp	r0, #9
   8064e:	d9f3      	bls.n	80638 <print+0xf0>
			if( *format == 's' ) {
   80650:	2973      	cmp	r1, #115	; 0x73
   80652:	d08c      	beq.n	8056e <print+0x26>
			if( *format == 'd' ) {
   80654:	2964      	cmp	r1, #100	; 0x64
   80656:	d094      	beq.n	80582 <print+0x3a>
			if( *format == 'x' ) {
   80658:	2978      	cmp	r1, #120	; 0x78
   8065a:	d09e      	beq.n	8059a <print+0x52>
			if( *format == 'X' ) {
   8065c:	2958      	cmp	r1, #88	; 0x58
   8065e:	d0a8      	beq.n	805b2 <print+0x6a>
			if( *format == 'u' ) {
   80660:	2975      	cmp	r1, #117	; 0x75
   80662:	d0b2      	beq.n	805ca <print+0x82>
			if( *format == 'c' ) {
   80664:	2963      	cmp	r1, #99	; 0x63
   80666:	d1c2      	bne.n	805ee <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80668:	6839      	ldr	r1, [r7, #0]
   8066a:	3704      	adds	r7, #4
   8066c:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80670:	2100      	movs	r1, #0
   80672:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80676:	a905      	add	r1, sp, #20
   80678:	4640      	mov	r0, r8
   8067a:	47d0      	blx	sl
   8067c:	4405      	add	r5, r0
				continue;
   8067e:	e7b6      	b.n	805ee <print+0xa6>
	register int pc = 0;
   80680:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80682:	f1b8 0f00 	cmp.w	r8, #0
   80686:	d003      	beq.n	80690 <print+0x148>
   80688:	f8d8 3000 	ldr.w	r3, [r8]
   8068c:	2200      	movs	r2, #0
   8068e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80690:	4628      	mov	r0, r5
   80692:	b007      	add	sp, #28
   80694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80698:	00080735 	.word	0x00080735
   8069c:	00081044 	.word	0x00081044
   806a0:	000803e1 	.word	0x000803e1
   806a4:	0008048d 	.word	0x0008048d

000806a8 <iprintf>:

int printf(const char *format, ...)
{
   806a8:	b40f      	push	{r0, r1, r2, r3}
   806aa:	b500      	push	{lr}
   806ac:	b083      	sub	sp, #12
   806ae:	aa04      	add	r2, sp, #16
   806b0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   806b4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   806b6:	2000      	movs	r0, #0
   806b8:	4b03      	ldr	r3, [pc, #12]	; (806c8 <iprintf+0x20>)
   806ba:	4798      	blx	r3
}
   806bc:	b003      	add	sp, #12
   806be:	f85d eb04 	ldr.w	lr, [sp], #4
   806c2:	b004      	add	sp, #16
   806c4:	4770      	bx	lr
   806c6:	bf00      	nop
   806c8:	00080549 	.word	0x00080549

000806cc <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   806cc:	4b16      	ldr	r3, [pc, #88]	; (80728 <configure_uart+0x5c>)
   806ce:	2200      	movs	r2, #0
   806d0:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   806d2:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   806d4:	4b15      	ldr	r3, [pc, #84]	; (8072c <configure_uart+0x60>)
   806d6:	f44f 7140 	mov.w	r1, #768	; 0x300
   806da:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   806dc:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   806de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   806e0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   806e2:	4002      	ands	r2, r0
   806e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   806e8:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   806ea:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   806ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   806f0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   806f4:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   806f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   806fa:	21ac      	movs	r1, #172	; 0xac
   806fc:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   806fe:	f240 2123 	movw	r1, #547	; 0x223
   80702:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80704:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80708:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8070a:	f240 2102 	movw	r1, #514	; 0x202
   8070e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80712:	f04f 31ff 	mov.w	r1, #4294967295
   80716:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80718:	21e1      	movs	r1, #225	; 0xe1
   8071a:	6099      	str	r1, [r3, #8]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8071c:	4904      	ldr	r1, [pc, #16]	; (80730 <configure_uart+0x64>)
   8071e:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80720:	2250      	movs	r2, #80	; 0x50
   80722:	601a      	str	r2, [r3, #0]
   80724:	4770      	bx	lr
   80726:	bf00      	nop
   80728:	200705f8 	.word	0x200705f8
   8072c:	400e0e00 	.word	0x400e0e00
   80730:	e000e100 	.word	0xe000e100

00080734 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80734:	4b07      	ldr	r3, [pc, #28]	; (80754 <uart_putchar+0x20>)
   80736:	695b      	ldr	r3, [r3, #20]
   80738:	f013 0f02 	tst.w	r3, #2
   8073c:	d008      	beq.n	80750 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   8073e:	4b05      	ldr	r3, [pc, #20]	; (80754 <uart_putchar+0x20>)
   80740:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80742:	461a      	mov	r2, r3
   80744:	6953      	ldr	r3, [r2, #20]
   80746:	f413 7f00 	tst.w	r3, #512	; 0x200
   8074a:	d0fb      	beq.n	80744 <uart_putchar+0x10>
	return 0;
   8074c:	2000      	movs	r0, #0
   8074e:	4770      	bx	lr
	return 1;
   80750:	2001      	movs	r0, #1
}
   80752:	4770      	bx	lr
   80754:	400e0800 	.word	0x400e0800

00080758 <UART_Handler>:

void UART_Handler(void)
{
   80758:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   8075a:	4b15      	ldr	r3, [pc, #84]	; (807b0 <UART_Handler+0x58>)
   8075c:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   8075e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80762:	d003      	beq.n	8076c <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80764:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80768:	4a11      	ldr	r2, [pc, #68]	; (807b0 <UART_Handler+0x58>)
   8076a:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   8076c:	f013 0f01 	tst.w	r3, #1
   80770:	d012      	beq.n	80798 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80772:	4810      	ldr	r0, [pc, #64]	; (807b4 <UART_Handler+0x5c>)
   80774:	7842      	ldrb	r2, [r0, #1]
   80776:	1c53      	adds	r3, r2, #1
   80778:	4259      	negs	r1, r3
   8077a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8077e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80782:	bf58      	it	pl
   80784:	424b      	negpl	r3, r1
   80786:	7801      	ldrb	r1, [r0, #0]
   80788:	428b      	cmp	r3, r1
   8078a:	d006      	beq.n	8079a <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   8078c:	4908      	ldr	r1, [pc, #32]	; (807b0 <UART_Handler+0x58>)
   8078e:	6988      	ldr	r0, [r1, #24]
   80790:	4908      	ldr	r1, [pc, #32]	; (807b4 <UART_Handler+0x5c>)
   80792:	440a      	add	r2, r1
   80794:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80796:	704b      	strb	r3, [r1, #1]
   80798:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   8079a:	4807      	ldr	r0, [pc, #28]	; (807b8 <UART_Handler+0x60>)
   8079c:	4b07      	ldr	r3, [pc, #28]	; (807bc <UART_Handler+0x64>)
   8079e:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   807a0:	4b03      	ldr	r3, [pc, #12]	; (807b0 <UART_Handler+0x58>)
   807a2:	699a      	ldr	r2, [r3, #24]
   807a4:	4b03      	ldr	r3, [pc, #12]	; (807b4 <UART_Handler+0x5c>)
   807a6:	7859      	ldrb	r1, [r3, #1]
   807a8:	440b      	add	r3, r1
   807aa:	709a      	strb	r2, [r3, #2]
			return;
   807ac:	bd08      	pop	{r3, pc}
   807ae:	bf00      	nop
   807b0:	400e0800 	.word	0x400e0800
   807b4:	200705f8 	.word	0x200705f8
   807b8:	0008104c 	.word	0x0008104c
   807bc:	000806a9 	.word	0x000806a9

000807c0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   807c0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   807c2:	480e      	ldr	r0, [pc, #56]	; (807fc <sysclk_init+0x3c>)
   807c4:	4b0e      	ldr	r3, [pc, #56]	; (80800 <sysclk_init+0x40>)
   807c6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   807c8:	213e      	movs	r1, #62	; 0x3e
   807ca:	2000      	movs	r0, #0
   807cc:	4b0d      	ldr	r3, [pc, #52]	; (80804 <sysclk_init+0x44>)
   807ce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   807d0:	4c0d      	ldr	r4, [pc, #52]	; (80808 <sysclk_init+0x48>)
   807d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   807d4:	2800      	cmp	r0, #0
   807d6:	d0fc      	beq.n	807d2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   807d8:	4b0c      	ldr	r3, [pc, #48]	; (8080c <sysclk_init+0x4c>)
   807da:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   807dc:	4a0c      	ldr	r2, [pc, #48]	; (80810 <sysclk_init+0x50>)
   807de:	4b0d      	ldr	r3, [pc, #52]	; (80814 <sysclk_init+0x54>)
   807e0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   807e2:	4c0d      	ldr	r4, [pc, #52]	; (80818 <sysclk_init+0x58>)
   807e4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   807e6:	2800      	cmp	r0, #0
   807e8:	d0fc      	beq.n	807e4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807ea:	2010      	movs	r0, #16
   807ec:	4b0b      	ldr	r3, [pc, #44]	; (8081c <sysclk_init+0x5c>)
   807ee:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807f0:	4b0b      	ldr	r3, [pc, #44]	; (80820 <sysclk_init+0x60>)
   807f2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807f4:	4801      	ldr	r0, [pc, #4]	; (807fc <sysclk_init+0x3c>)
   807f6:	4b02      	ldr	r3, [pc, #8]	; (80800 <sysclk_init+0x40>)
   807f8:	4798      	blx	r3
   807fa:	bd10      	pop	{r4, pc}
   807fc:	0501bd00 	.word	0x0501bd00
   80800:	200700b1 	.word	0x200700b1
   80804:	00080bb5 	.word	0x00080bb5
   80808:	00080c09 	.word	0x00080c09
   8080c:	00080c19 	.word	0x00080c19
   80810:	200d3f01 	.word	0x200d3f01
   80814:	400e0600 	.word	0x400e0600
   80818:	00080c29 	.word	0x00080c29
   8081c:	00080b51 	.word	0x00080b51
   80820:	00080cf5 	.word	0x00080cf5

00080824 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80824:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80826:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8082a:	4b16      	ldr	r3, [pc, #88]	; (80884 <board_init+0x60>)
   8082c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8082e:	200b      	movs	r0, #11
   80830:	4c15      	ldr	r4, [pc, #84]	; (80888 <board_init+0x64>)
   80832:	47a0      	blx	r4
   80834:	200c      	movs	r0, #12
   80836:	47a0      	blx	r4
   80838:	200d      	movs	r0, #13
   8083a:	47a0      	blx	r4
   8083c:	200e      	movs	r0, #14
   8083e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80840:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80844:	203b      	movs	r0, #59	; 0x3b
   80846:	4c11      	ldr	r4, [pc, #68]	; (8088c <board_init+0x68>)
   80848:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8084a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8084e:	2055      	movs	r0, #85	; 0x55
   80850:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80852:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80856:	2056      	movs	r0, #86	; 0x56
   80858:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8085a:	490d      	ldr	r1, [pc, #52]	; (80890 <board_init+0x6c>)
   8085c:	2068      	movs	r0, #104	; 0x68
   8085e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80860:	490c      	ldr	r1, [pc, #48]	; (80894 <board_init+0x70>)
   80862:	205c      	movs	r0, #92	; 0x5c
   80864:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80866:	4a0c      	ldr	r2, [pc, #48]	; (80898 <board_init+0x74>)
   80868:	f44f 7140 	mov.w	r1, #768	; 0x300
   8086c:	480b      	ldr	r0, [pc, #44]	; (8089c <board_init+0x78>)
   8086e:	4b0c      	ldr	r3, [pc, #48]	; (808a0 <board_init+0x7c>)
   80870:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80872:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80876:	202b      	movs	r0, #43	; 0x2b
   80878:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8087a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8087e:	202a      	movs	r0, #42	; 0x2a
   80880:	47a0      	blx	r4
   80882:	bd10      	pop	{r4, pc}
   80884:	400e1a50 	.word	0x400e1a50
   80888:	00080c39 	.word	0x00080c39
   8088c:	00080945 	.word	0x00080945
   80890:	28000079 	.word	0x28000079
   80894:	28000001 	.word	0x28000001
   80898:	08000001 	.word	0x08000001
   8089c:	400e0e00 	.word	0x400e0e00
   808a0:	00080a15 	.word	0x00080a15

000808a4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   808a4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   808a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   808aa:	d016      	beq.n	808da <pio_set_peripheral+0x36>
   808ac:	d80b      	bhi.n	808c6 <pio_set_peripheral+0x22>
   808ae:	b149      	cbz	r1, 808c4 <pio_set_peripheral+0x20>
   808b0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   808b4:	d105      	bne.n	808c2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808b8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808ba:	400b      	ands	r3, r1
   808bc:	ea23 0302 	bic.w	r3, r3, r2
   808c0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808c2:	6042      	str	r2, [r0, #4]
   808c4:	4770      	bx	lr
	switch (ul_type) {
   808c6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808ca:	d0fb      	beq.n	808c4 <pio_set_peripheral+0x20>
   808cc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808d0:	d0f8      	beq.n	808c4 <pio_set_peripheral+0x20>
   808d2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808d6:	d1f4      	bne.n	808c2 <pio_set_peripheral+0x1e>
   808d8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   808da:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808dc:	4313      	orrs	r3, r2
   808de:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808e0:	e7ef      	b.n	808c2 <pio_set_peripheral+0x1e>

000808e2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808e2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   808e4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808e8:	bf14      	ite	ne
   808ea:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   808ec:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808ee:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   808f2:	bf14      	ite	ne
   808f4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   808f6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   808f8:	f012 0f02 	tst.w	r2, #2
   808fc:	d107      	bne.n	8090e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   808fe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80902:	bf18      	it	ne
   80904:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80908:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8090a:	6001      	str	r1, [r0, #0]
   8090c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8090e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80912:	e7f9      	b.n	80908 <pio_set_input+0x26>

00080914 <pio_set_output>:
{
   80914:	b410      	push	{r4}
   80916:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80918:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8091a:	b944      	cbnz	r4, 8092e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8091c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8091e:	b143      	cbz	r3, 80932 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80920:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80922:	b942      	cbnz	r2, 80936 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80924:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80926:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80928:	6001      	str	r1, [r0, #0]
}
   8092a:	bc10      	pop	{r4}
   8092c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8092e:	6641      	str	r1, [r0, #100]	; 0x64
   80930:	e7f5      	b.n	8091e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80932:	6541      	str	r1, [r0, #84]	; 0x54
   80934:	e7f5      	b.n	80922 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80936:	6301      	str	r1, [r0, #48]	; 0x30
   80938:	e7f5      	b.n	80926 <pio_set_output+0x12>

0008093a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8093a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8093c:	4770      	bx	lr

0008093e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8093e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80940:	4770      	bx	lr
	...

00080944 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80944:	b570      	push	{r4, r5, r6, lr}
   80946:	b082      	sub	sp, #8
   80948:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8094a:	0943      	lsrs	r3, r0, #5
   8094c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80950:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80954:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80956:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8095a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8095e:	d031      	beq.n	809c4 <pio_configure_pin+0x80>
   80960:	d816      	bhi.n	80990 <pio_configure_pin+0x4c>
   80962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80966:	d01b      	beq.n	809a0 <pio_configure_pin+0x5c>
   80968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8096c:	d116      	bne.n	8099c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8096e:	f000 001f 	and.w	r0, r0, #31
   80972:	2601      	movs	r6, #1
   80974:	4086      	lsls	r6, r0
   80976:	4632      	mov	r2, r6
   80978:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8097c:	4620      	mov	r0, r4
   8097e:	4b22      	ldr	r3, [pc, #136]	; (80a08 <pio_configure_pin+0xc4>)
   80980:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80982:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80986:	bf14      	ite	ne
   80988:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8098a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8098c:	2001      	movs	r0, #1
   8098e:	e017      	b.n	809c0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80994:	d021      	beq.n	809da <pio_configure_pin+0x96>
   80996:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8099a:	d01e      	beq.n	809da <pio_configure_pin+0x96>
		return 0;
   8099c:	2000      	movs	r0, #0
   8099e:	e00f      	b.n	809c0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   809a0:	f000 001f 	and.w	r0, r0, #31
   809a4:	2601      	movs	r6, #1
   809a6:	4086      	lsls	r6, r0
   809a8:	4632      	mov	r2, r6
   809aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809ae:	4620      	mov	r0, r4
   809b0:	4b15      	ldr	r3, [pc, #84]	; (80a08 <pio_configure_pin+0xc4>)
   809b2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   809b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809b8:	bf14      	ite	ne
   809ba:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   809bc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   809be:	2001      	movs	r0, #1
}
   809c0:	b002      	add	sp, #8
   809c2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   809c4:	f000 011f 	and.w	r1, r0, #31
   809c8:	2601      	movs	r6, #1
   809ca:	462a      	mov	r2, r5
   809cc:	fa06 f101 	lsl.w	r1, r6, r1
   809d0:	4620      	mov	r0, r4
   809d2:	4b0e      	ldr	r3, [pc, #56]	; (80a0c <pio_configure_pin+0xc8>)
   809d4:	4798      	blx	r3
	return 1;
   809d6:	4630      	mov	r0, r6
		break;
   809d8:	e7f2      	b.n	809c0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809da:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809de:	f000 011f 	and.w	r1, r0, #31
   809e2:	2601      	movs	r6, #1
   809e4:	ea05 0306 	and.w	r3, r5, r6
   809e8:	9300      	str	r3, [sp, #0]
   809ea:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809ee:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809f2:	bf14      	ite	ne
   809f4:	2200      	movne	r2, #0
   809f6:	2201      	moveq	r2, #1
   809f8:	fa06 f101 	lsl.w	r1, r6, r1
   809fc:	4620      	mov	r0, r4
   809fe:	4c04      	ldr	r4, [pc, #16]	; (80a10 <pio_configure_pin+0xcc>)
   80a00:	47a0      	blx	r4
	return 1;
   80a02:	4630      	mov	r0, r6
		break;
   80a04:	e7dc      	b.n	809c0 <pio_configure_pin+0x7c>
   80a06:	bf00      	nop
   80a08:	000808a5 	.word	0x000808a5
   80a0c:	000808e3 	.word	0x000808e3
   80a10:	00080915 	.word	0x00080915

00080a14 <pio_configure_pin_group>:
{
   80a14:	b570      	push	{r4, r5, r6, lr}
   80a16:	b082      	sub	sp, #8
   80a18:	4605      	mov	r5, r0
   80a1a:	460e      	mov	r6, r1
   80a1c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80a1e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80a22:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a26:	d027      	beq.n	80a78 <pio_configure_pin_group+0x64>
   80a28:	d811      	bhi.n	80a4e <pio_configure_pin_group+0x3a>
   80a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a2e:	d016      	beq.n	80a5e <pio_configure_pin_group+0x4a>
   80a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a34:	d111      	bne.n	80a5a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a36:	460a      	mov	r2, r1
   80a38:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a3c:	4b19      	ldr	r3, [pc, #100]	; (80aa4 <pio_configure_pin_group+0x90>)
   80a3e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a40:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a44:	bf14      	ite	ne
   80a46:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a48:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a4a:	2001      	movs	r0, #1
   80a4c:	e012      	b.n	80a74 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80a4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80a52:	d015      	beq.n	80a80 <pio_configure_pin_group+0x6c>
   80a54:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80a58:	d012      	beq.n	80a80 <pio_configure_pin_group+0x6c>
		return 0;
   80a5a:	2000      	movs	r0, #0
   80a5c:	e00a      	b.n	80a74 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a5e:	460a      	mov	r2, r1
   80a60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a64:	4b0f      	ldr	r3, [pc, #60]	; (80aa4 <pio_configure_pin_group+0x90>)
   80a66:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a68:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a6c:	bf14      	ite	ne
   80a6e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a70:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a72:	2001      	movs	r0, #1
}
   80a74:	b002      	add	sp, #8
   80a76:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a78:	4b0b      	ldr	r3, [pc, #44]	; (80aa8 <pio_configure_pin_group+0x94>)
   80a7a:	4798      	blx	r3
	return 1;
   80a7c:	2001      	movs	r0, #1
		break;
   80a7e:	e7f9      	b.n	80a74 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a80:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80a84:	f004 0301 	and.w	r3, r4, #1
   80a88:	9300      	str	r3, [sp, #0]
   80a8a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80a8e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a92:	bf14      	ite	ne
   80a94:	2200      	movne	r2, #0
   80a96:	2201      	moveq	r2, #1
   80a98:	4631      	mov	r1, r6
   80a9a:	4628      	mov	r0, r5
   80a9c:	4c03      	ldr	r4, [pc, #12]	; (80aac <pio_configure_pin_group+0x98>)
   80a9e:	47a0      	blx	r4
	return 1;
   80aa0:	2001      	movs	r0, #1
		break;
   80aa2:	e7e7      	b.n	80a74 <pio_configure_pin_group+0x60>
   80aa4:	000808a5 	.word	0x000808a5
   80aa8:	000808e3 	.word	0x000808e3
   80aac:	00080915 	.word	0x00080915

00080ab0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ab4:	4604      	mov	r4, r0
   80ab6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ab8:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <pio_handler_process+0x44>)
   80aba:	4798      	blx	r3
   80abc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80abe:	4620      	mov	r0, r4
   80ac0:	4b0d      	ldr	r3, [pc, #52]	; (80af8 <pio_handler_process+0x48>)
   80ac2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80ac4:	4005      	ands	r5, r0
   80ac6:	d013      	beq.n	80af0 <pio_handler_process+0x40>
   80ac8:	4c0c      	ldr	r4, [pc, #48]	; (80afc <pio_handler_process+0x4c>)
   80aca:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80ace:	e003      	b.n	80ad8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80ad0:	42b4      	cmp	r4, r6
   80ad2:	d00d      	beq.n	80af0 <pio_handler_process+0x40>
   80ad4:	3410      	adds	r4, #16
		while (status != 0) {
   80ad6:	b15d      	cbz	r5, 80af0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80ad8:	6820      	ldr	r0, [r4, #0]
   80ada:	4540      	cmp	r0, r8
   80adc:	d1f8      	bne.n	80ad0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ade:	6861      	ldr	r1, [r4, #4]
   80ae0:	4229      	tst	r1, r5
   80ae2:	d0f5      	beq.n	80ad0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80ae4:	68e3      	ldr	r3, [r4, #12]
   80ae6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80ae8:	6863      	ldr	r3, [r4, #4]
   80aea:	ea25 0503 	bic.w	r5, r5, r3
   80aee:	e7ef      	b.n	80ad0 <pio_handler_process+0x20>
   80af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80af4:	0008093b 	.word	0x0008093b
   80af8:	0008093f 	.word	0x0008093f
   80afc:	20070588 	.word	0x20070588

00080b00 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b00:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b02:	210b      	movs	r1, #11
   80b04:	4801      	ldr	r0, [pc, #4]	; (80b0c <PIOA_Handler+0xc>)
   80b06:	4b02      	ldr	r3, [pc, #8]	; (80b10 <PIOA_Handler+0x10>)
   80b08:	4798      	blx	r3
   80b0a:	bd08      	pop	{r3, pc}
   80b0c:	400e0e00 	.word	0x400e0e00
   80b10:	00080ab1 	.word	0x00080ab1

00080b14 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b14:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b16:	210c      	movs	r1, #12
   80b18:	4801      	ldr	r0, [pc, #4]	; (80b20 <PIOB_Handler+0xc>)
   80b1a:	4b02      	ldr	r3, [pc, #8]	; (80b24 <PIOB_Handler+0x10>)
   80b1c:	4798      	blx	r3
   80b1e:	bd08      	pop	{r3, pc}
   80b20:	400e1000 	.word	0x400e1000
   80b24:	00080ab1 	.word	0x00080ab1

00080b28 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b28:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b2a:	210d      	movs	r1, #13
   80b2c:	4801      	ldr	r0, [pc, #4]	; (80b34 <PIOC_Handler+0xc>)
   80b2e:	4b02      	ldr	r3, [pc, #8]	; (80b38 <PIOC_Handler+0x10>)
   80b30:	4798      	blx	r3
   80b32:	bd08      	pop	{r3, pc}
   80b34:	400e1200 	.word	0x400e1200
   80b38:	00080ab1 	.word	0x00080ab1

00080b3c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b3e:	210e      	movs	r1, #14
   80b40:	4801      	ldr	r0, [pc, #4]	; (80b48 <PIOD_Handler+0xc>)
   80b42:	4b02      	ldr	r3, [pc, #8]	; (80b4c <PIOD_Handler+0x10>)
   80b44:	4798      	blx	r3
   80b46:	bd08      	pop	{r3, pc}
   80b48:	400e1400 	.word	0x400e1400
   80b4c:	00080ab1 	.word	0x00080ab1

00080b50 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b50:	4a17      	ldr	r2, [pc, #92]	; (80bb0 <pmc_switch_mck_to_pllack+0x60>)
   80b52:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80b58:	4318      	orrs	r0, r3
   80b5a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b5e:	f013 0f08 	tst.w	r3, #8
   80b62:	d10a      	bne.n	80b7a <pmc_switch_mck_to_pllack+0x2a>
   80b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b68:	4911      	ldr	r1, [pc, #68]	; (80bb0 <pmc_switch_mck_to_pllack+0x60>)
   80b6a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b6c:	f012 0f08 	tst.w	r2, #8
   80b70:	d103      	bne.n	80b7a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b72:	3b01      	subs	r3, #1
   80b74:	d1f9      	bne.n	80b6a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80b76:	2001      	movs	r0, #1
   80b78:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b7a:	4a0d      	ldr	r2, [pc, #52]	; (80bb0 <pmc_switch_mck_to_pllack+0x60>)
   80b7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b7e:	f023 0303 	bic.w	r3, r3, #3
   80b82:	f043 0302 	orr.w	r3, r3, #2
   80b86:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b88:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b8a:	f013 0f08 	tst.w	r3, #8
   80b8e:	d10a      	bne.n	80ba6 <pmc_switch_mck_to_pllack+0x56>
   80b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b94:	4906      	ldr	r1, [pc, #24]	; (80bb0 <pmc_switch_mck_to_pllack+0x60>)
   80b96:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b98:	f012 0f08 	tst.w	r2, #8
   80b9c:	d105      	bne.n	80baa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b9e:	3b01      	subs	r3, #1
   80ba0:	d1f9      	bne.n	80b96 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80ba2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80ba4:	4770      	bx	lr
	return 0;
   80ba6:	2000      	movs	r0, #0
   80ba8:	4770      	bx	lr
   80baa:	2000      	movs	r0, #0
   80bac:	4770      	bx	lr
   80bae:	bf00      	nop
   80bb0:	400e0600 	.word	0x400e0600

00080bb4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bb4:	b9c8      	cbnz	r0, 80bea <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bb6:	4a11      	ldr	r2, [pc, #68]	; (80bfc <pmc_switch_mainck_to_xtal+0x48>)
   80bb8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80bba:	0209      	lsls	r1, r1, #8
   80bbc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bbe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80bc2:	f023 0303 	bic.w	r3, r3, #3
   80bc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80bca:	f043 0301 	orr.w	r3, r3, #1
   80bce:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bd0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bd2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bd4:	f013 0f01 	tst.w	r3, #1
   80bd8:	d0fb      	beq.n	80bd2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80bda:	4a08      	ldr	r2, [pc, #32]	; (80bfc <pmc_switch_mainck_to_xtal+0x48>)
   80bdc:	6a13      	ldr	r3, [r2, #32]
   80bde:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80be6:	6213      	str	r3, [r2, #32]
   80be8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bea:	4904      	ldr	r1, [pc, #16]	; (80bfc <pmc_switch_mainck_to_xtal+0x48>)
   80bec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80bee:	4a04      	ldr	r2, [pc, #16]	; (80c00 <pmc_switch_mainck_to_xtal+0x4c>)
   80bf0:	401a      	ands	r2, r3
   80bf2:	4b04      	ldr	r3, [pc, #16]	; (80c04 <pmc_switch_mainck_to_xtal+0x50>)
   80bf4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bf6:	620b      	str	r3, [r1, #32]
   80bf8:	4770      	bx	lr
   80bfa:	bf00      	nop
   80bfc:	400e0600 	.word	0x400e0600
   80c00:	fec8fffc 	.word	0xfec8fffc
   80c04:	01370002 	.word	0x01370002

00080c08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c08:	4b02      	ldr	r3, [pc, #8]	; (80c14 <pmc_osc_is_ready_mainck+0xc>)
   80c0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c0c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c10:	4770      	bx	lr
   80c12:	bf00      	nop
   80c14:	400e0600 	.word	0x400e0600

00080c18 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c1c:	4b01      	ldr	r3, [pc, #4]	; (80c24 <pmc_disable_pllack+0xc>)
   80c1e:	629a      	str	r2, [r3, #40]	; 0x28
   80c20:	4770      	bx	lr
   80c22:	bf00      	nop
   80c24:	400e0600 	.word	0x400e0600

00080c28 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c28:	4b02      	ldr	r3, [pc, #8]	; (80c34 <pmc_is_locked_pllack+0xc>)
   80c2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c2c:	f000 0002 	and.w	r0, r0, #2
   80c30:	4770      	bx	lr
   80c32:	bf00      	nop
   80c34:	400e0600 	.word	0x400e0600

00080c38 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   80c38:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80c3c:	4b05      	ldr	r3, [pc, #20]	; (80c54 <pmc_enable_periph_clk+0x1c>)
   80c3e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   80c42:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   80c46:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   80c4a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   80c4e:	2000      	movs	r0, #0
   80c50:	4770      	bx	lr
   80c52:	bf00      	nop
   80c54:	400e0600 	.word	0x400e0600

00080c58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c58:	e7fe      	b.n	80c58 <Dummy_Handler>
	...

00080c5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c5c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c5e:	4b1c      	ldr	r3, [pc, #112]	; (80cd0 <Reset_Handler+0x74>)
   80c60:	4a1c      	ldr	r2, [pc, #112]	; (80cd4 <Reset_Handler+0x78>)
   80c62:	429a      	cmp	r2, r3
   80c64:	d010      	beq.n	80c88 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80c66:	4b1c      	ldr	r3, [pc, #112]	; (80cd8 <Reset_Handler+0x7c>)
   80c68:	4a19      	ldr	r2, [pc, #100]	; (80cd0 <Reset_Handler+0x74>)
   80c6a:	429a      	cmp	r2, r3
   80c6c:	d20c      	bcs.n	80c88 <Reset_Handler+0x2c>
   80c6e:	3b01      	subs	r3, #1
   80c70:	1a9b      	subs	r3, r3, r2
   80c72:	f023 0303 	bic.w	r3, r3, #3
   80c76:	3304      	adds	r3, #4
   80c78:	4413      	add	r3, r2
   80c7a:	4916      	ldr	r1, [pc, #88]	; (80cd4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80c7c:	f851 0b04 	ldr.w	r0, [r1], #4
   80c80:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80c84:	429a      	cmp	r2, r3
   80c86:	d1f9      	bne.n	80c7c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c88:	4b14      	ldr	r3, [pc, #80]	; (80cdc <Reset_Handler+0x80>)
   80c8a:	4a15      	ldr	r2, [pc, #84]	; (80ce0 <Reset_Handler+0x84>)
   80c8c:	429a      	cmp	r2, r3
   80c8e:	d20a      	bcs.n	80ca6 <Reset_Handler+0x4a>
   80c90:	3b01      	subs	r3, #1
   80c92:	1a9b      	subs	r3, r3, r2
   80c94:	f023 0303 	bic.w	r3, r3, #3
   80c98:	3304      	adds	r3, #4
   80c9a:	4413      	add	r3, r2
		*pDest++ = 0;
   80c9c:	2100      	movs	r1, #0
   80c9e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80ca2:	4293      	cmp	r3, r2
   80ca4:	d1fb      	bne.n	80c9e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80ca6:	4b0f      	ldr	r3, [pc, #60]	; (80ce4 <Reset_Handler+0x88>)
   80ca8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80cac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80cb0:	490d      	ldr	r1, [pc, #52]	; (80ce8 <Reset_Handler+0x8c>)
   80cb2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80cb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80cbc:	d203      	bcs.n	80cc6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80cbe:	688b      	ldr	r3, [r1, #8]
   80cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80cc4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80cc6:	4b09      	ldr	r3, [pc, #36]	; (80cec <Reset_Handler+0x90>)
   80cc8:	4798      	blx	r3

	/* Branch to main function */
	main();
   80cca:	4b09      	ldr	r3, [pc, #36]	; (80cf0 <Reset_Handler+0x94>)
   80ccc:	4798      	blx	r3
   80cce:	e7fe      	b.n	80cce <Reset_Handler+0x72>
   80cd0:	20070000 	.word	0x20070000
   80cd4:	00081094 	.word	0x00081094
   80cd8:	2007056c 	.word	0x2007056c
   80cdc:	20070660 	.word	0x20070660
   80ce0:	2007056c 	.word	0x2007056c
   80ce4:	00080000 	.word	0x00080000
   80ce8:	e000ed00 	.word	0xe000ed00
   80cec:	00080ea9 	.word	0x00080ea9
   80cf0:	00080e0d 	.word	0x00080e0d

00080cf4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80cf4:	4b3d      	ldr	r3, [pc, #244]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80cf8:	f003 0303 	and.w	r3, r3, #3
   80cfc:	2b03      	cmp	r3, #3
   80cfe:	d80e      	bhi.n	80d1e <SystemCoreClockUpdate+0x2a>
   80d00:	e8df f003 	tbb	[pc, r3]
   80d04:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d08:	4b39      	ldr	r3, [pc, #228]	; (80df0 <SystemCoreClockUpdate+0xfc>)
   80d0a:	695b      	ldr	r3, [r3, #20]
   80d0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d10:	bf14      	ite	ne
   80d12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d1a:	4b36      	ldr	r3, [pc, #216]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d1c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80d1e:	4b33      	ldr	r3, [pc, #204]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d26:	2b70      	cmp	r3, #112	; 0x70
   80d28:	d057      	beq.n	80dda <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80d2a:	4b30      	ldr	r3, [pc, #192]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80d2e:	4931      	ldr	r1, [pc, #196]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d30:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80d34:	680b      	ldr	r3, [r1, #0]
   80d36:	40d3      	lsrs	r3, r2
   80d38:	600b      	str	r3, [r1, #0]
   80d3a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d3c:	4b2b      	ldr	r3, [pc, #172]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80d3e:	6a1b      	ldr	r3, [r3, #32]
   80d40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d44:	d003      	beq.n	80d4e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d46:	4a2c      	ldr	r2, [pc, #176]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d48:	4b2a      	ldr	r3, [pc, #168]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d4a:	601a      	str	r2, [r3, #0]
   80d4c:	e7e7      	b.n	80d1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d4e:	4a2b      	ldr	r2, [pc, #172]	; (80dfc <SystemCoreClockUpdate+0x108>)
   80d50:	4b28      	ldr	r3, [pc, #160]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d52:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d54:	4b25      	ldr	r3, [pc, #148]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80d56:	6a1b      	ldr	r3, [r3, #32]
   80d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d5c:	2b10      	cmp	r3, #16
   80d5e:	d005      	beq.n	80d6c <SystemCoreClockUpdate+0x78>
   80d60:	2b20      	cmp	r3, #32
   80d62:	d1dc      	bne.n	80d1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80d64:	4a24      	ldr	r2, [pc, #144]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d66:	4b23      	ldr	r3, [pc, #140]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d68:	601a      	str	r2, [r3, #0]
				break;
   80d6a:	e7d8      	b.n	80d1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80d6c:	4a24      	ldr	r2, [pc, #144]	; (80e00 <SystemCoreClockUpdate+0x10c>)
   80d6e:	4b21      	ldr	r3, [pc, #132]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d70:	601a      	str	r2, [r3, #0]
				break;
   80d72:	e7d4      	b.n	80d1e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d74:	4b1d      	ldr	r3, [pc, #116]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80d76:	6a1b      	ldr	r3, [r3, #32]
   80d78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d7c:	d00c      	beq.n	80d98 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d7e:	4a1e      	ldr	r2, [pc, #120]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80d80:	4b1c      	ldr	r3, [pc, #112]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d82:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80d84:	4b19      	ldr	r3, [pc, #100]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d88:	f003 0303 	and.w	r3, r3, #3
   80d8c:	2b02      	cmp	r3, #2
   80d8e:	d016      	beq.n	80dbe <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80d90:	4a1c      	ldr	r2, [pc, #112]	; (80e04 <SystemCoreClockUpdate+0x110>)
   80d92:	4b18      	ldr	r3, [pc, #96]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d94:	601a      	str	r2, [r3, #0]
   80d96:	e7c2      	b.n	80d1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d98:	4a18      	ldr	r2, [pc, #96]	; (80dfc <SystemCoreClockUpdate+0x108>)
   80d9a:	4b16      	ldr	r3, [pc, #88]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80d9c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d9e:	4b13      	ldr	r3, [pc, #76]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80da0:	6a1b      	ldr	r3, [r3, #32]
   80da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80da6:	2b10      	cmp	r3, #16
   80da8:	d005      	beq.n	80db6 <SystemCoreClockUpdate+0xc2>
   80daa:	2b20      	cmp	r3, #32
   80dac:	d1ea      	bne.n	80d84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80dae:	4a12      	ldr	r2, [pc, #72]	; (80df8 <SystemCoreClockUpdate+0x104>)
   80db0:	4b10      	ldr	r3, [pc, #64]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80db2:	601a      	str	r2, [r3, #0]
				break;
   80db4:	e7e6      	b.n	80d84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80db6:	4a12      	ldr	r2, [pc, #72]	; (80e00 <SystemCoreClockUpdate+0x10c>)
   80db8:	4b0e      	ldr	r3, [pc, #56]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80dba:	601a      	str	r2, [r3, #0]
				break;
   80dbc:	e7e2      	b.n	80d84 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dbe:	4a0b      	ldr	r2, [pc, #44]	; (80dec <SystemCoreClockUpdate+0xf8>)
   80dc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dc2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80dc4:	480b      	ldr	r0, [pc, #44]	; (80df4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dc6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80dca:	6803      	ldr	r3, [r0, #0]
   80dcc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dd0:	b2d2      	uxtb	r2, r2
   80dd2:	fbb3 f3f2 	udiv	r3, r3, r2
   80dd6:	6003      	str	r3, [r0, #0]
   80dd8:	e7a1      	b.n	80d1e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80dda:	4a06      	ldr	r2, [pc, #24]	; (80df4 <SystemCoreClockUpdate+0x100>)
   80ddc:	6813      	ldr	r3, [r2, #0]
   80dde:	490a      	ldr	r1, [pc, #40]	; (80e08 <SystemCoreClockUpdate+0x114>)
   80de0:	fba1 1303 	umull	r1, r3, r1, r3
   80de4:	085b      	lsrs	r3, r3, #1
   80de6:	6013      	str	r3, [r2, #0]
   80de8:	4770      	bx	lr
   80dea:	bf00      	nop
   80dec:	400e0600 	.word	0x400e0600
   80df0:	400e1a10 	.word	0x400e1a10
   80df4:	20070138 	.word	0x20070138
   80df8:	00b71b00 	.word	0x00b71b00
   80dfc:	003d0900 	.word	0x003d0900
   80e00:	007a1200 	.word	0x007a1200
   80e04:	0e4e1c00 	.word	0x0e4e1c00
   80e08:	aaaaaaab 	.word	0xaaaaaaab

00080e0c <main>:
#include <asf.h>
#include "uart.h"
#include "can_controller.h"

int main (void)
{
   80e0c:	b570      	push	{r4, r5, r6, lr}
   80e0e:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80e10:	4b1b      	ldr	r3, [pc, #108]	; (80e80 <main+0x74>)
   80e12:	4798      	blx	r3
	board_init();
   80e14:	4b1b      	ldr	r3, [pc, #108]	; (80e84 <main+0x78>)
   80e16:	4798      	blx	r3
	configure_uart();
   80e18:	4b1b      	ldr	r3, [pc, #108]	; (80e88 <main+0x7c>)
   80e1a:	4798      	blx	r3
	
	int d = can_init_def_tx_rx_mb(0x00290561);
   80e1c:	481b      	ldr	r0, [pc, #108]	; (80e8c <main+0x80>)
   80e1e:	4b1c      	ldr	r3, [pc, #112]	; (80e90 <main+0x84>)
   80e20:	4798      	blx	r3
	uart_putchar(d);
   80e22:	4c1c      	ldr	r4, [pc, #112]	; (80e94 <main+0x88>)
   80e24:	47a0      	blx	r4
	uart_putchar('\r');
   80e26:	200d      	movs	r0, #13
   80e28:	47a0      	blx	r4
	uart_putchar('\n');
   80e2a:	200a      	movs	r0, #10
   80e2c:	47a0      	blx	r4
	
	PIOA -> PIO_PER |= PIO_PER_P19;	//enable pin
   80e2e:	4b1a      	ldr	r3, [pc, #104]	; (80e98 <main+0x8c>)
   80e30:	681a      	ldr	r2, [r3, #0]
   80e32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80e36:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P19; // set as output
   80e38:	691a      	ldr	r2, [r3, #16]
   80e3a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80e3e:	611a      	str	r2, [r3, #16]
	PIOA -> PIO_SODR |= PIO_SODR_P19; // set high
   80e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80e42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80e46:	631a      	str	r2, [r3, #48]	; 0x30
	
	CAN_MESSAGE msg;
	msg.id = 12;
   80e48:	230c      	movs	r3, #12
   80e4a:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.data_length = 2;
   80e4e:	2302      	movs	r3, #2
   80e50:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.data[0] = 'c';
   80e54:	2363      	movs	r3, #99	; 0x63
   80e56:	f88d 3008 	strb.w	r3, [sp, #8]
	msg.data[1] = 'f';
   80e5a:	2366      	movs	r3, #102	; 0x66
   80e5c:	f88d 3009 	strb.w	r3, [sp, #9]
	
	
	while(1){
		char c = can_send(&msg, 0);
   80e60:	4e0e      	ldr	r6, [pc, #56]	; (80e9c <main+0x90>)
		uart_putchar('\r');
		uart_putchar('\n');
		
		
		
		delay_ms(1000);
   80e62:	4d0f      	ldr	r5, [pc, #60]	; (80ea0 <main+0x94>)
		char c = can_send(&msg, 0);
   80e64:	2100      	movs	r1, #0
   80e66:	a801      	add	r0, sp, #4
   80e68:	47b0      	blx	r6
		uart_putchar(c+0x30);
   80e6a:	3030      	adds	r0, #48	; 0x30
   80e6c:	b2c0      	uxtb	r0, r0
   80e6e:	47a0      	blx	r4
		uart_putchar('\r');
   80e70:	200d      	movs	r0, #13
   80e72:	47a0      	blx	r4
		uart_putchar('\n');
   80e74:	200a      	movs	r0, #10
   80e76:	47a0      	blx	r4
		delay_ms(1000);
   80e78:	4628      	mov	r0, r5
   80e7a:	4b0a      	ldr	r3, [pc, #40]	; (80ea4 <main+0x98>)
   80e7c:	4798      	blx	r3
   80e7e:	e7f1      	b.n	80e64 <main+0x58>
   80e80:	000807c1 	.word	0x000807c1
   80e84:	00080825 	.word	0x00080825
   80e88:	000806cd 	.word	0x000806cd
   80e8c:	00290561 	.word	0x00290561
   80e90:	00080251 	.word	0x00080251
   80e94:	00080735 	.word	0x00080735
   80e98:	400e0e00 	.word	0x400e0e00
   80e9c:	00080261 	.word	0x00080261
   80ea0:	005b8d80 	.word	0x005b8d80
   80ea4:	20070001 	.word	0x20070001

00080ea8 <__libc_init_array>:
   80ea8:	b570      	push	{r4, r5, r6, lr}
   80eaa:	4e0f      	ldr	r6, [pc, #60]	; (80ee8 <__libc_init_array+0x40>)
   80eac:	4d0f      	ldr	r5, [pc, #60]	; (80eec <__libc_init_array+0x44>)
   80eae:	1b76      	subs	r6, r6, r5
   80eb0:	10b6      	asrs	r6, r6, #2
   80eb2:	bf18      	it	ne
   80eb4:	2400      	movne	r4, #0
   80eb6:	d005      	beq.n	80ec4 <__libc_init_array+0x1c>
   80eb8:	3401      	adds	r4, #1
   80eba:	f855 3b04 	ldr.w	r3, [r5], #4
   80ebe:	4798      	blx	r3
   80ec0:	42a6      	cmp	r6, r4
   80ec2:	d1f9      	bne.n	80eb8 <__libc_init_array+0x10>
   80ec4:	4e0a      	ldr	r6, [pc, #40]	; (80ef0 <__libc_init_array+0x48>)
   80ec6:	4d0b      	ldr	r5, [pc, #44]	; (80ef4 <__libc_init_array+0x4c>)
   80ec8:	f000 f8d2 	bl	81070 <_init>
   80ecc:	1b76      	subs	r6, r6, r5
   80ece:	10b6      	asrs	r6, r6, #2
   80ed0:	bf18      	it	ne
   80ed2:	2400      	movne	r4, #0
   80ed4:	d006      	beq.n	80ee4 <__libc_init_array+0x3c>
   80ed6:	3401      	adds	r4, #1
   80ed8:	f855 3b04 	ldr.w	r3, [r5], #4
   80edc:	4798      	blx	r3
   80ede:	42a6      	cmp	r6, r4
   80ee0:	d1f9      	bne.n	80ed6 <__libc_init_array+0x2e>
   80ee2:	bd70      	pop	{r4, r5, r6, pc}
   80ee4:	bd70      	pop	{r4, r5, r6, pc}
   80ee6:	bf00      	nop
   80ee8:	0008107c 	.word	0x0008107c
   80eec:	0008107c 	.word	0x0008107c
   80ef0:	00081084 	.word	0x00081084
   80ef4:	0008107c 	.word	0x0008107c

00080ef8 <register_fini>:
   80ef8:	4b02      	ldr	r3, [pc, #8]	; (80f04 <register_fini+0xc>)
   80efa:	b113      	cbz	r3, 80f02 <register_fini+0xa>
   80efc:	4802      	ldr	r0, [pc, #8]	; (80f08 <register_fini+0x10>)
   80efe:	f000 b805 	b.w	80f0c <atexit>
   80f02:	4770      	bx	lr
   80f04:	00000000 	.word	0x00000000
   80f08:	00080f19 	.word	0x00080f19

00080f0c <atexit>:
   80f0c:	2300      	movs	r3, #0
   80f0e:	4601      	mov	r1, r0
   80f10:	461a      	mov	r2, r3
   80f12:	4618      	mov	r0, r3
   80f14:	f000 b81e 	b.w	80f54 <__register_exitproc>

00080f18 <__libc_fini_array>:
   80f18:	b538      	push	{r3, r4, r5, lr}
   80f1a:	4c0a      	ldr	r4, [pc, #40]	; (80f44 <__libc_fini_array+0x2c>)
   80f1c:	4d0a      	ldr	r5, [pc, #40]	; (80f48 <__libc_fini_array+0x30>)
   80f1e:	1b64      	subs	r4, r4, r5
   80f20:	10a4      	asrs	r4, r4, #2
   80f22:	d00a      	beq.n	80f3a <__libc_fini_array+0x22>
   80f24:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80f28:	3b01      	subs	r3, #1
   80f2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80f2e:	3c01      	subs	r4, #1
   80f30:	f855 3904 	ldr.w	r3, [r5], #-4
   80f34:	4798      	blx	r3
   80f36:	2c00      	cmp	r4, #0
   80f38:	d1f9      	bne.n	80f2e <__libc_fini_array+0x16>
   80f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80f3e:	f000 b8a1 	b.w	81084 <_fini>
   80f42:	bf00      	nop
   80f44:	00081094 	.word	0x00081094
   80f48:	00081090 	.word	0x00081090

00080f4c <__retarget_lock_acquire_recursive>:
   80f4c:	4770      	bx	lr
   80f4e:	bf00      	nop

00080f50 <__retarget_lock_release_recursive>:
   80f50:	4770      	bx	lr
   80f52:	bf00      	nop

00080f54 <__register_exitproc>:
   80f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80f58:	4d2c      	ldr	r5, [pc, #176]	; (8100c <__register_exitproc+0xb8>)
   80f5a:	4606      	mov	r6, r0
   80f5c:	6828      	ldr	r0, [r5, #0]
   80f5e:	4698      	mov	r8, r3
   80f60:	460f      	mov	r7, r1
   80f62:	4691      	mov	r9, r2
   80f64:	f7ff fff2 	bl	80f4c <__retarget_lock_acquire_recursive>
   80f68:	4b29      	ldr	r3, [pc, #164]	; (81010 <__register_exitproc+0xbc>)
   80f6a:	681c      	ldr	r4, [r3, #0]
   80f6c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80f70:	2b00      	cmp	r3, #0
   80f72:	d03e      	beq.n	80ff2 <__register_exitproc+0x9e>
   80f74:	685a      	ldr	r2, [r3, #4]
   80f76:	2a1f      	cmp	r2, #31
   80f78:	dc1c      	bgt.n	80fb4 <__register_exitproc+0x60>
   80f7a:	f102 0e01 	add.w	lr, r2, #1
   80f7e:	b176      	cbz	r6, 80f9e <__register_exitproc+0x4a>
   80f80:	2101      	movs	r1, #1
   80f82:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80f86:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80f8a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80f8e:	4091      	lsls	r1, r2
   80f90:	4308      	orrs	r0, r1
   80f92:	2e02      	cmp	r6, #2
   80f94:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80f98:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80f9c:	d023      	beq.n	80fe6 <__register_exitproc+0x92>
   80f9e:	3202      	adds	r2, #2
   80fa0:	f8c3 e004 	str.w	lr, [r3, #4]
   80fa4:	6828      	ldr	r0, [r5, #0]
   80fa6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80faa:	f7ff ffd1 	bl	80f50 <__retarget_lock_release_recursive>
   80fae:	2000      	movs	r0, #0
   80fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80fb4:	4b17      	ldr	r3, [pc, #92]	; (81014 <__register_exitproc+0xc0>)
   80fb6:	b30b      	cbz	r3, 80ffc <__register_exitproc+0xa8>
   80fb8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80fbc:	f3af 8000 	nop.w
   80fc0:	4603      	mov	r3, r0
   80fc2:	b1d8      	cbz	r0, 80ffc <__register_exitproc+0xa8>
   80fc4:	2000      	movs	r0, #0
   80fc6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80fca:	f04f 0e01 	mov.w	lr, #1
   80fce:	6058      	str	r0, [r3, #4]
   80fd0:	6019      	str	r1, [r3, #0]
   80fd2:	4602      	mov	r2, r0
   80fd4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80fd8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80fdc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80fe0:	2e00      	cmp	r6, #0
   80fe2:	d0dc      	beq.n	80f9e <__register_exitproc+0x4a>
   80fe4:	e7cc      	b.n	80f80 <__register_exitproc+0x2c>
   80fe6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80fea:	4301      	orrs	r1, r0
   80fec:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80ff0:	e7d5      	b.n	80f9e <__register_exitproc+0x4a>
   80ff2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80ff6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ffa:	e7bb      	b.n	80f74 <__register_exitproc+0x20>
   80ffc:	6828      	ldr	r0, [r5, #0]
   80ffe:	f7ff ffa7 	bl	80f50 <__retarget_lock_release_recursive>
   81002:	f04f 30ff 	mov.w	r0, #4294967295
   81006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8100a:	bf00      	nop
   8100c:	20070568 	.word	0x20070568
   81010:	0008106c 	.word	0x0008106c
   81014:	00000000 	.word	0x00000000
   81018:	304e4143 	.word	0x304e4143
   8101c:	73656d20 	.word	0x73656d20
   81020:	65676173 	.word	0x65676173
   81024:	72726120 	.word	0x72726120
   81028:	64657669 	.word	0x64657669
   8102c:	206e6920 	.word	0x206e6920
   81030:	2d6e6f6e 	.word	0x2d6e6f6e
   81034:	64657375 	.word	0x64657375
   81038:	69616d20 	.word	0x69616d20
   8103c:	786f626c 	.word	0x786f626c
   81040:	00000d0a 	.word	0x00000d0a
   81044:	6c756e28 	.word	0x6c756e28
   81048:	0000296c 	.word	0x0000296c
   8104c:	3a525245 	.word	0x3a525245
   81050:	52415520 	.word	0x52415520
   81054:	58522054 	.word	0x58522054
   81058:	66756220 	.word	0x66756220
   8105c:	20726566 	.word	0x20726566
   81060:	66207369 	.word	0x66207369
   81064:	0a6c6c75 	.word	0x0a6c6c75
   81068:	0000000d 	.word	0x0000000d

0008106c <_global_impure_ptr>:
   8106c:	20070140                                @.. 

00081070 <_init>:
   81070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81072:	bf00      	nop
   81074:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81076:	bc08      	pop	{r3}
   81078:	469e      	mov	lr, r3
   8107a:	4770      	bx	lr

0008107c <__init_array_start>:
   8107c:	00080ef9 	.word	0x00080ef9

00081080 <__frame_dummy_init_array_entry>:
   81080:	00080119                                ....

00081084 <_fini>:
   81084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81086:	bf00      	nop
   81088:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8108a:	bc08      	pop	{r3}
   8108c:	469e      	mov	lr, r3
   8108e:	4770      	bx	lr

00081090 <__fini_array_start>:
   81090:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	2007063c                                <.. 
