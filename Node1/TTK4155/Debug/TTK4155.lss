
TTK4155.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  000017c2  00001856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800252  00800252  000019a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aa2  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a5  00000000  00000000  0000475a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131c  00000000  00000000  00005aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000690  00000000  00000000  00006e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000908  00000000  00000000  000074ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000189d  00000000  00000000  00007db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00009651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_init+0x80>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 ec       	ldi	r30, 0xC2	; 194
     37c:	f7 e1       	ldi	r31, 0x17	; 23
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 35       	cpi	r26, 0x52	; 82
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e5       	ldi	r26, 0x52	; 82
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 36       	cpi	r26, 0x62	; 98
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 98 04 	call	0x930	; 0x930 <main>
     39e:	0c 94 df 0b 	jmp	0x17be	; 0x17be <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
 */
volatile char* ext_adc = ADC_ADDRESS;

void adc_init()
{
	SFIOR = 0x01;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 bf       	out	0x30, r24	; 48
	// PB0 as OUTPUT
	DDRB = 0x01;
     3aa:	87 bb       	out	0x17, r24	; 23
	// PORTB = 0x01;
	
	// CTC, Toggle OC0 on compare match, no pre-scaler
	TCCR0 |= (1<<WGM01) | (1<<COM00) | (1<<CS00);
     3ac:	83 b7       	in	r24, 0x33	; 51
     3ae:	89 61       	ori	r24, 0x19	; 25
     3b0:	83 bf       	out	0x33, r24	; 51
	
	// Setting Output Compare Register to force the oscillator to 500kHz
	// Pin n.1 (OC0) is used
	OCR0 = 0x04;
     3b2:	84 e0       	ldi	r24, 0x04	; 4
     3b4:	81 bf       	out	0x31, r24	; 49
     3b6:	08 95       	ret

000003b8 <adc_read>:
	uint8_t value = 0;
	
	// Setting ADC mode for multiplexer configuration (page 8 of ADC datasheet)
	// setting channels
	// for channel 0 uint8_t adc_mode = 0b1000 0001;
	uint8_t adc_mode = (1 << SINGLE_CHANNEL_SAMPLE) | (channel);
     3b8:	80 68       	ori	r24, 0x80	; 128
	
	ext_adc[offset_adc] = adc_mode;
     3ba:	e1 e0       	ldi	r30, 0x01	; 1
     3bc:	f4 e1       	ldi	r31, 0x14	; 20
     3be:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	81 ee       	ldi	r24, 0xE1	; 225
     3c2:	94 e0       	ldi	r25, 0x04	; 4
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <adc_read+0xc>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <adc_read+0x12>
     3ca:	00 00       	nop

	// Wait for conversion
	_delay_us(5000);
	
	// Getting value from ADC
	value = ext_adc[offset_adc];
     3cc:	80 81       	ld	r24, Z
	
	// Overflow detection
	if(value > 255)
		value = 255;
	else if(value <= 0)
     3ce:	81 11       	cpse	r24, r1
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <adc_read+0x1c>
		value = 1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
	
	// Returns the value inside the ADC
	return value;
}
     3d4:	08 95       	ret

000003d6 <CAN_init>:
#include "CAN.h"

uint8_t you_lose = 0;

void CAN_init(uint8_t mode)
{
     3d6:	cf 93       	push	r28
     3d8:	c8 2f       	mov	r28, r24
	MCP2515_reset();
     3da:	0e 94 ad 03 	call	0x75a	; 0x75a <MCP2515_reset>
	
	printf("%x", MCP2515_read(MCP_CANSTAT));
     3de:	8e e0       	ldi	r24, 0x0E	; 14
     3e0:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     3e4:	1f 92       	push	r1
     3e6:	8f 93       	push	r24
     3e8:	86 e3       	ldi	r24, 0x36	; 54
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <printf>
	
	MCP2515_write(MCP_CNF3, 0b00000001);
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	88 e2       	ldi	r24, 0x28	; 40
     3f8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	MCP2515_write(MCP_CNF2, 0b10110101);
     3fc:	65 eb       	ldi	r22, 0xB5	; 181
     3fe:	89 e2       	ldi	r24, 0x29	; 41
     400:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	MCP2515_write(MCP_CNF1, 0b00000011);
     404:	63 e0       	ldi	r22, 0x03	; 3
     406:	8a e2       	ldi	r24, 0x2A	; 42
     408:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	
	MCP2515_set_mode(mode);
     40c:	8c 2f       	mov	r24, r28
     40e:	0e 94 b5 03 	call	0x76a	; 0x76a <MCP2515_set_mode>
	
	// Enables output interrupt
	MCP2515_write(MCP_CANINTE, 0X03);	
     412:	63 e0       	ldi	r22, 0x03	; 3
     414:	8b e2       	ldi	r24, 0x2B	; 43
     416:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
}
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <CAN_send>:

void CAN_send(CAN_message message)
{
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	2c 97       	sbiw	r28, 0x0c	; 12
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	e9 82       	std	Y+1, r14	; 0x01
     444:	fa 82       	std	Y+2, r15	; 0x02
     446:	0b 83       	std	Y+3, r16	; 0x03
     448:	1c 83       	std	Y+4, r17	; 0x04
     44a:	2d 83       	std	Y+5, r18	; 0x05
     44c:	3e 83       	std	Y+6, r19	; 0x06
     44e:	4f 83       	std	Y+7, r20	; 0x07
     450:	58 87       	std	Y+8, r21	; 0x08
     452:	69 87       	std	Y+9, r22	; 0x09
     454:	7a 87       	std	Y+10, r23	; 0x0a
     456:	8b 87       	std	Y+11, r24	; 0x0b
     458:	9c 87       	std	Y+12, r25	; 0x0c
     45a:	e9 80       	ldd	r14, Y+1	; 0x01
     45c:	fa 80       	ldd	r15, Y+2	; 0x02
     45e:	0b 81       	ldd	r16, Y+3	; 0x03
     460:	1c 81       	ldd	r17, Y+4	; 0x04
	// Writing ID registers
	MCP2515_write(MCP_TXB0SIDH, message.id >> 3);
     462:	b8 01       	movw	r22, r16
     464:	76 95       	lsr	r23
     466:	67 95       	ror	r22
     468:	76 95       	lsr	r23
     46a:	67 95       	ror	r22
     46c:	76 95       	lsr	r23
     46e:	67 95       	ror	r22
     470:	81 e3       	ldi	r24, 0x31	; 49
     472:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, message.id << 5);
     476:	60 2f       	mov	r22, r16
     478:	62 95       	swap	r22
     47a:	66 0f       	add	r22, r22
     47c:	60 7e       	andi	r22, 0xE0	; 224
     47e:	82 e3       	ldi	r24, 0x32	; 50
     480:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	// Setting message length
	MCP2515_write(MCP_TXB0DLC, message.length);
     484:	6e 2d       	mov	r22, r14
     486:	85 e3       	ldi	r24, 0x35	; 53
     488:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	
	// Sending message
	for(uint8_t i = 0; i < (message.length); i++){
     48c:	e1 14       	cp	r14, r1
     48e:	f1 04       	cpc	r15, r1
     490:	91 f0       	breq	.+36     	; 0x4b6 <CAN_send+0x90>
     492:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXB0D0 + i, message.data[i]);
     494:	e5 e0       	ldi	r30, 0x05	; 5
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ec 0f       	add	r30, r28
     49a:	fd 1f       	adc	r31, r29
     49c:	e1 0f       	add	r30, r17
     49e:	f1 1d       	adc	r31, r1
     4a0:	60 81       	ld	r22, Z
     4a2:	86 e3       	ldi	r24, 0x36	; 54
     4a4:	81 0f       	add	r24, r17
     4a6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, message.id << 5);
	// Setting message length
	MCP2515_write(MCP_TXB0DLC, message.length);
	
	// Sending message
	for(uint8_t i = 0; i < (message.length); i++){
     4aa:	1f 5f       	subi	r17, 0xFF	; 255
     4ac:	81 2f       	mov	r24, r17
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	8e 15       	cp	r24, r14
     4b2:	9f 05       	cpc	r25, r15
     4b4:	78 f3       	brcs	.-34     	; 0x494 <CAN_send+0x6e>
		MCP2515_write(MCP_TXB0D0 + i, message.data[i]);
		//printf("\r\nSENDING MESSAGE: \r\n data: %d\r\n", message.data[i]);
	}
	//printf("\r\n");
	// Enables sending
	MCP2515_RTS(MCP_RTS_TX0);
     4b6:	81 e8       	ldi	r24, 0x81	; 129
     4b8:	0e 94 65 03 	call	0x6ca	; 0x6ca <MCP2515_RTS>
}
     4bc:	2c 96       	adiw	r28, 0x0c	; 12
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	08 95       	ret

000004d6 <CAN_debug_print>:
	}
}

void CAN_debug_print(uint8_t id, char data, uint8_t position)
{
	printf("INCOMING DATA BYTE: \r\n data[%d]: %c \r\n id: %d\r\n", position, data, id);
     4d6:	1f 92       	push	r1
     4d8:	8f 93       	push	r24
     4da:	1f 92       	push	r1
     4dc:	6f 93       	push	r22
     4de:	1f 92       	push	r1
     4e0:	4f 93       	push	r20
     4e2:	89 e3       	ldi	r24, 0x39	; 57
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	0e 94 8d 07 	call	0xf1a	; 0xf1a <printf>
}
     4ee:	8d b7       	in	r24, 0x3d	; 61
     4f0:	9e b7       	in	r25, 0x3e	; 62
     4f2:	08 96       	adiw	r24, 0x08	; 8
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	9e bf       	out	0x3e, r25	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	8d bf       	out	0x3d, r24	; 61
     4fe:	08 95       	ret

00000500 <CAN_receive>:
	// Enables sending
	MCP2515_RTS(MCP_RTS_TX0);
}


void CAN_receive(void){
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	2c 97       	sbiw	r28, 0x0c	; 12
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
	CAN_message msg;

	// Checks buffer0 
	if(MCP2515_read_status() & 0x01){
     51e:	0e 94 85 03 	call	0x70a	; 0x70a <MCP2515_read_status>
     522:	80 ff       	sbrs	r24, 0
     524:	36 c0       	rjmp	.+108    	; 0x592 <CAN_receive+0x92>
		// Reading ID
		msg.id = (MCP2515_read(MCP_RXB0SIDH) << 3)|(MCP2515_read(MCP_RXB0SIDL) >> 5);
     526:	81 e6       	ldi	r24, 0x61	; 97
     528:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     52c:	e8 2e       	mov	r14, r24
     52e:	82 e6       	ldi	r24, 0x62	; 98
     530:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     534:	f1 2c       	mov	r15, r1
     536:	ee 0c       	add	r14, r14
     538:	ff 1c       	adc	r15, r15
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	ee 0c       	add	r14, r14
     540:	ff 1c       	adc	r15, r15
     542:	82 95       	swap	r24
     544:	86 95       	lsr	r24
     546:	87 70       	andi	r24, 0x07	; 7
     548:	e8 2a       	or	r14, r24
		// Reading message length
		msg.length = MCP2515_read(MCP_RXB0DLC);
     54a:	85 e6       	ldi	r24, 0x65	; 101
     54c:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     550:	c8 2e       	mov	r12, r24
     552:	d1 2c       	mov	r13, r1
		// Reading message
		for(uint8_t i = 0; i < (msg.length); i++){
     554:	c1 14       	cp	r12, r1
     556:	d1 04       	cpc	r13, r1
     558:	b9 f0       	breq	.+46     	; 0x588 <CAN_receive+0x88>
     55a:	10 e0       	ldi	r17, 0x00	; 0
			msg.data[i] = MCP2515_read(MCP_RXB0D0 + i);
     55c:	86 e6       	ldi	r24, 0x66	; 102
     55e:	81 0f       	add	r24, r17
     560:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     564:	68 2f       	mov	r22, r24
     566:	e5 e0       	ldi	r30, 0x05	; 5
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ec 0f       	add	r30, r28
     56c:	fd 1f       	adc	r31, r29
     56e:	e1 0f       	add	r30, r17
     570:	f1 1d       	adc	r31, r1
     572:	80 83       	st	Z, r24
			CAN_debug_print(msg.id, msg.data[i], i);
     574:	41 2f       	mov	r20, r17
     576:	8e 2d       	mov	r24, r14
     578:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <CAN_debug_print>
		// Reading ID
		msg.id = (MCP2515_read(MCP_RXB0SIDH) << 3)|(MCP2515_read(MCP_RXB0SIDL) >> 5);
		// Reading message length
		msg.length = MCP2515_read(MCP_RXB0DLC);
		// Reading message
		for(uint8_t i = 0; i < (msg.length); i++){
     57c:	1f 5f       	subi	r17, 0xFF	; 255
     57e:	21 2f       	mov	r18, r17
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	2c 15       	cp	r18, r12
     584:	3d 05       	cpc	r19, r13
     586:	50 f3       	brcs	.-44     	; 0x55c <CAN_receive+0x5c>
			msg.data[i] = MCP2515_read(MCP_RXB0D0 + i);
			CAN_debug_print(msg.id, msg.data[i], i);
		}
		// Clearing CANINTF to allow new message to be received
		MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	8c e2       	ldi	r24, 0x2C	; 44
     58e:	0e 94 93 03 	call	0x726	; 0x726 <MCP2515_bit_modify>
	}
	
	// Checks buffer1
	if(MCP2515_read_status() & 0x02){
     592:	0e 94 85 03 	call	0x70a	; 0x70a <MCP2515_read_status>
     596:	81 ff       	sbrs	r24, 1
     598:	36 c0       	rjmp	.+108    	; 0x606 <CAN_receive+0x106>
		// Reading ID
		msg.id = (MCP2515_read(MCP_RXB1SIDH) << 3)|(MCP2515_read(MCP_RXB1SIDL) >> 5);
     59a:	81 e7       	ldi	r24, 0x71	; 113
     59c:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     5a0:	e8 2e       	mov	r14, r24
     5a2:	82 e7       	ldi	r24, 0x72	; 114
     5a4:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     5a8:	f1 2c       	mov	r15, r1
     5aa:	ee 0c       	add	r14, r14
     5ac:	ff 1c       	adc	r15, r15
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	ee 0c       	add	r14, r14
     5b4:	ff 1c       	adc	r15, r15
     5b6:	82 95       	swap	r24
     5b8:	86 95       	lsr	r24
     5ba:	87 70       	andi	r24, 0x07	; 7
     5bc:	e8 2a       	or	r14, r24
		// Reading message length
		msg.length = MCP2515_read(MCP_RXB1DLC);
     5be:	85 e7       	ldi	r24, 0x75	; 117
     5c0:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     5c4:	c8 2e       	mov	r12, r24
     5c6:	d1 2c       	mov	r13, r1
		// Reading message
		for(uint8_t i = 0; i < (msg.length); i++){
     5c8:	c1 14       	cp	r12, r1
     5ca:	d1 04       	cpc	r13, r1
     5cc:	b9 f0       	breq	.+46     	; 0x5fc <CAN_receive+0xfc>
     5ce:	10 e0       	ldi	r17, 0x00	; 0
			msg.data[i] = MCP2515_read(MCP_RXB1D0 + i);
     5d0:	86 e7       	ldi	r24, 0x76	; 118
     5d2:	81 0f       	add	r24, r17
     5d4:	0e 94 3f 03 	call	0x67e	; 0x67e <MCP2515_read>
     5d8:	68 2f       	mov	r22, r24
     5da:	e5 e0       	ldi	r30, 0x05	; 5
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	ec 0f       	add	r30, r28
     5e0:	fd 1f       	adc	r31, r29
     5e2:	e1 0f       	add	r30, r17
     5e4:	f1 1d       	adc	r31, r1
     5e6:	80 83       	st	Z, r24
			CAN_debug_print(msg.id, msg.data[i], i);
     5e8:	41 2f       	mov	r20, r17
     5ea:	8e 2d       	mov	r24, r14
     5ec:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <CAN_debug_print>
		// Reading ID
		msg.id = (MCP2515_read(MCP_RXB1SIDH) << 3)|(MCP2515_read(MCP_RXB1SIDL) >> 5);
		// Reading message length
		msg.length = MCP2515_read(MCP_RXB1DLC);
		// Reading message
		for(uint8_t i = 0; i < (msg.length); i++){
     5f0:	1f 5f       	subi	r17, 0xFF	; 255
     5f2:	21 2f       	mov	r18, r17
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	2c 15       	cp	r18, r12
     5f8:	3d 05       	cpc	r19, r13
     5fa:	50 f3       	brcs	.-44     	; 0x5d0 <CAN_receive+0xd0>
			msg.data[i] = MCP2515_read(MCP_RXB1D0 + i);
			CAN_debug_print(msg.id, msg.data[i], i);
		}
		// Clearing CANINTF to allow new message to be received
		MCP2515_bit_modify(MCP_CANINTF,0x02, 0x00);
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	62 e0       	ldi	r22, 0x02	; 2
     600:	8c e2       	ldi	r24, 0x2C	; 44
     602:	0e 94 93 03 	call	0x726	; 0x726 <MCP2515_bit_modify>
	}
	
	if(msg.data[0] == 'x')
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	88 37       	cpi	r24, 0x78	; 120
     60a:	19 f4       	brne	.+6      	; 0x612 <CAN_receive+0x112>
	{
		you_lose = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end>
	}
}
     612:	2c 96       	adiw	r28, 0x0c	; 12
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	08 95       	ret

0000062e <__vector_1>:
{
	printf("INCOMING DATA BYTE: \r\n data[%d]: %c \r\n id: %d\r\n", position, data, id);
}

// Interrupt 0 trigger function
ISR(INT0_vect){
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
	printf("message received \r\n");
     650:	89 e6       	ldi	r24, 0x69	; 105
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 a3 07 	call	0xf46	; 0xf46 <puts>
	CAN_receive();
     658:	0e 94 80 02 	call	0x500	; 0x500 <CAN_receive>
     65c:	ff 91       	pop	r31
     65e:	ef 91       	pop	r30
     660:	bf 91       	pop	r27
     662:	af 91       	pop	r26
     664:	9f 91       	pop	r25
     666:	8f 91       	pop	r24
     668:	7f 91       	pop	r23
     66a:	6f 91       	pop	r22
     66c:	5f 91       	pop	r21
     66e:	4f 91       	pop	r20
     670:	3f 91       	pop	r19
     672:	2f 91       	pop	r18
     674:	0f 90       	pop	r0
     676:	0f be       	out	0x3f, r0	; 63
     678:	0f 90       	pop	r0
     67a:	1f 90       	pop	r1
     67c:	18 95       	reti

0000067e <MCP2515_read>:
#include "CAN_Controller.h"

uint8_t MCP2515_read(uint8_t address)
{
     67e:	cf 93       	push	r28
     680:	c8 2f       	mov	r28, r24
	uint8_t value;
	SPI_slave_enable();
     682:	0e 94 c5 06 	call	0xd8a	; 0xd8a <SPI_slave_enable>
	SPI_master_transmit(MCP_READ);
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_master_transmit(address);
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	value = SPI_master_read();
     692:	0e 94 d5 06 	call	0xdaa	; 0xdaa <SPI_master_read>
     696:	c8 2f       	mov	r28, r24
	SPI_slave_disable();
     698:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
	
	return value;
}
     69c:	8c 2f       	mov	r24, r28
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <MCP2515_write>:

void MCP2515_write(uint8_t address, uint8_t data)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	d8 2f       	mov	r29, r24
     6a8:	c6 2f       	mov	r28, r22
	SPI_slave_enable();
     6aa:	0e 94 c5 06 	call	0xd8a	; 0xd8a <SPI_slave_enable>
	SPI_master_transmit(MCP_WRITE);
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_master_transmit(address);
     6b4:	8d 2f       	mov	r24, r29
     6b6:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_master_transmit(data);
     6ba:	8c 2f       	mov	r24, r28
     6bc:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_slave_disable();
     6c0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <MCP2515_RTS>:

void MCP2515_RTS(uint8_t buffer)
{
     6ca:	cf 93       	push	r28
     6cc:	c8 2f       	mov	r28, r24
	if(buffer==MCP_RTS_TX0 || buffer==MCP_RTS_TX1 || buffer==MCP_RTS_TX2 || buffer==MCP_RTS_ALL)
     6ce:	8f e7       	ldi	r24, 0x7F	; 127
     6d0:	8c 0f       	add	r24, r28
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	20 f0       	brcs	.+8      	; 0x6de <MCP2515_RTS+0x14>
     6d6:	c4 38       	cpi	r28, 0x84	; 132
     6d8:	11 f0       	breq	.+4      	; 0x6de <MCP2515_RTS+0x14>
     6da:	c7 38       	cpi	r28, 0x87	; 135
     6dc:	41 f4       	brne	.+16     	; 0x6ee <MCP2515_RTS+0x24>
	{
		SPI_slave_enable();
     6de:	0e 94 c5 06 	call	0xd8a	; 0xd8a <SPI_slave_enable>
		SPI_master_transmit(buffer);
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
		SPI_slave_disable();
     6e8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <MCP2515_RTS+0x3c>
	} else {
		printf("%d is not a Buffer. RTS function error", buffer);
     6ee:	1f 92       	push	r1
     6f0:	cf 93       	push	r28
     6f2:	8c e7       	ldi	r24, 0x7C	; 124
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <printf>
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
	}
}
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <MCP2515_read_status>:

uint8_t MCP2515_read_status()
{
     70a:	cf 93       	push	r28
	uint8_t value;
	SPI_slave_enable();
     70c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <SPI_slave_enable>
	SPI_master_transmit(MCP_READ_STATUS);
     710:	80 ea       	ldi	r24, 0xA0	; 160
     712:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	value = SPI_master_read();
     716:	0e 94 d5 06 	call	0xdaa	; 0xdaa <SPI_master_read>
     71a:	c8 2f       	mov	r28, r24
	SPI_slave_disable();
     71c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
	
	return value;
}
     720:	8c 2f       	mov	r24, r28
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t address, uint8_t byte_mask, uint8_t data)
{
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	18 2f       	mov	r17, r24
     72e:	d6 2f       	mov	r29, r22
     730:	c4 2f       	mov	r28, r20
	SPI_slave_enable();
     732:	0e 94 c5 06 	call	0xd8a	; 0xd8a <SPI_slave_enable>
	SPI_master_transmit(MCP_BITMOD);
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_master_transmit(address);
     73c:	81 2f       	mov	r24, r17
     73e:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_master_transmit(byte_mask);
     742:	8d 2f       	mov	r24, r29
     744:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_master_transmit(data);
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_slave_disable();
     74e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	08 95       	ret

0000075a <MCP2515_reset>:

void MCP2515_reset()
{
	SPI_slave_enable();
     75a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <SPI_slave_enable>
	SPI_master_transmit(MCP_RESET);
     75e:	80 ec       	ldi	r24, 0xC0	; 192
     760:	0e 94 d1 06 	call	0xda2	; 0xda2 <SPI_master_transmit>
	SPI_slave_disable();
     764:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
     768:	08 95       	ret

0000076a <MCP2515_set_mode>:
}

void MCP2515_set_mode(uint8_t mode)
{
	MCP2515_bit_modify(MCP_CANCTRL, 0xE0, mode);
     76a:	48 2f       	mov	r20, r24
     76c:	60 ee       	ldi	r22, 0xE0	; 224
     76e:	8f e0       	ldi	r24, 0x0F	; 15
     770:	0e 94 93 03 	call	0x726	; 0x726 <MCP2515_bit_modify>
     774:	08 95       	ret

00000776 <interrupt_init>:
volatile uint8_t LEFT_BUTTON_PRESSED = 0;
volatile uint8_t JOYSTICK_BUTTON_PRESSED = 0;

void interrupt_init()
{
	cli();
     776:	f8 94       	cli
	
	//DDRE &= ~(1 << PE0);
	
	// Enable interrupt 0 on falling edge
	MCUCR |= (1 << ISC01);
     778:	85 b7       	in	r24, 0x35	; 53
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	85 bf       	out	0x35, r24	; 53
	
	// Enable interrupt 1 on rising edge
	MCUCR |= (1 << ISC11) | (1 << ISC10);
     77e:	85 b7       	in	r24, 0x35	; 53
     780:	8c 60       	ori	r24, 0x0C	; 12
     782:	85 bf       	out	0x35, r24	; 53
	
	// Enable interrupt 2 on rising edge
	EMCUCR |= (1 << ISC2);
     784:	86 b7       	in	r24, 0x36	; 54
     786:	81 60       	ori	r24, 0x01	; 1
     788:	86 bf       	out	0x36, r24	; 54
	
	// Enable interrupts on MCU
	GICR |= (1 << INT2) | (1 << INT1) | (1 << INT0);
     78a:	8b b7       	in	r24, 0x3b	; 59
     78c:	80 6e       	ori	r24, 0xE0	; 224
     78e:	8b bf       	out	0x3b, r24	; 59
	
	sei();
     790:	78 94       	sei
     792:	08 95       	ret

00000794 <interrupt_polling>:
// 		printf("RIGHT B\n\r");
// 		//Reset button variable
// 		RIGHT_BUTTON_PRESSED = 0;
// 	}
	
	if(LEFT_BUTTON_PRESSED)
     794:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <LEFT_BUTTON_PRESSED>
     798:	88 23       	and	r24, r24
     79a:	51 f0       	breq	.+20     	; 0x7b0 <interrupt_polling+0x1c>
	{
		// Do stuff
		printf("LEFT B\n\r");
     79c:	83 ea       	ldi	r24, 0xA3	; 163
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <printf>
		//Reset button variable
		LEFT_BUTTON_PRESSED = 0;
     7a8:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <LEFT_BUTTON_PRESSED>
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	08 95       	ret

000007b2 <__vector_3>:
	}
	
}

ISR(INT2_vect)
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	8f 93       	push	r24
	// Wakes the MCU up when right button is pressed
	RIGHT_BUTTON_PRESSED = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <RIGHT_BUTTON_PRESSED>
}
     7c4:	8f 91       	pop	r24
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <joystick_init>:
        dir.y_dir = DOWN;
    else
        dir.y_dir = Y_IDLE;

    return dir;
}
     7d0:	c2 9a       	sbi	0x18, 2	; 24
     7d2:	ba 9a       	sbi	0x17, 2	; 23
     7d4:	08 95       	ret

000007d6 <joystick_pos_read>:
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     7e8:	d8 2f       	mov	r29, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     7f0:	c8 2f       	mov	r28, r24
     7f2:	2d 2f       	mov	r18, r29
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	a4 e6       	ldi	r26, 0x64	; 100
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	0e 94 11 07 	call	0xe22	; 0xe22 <__umulhisi3>
     7fe:	c1 2c       	mov	r12, r1
     800:	d1 2c       	mov	r13, r1
     802:	76 01       	movw	r14, r12
     804:	ca 94       	dec	r12
     806:	a7 01       	movw	r20, r14
     808:	96 01       	movw	r18, r12
     80a:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divmodsi4>
     80e:	d2 2f       	mov	r29, r18
     810:	2c 2f       	mov	r18, r28
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	a4 e6       	ldi	r26, 0x64	; 100
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	0e 94 11 07 	call	0xe22	; 0xe22 <__umulhisi3>
     81c:	a7 01       	movw	r20, r14
     81e:	96 01       	movw	r18, r12
     820:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divmodsi4>
     824:	92 2f       	mov	r25, r18
     826:	8d 2f       	mov	r24, r29
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <joystick_menu_navigation>:

void joystick_menu_navigation(uint8_t* playing)
{
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	fc 01       	movw	r30, r24
    // Updating the button state
    button = !((PINB & (1 << PB2)) >> 2);
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	b2 99       	sbic	0x16, 2	; 22
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <button>

	if(*playing == 0)
     84a:	80 81       	ld	r24, Z
     84c:	81 11       	cpse	r24, r1
     84e:	64 c0       	rjmp	.+200    	; 0x918 <joystick_menu_navigation+0xe2>
     850:	ef 01       	movw	r28, r30
	{
		// Getting the position
		pos_t joystick_position = joystick_pos_read();
     852:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <joystick_pos_read>
     856:	19 2f       	mov	r17, r25

		if (button == 1 && stop == 0  && is_main_menu)
     858:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <button>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	a1 f5       	brne	.+104    	; 0x8c8 <joystick_menu_navigation+0x92>
     860:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <stop>
     864:	81 11       	cpse	r24, r1
     866:	58 c0       	rjmp	.+176    	; 0x918 <joystick_menu_navigation+0xe2>
     868:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <is_main_menu>
     86c:	88 23       	and	r24, r24
     86e:	09 f4       	brne	.+2      	; 0x872 <joystick_menu_navigation+0x3c>
     870:	53 c0       	rjmp	.+166    	; 0x918 <joystick_menu_navigation+0xe2>
		{
			// Button on menu is pressed
			printf("%d\r\n", menu_pos);
     872:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     876:	1f 92       	push	r1
     878:	8f 93       	push	r24
     87a:	84 e6       	ldi	r24, 0x64	; 100
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 8d 07 	call	0xf1a	; 0xf1a <printf>
		
			switch(menu_pos)
     886:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	59 f0       	breq	.+22     	; 0x8ac <joystick_menu_navigation+0x76>
     896:	83 30       	cpi	r24, 0x03	; 3
     898:	79 f0       	breq	.+30     	; 0x8b8 <joystick_menu_navigation+0x82>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	91 f4       	brne	.+36     	; 0x8c2 <joystick_menu_navigation+0x8c>
			{
				case PLAYMENU:
					*playing = 1;
     89e:	01 e0       	ldi	r16, 0x01	; 1
     8a0:	08 83       	st	Y, r16
					OLED_print_menu(PLAYMENU);
     8a2:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_menu>
					is_main_menu = 1; 
     8a6:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <is_main_menu>
					break;
     8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <joystick_menu_navigation+0x8c>
			
				case CREDITS:
					OLED_print_menu(CREDITS);
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_menu>
					is_main_menu = 0;
     8b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <is_main_menu>
					break;
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <joystick_menu_navigation+0x8c>
			
				case ABOUT:
					OLED_print_menu(ABOUT);
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_menu>
					is_main_menu = 0;
     8be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <is_main_menu>
			
				default:
					break;
			}
		
			stop = 1;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <stop>
		}

		// Navigating when button is NOT pressed
		if (button == 0 && is_main_menu)
     8c8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <button>
     8cc:	81 11       	cpse	r24, r1
     8ce:	24 c0       	rjmp	.+72     	; 0x918 <joystick_menu_navigation+0xe2>
     8d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <is_main_menu>
     8d4:	88 23       	and	r24, r24
     8d6:	01 f1       	breq	.+64     	; 0x918 <joystick_menu_navigation+0xe2>
		{
			// Going UP
			if (joystick_position.y > IDLE_Y_MAX)
     8d8:	11 35       	cpi	r17, 0x51	; 81
     8da:	68 f0       	brcs	.+26     	; 0x8f6 <joystick_menu_navigation+0xc0>
			{
				if (stop == 0 && button == 0)
     8dc:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <stop>
     8e0:	81 11       	cpse	r24, r1
     8e2:	1a c0       	rjmp	.+52     	; 0x918 <joystick_menu_navigation+0xe2>
				{
					OLED_update_menu(menu_pos - 1);
     8e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	0e 94 3d 06 	call	0xc7a	; 0xc7a <OLED_update_menu>
					stop = 1;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <stop>
     8f4:	11 c0       	rjmp	.+34     	; 0x918 <joystick_menu_navigation+0xe2>
				}
			}
			// Going DOWN
			else if (joystick_position.y < IDLE_Y_MIN)
     8f6:	14 31       	cpi	r17, 0x14	; 20
     8f8:	68 f4       	brcc	.+26     	; 0x914 <joystick_menu_navigation+0xde>
			{
				if (stop == 0 && button == 0)
     8fa:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <stop>
     8fe:	81 11       	cpse	r24, r1
     900:	0b c0       	rjmp	.+22     	; 0x918 <joystick_menu_navigation+0xe2>
				{
					OLED_update_menu(menu_pos + 1);
     902:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     906:	8f 5f       	subi	r24, 0xFF	; 255
     908:	0e 94 3d 06 	call	0xc7a	; 0xc7a <OLED_update_menu>
					stop = 1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <stop>
     912:	02 c0       	rjmp	.+4      	; 0x918 <joystick_menu_navigation+0xe2>
			// Position: IDLE
			else
			{
				if (button == 0)
				{
					stop = 0;
     914:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <stop>
				}
			}
		}
	}
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <SRAM_init>:
 * 
 */
void SRAM_init(void)
{
	/*Enabling memory reading*/
	MCUCR |= (1 << SRE);
     922:	85 b7       	in	r24, 0x35	; 53
     924:	80 68       	ori	r24, 0x80	; 128
     926:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     928:	80 b7       	in	r24, 0x30	; 48
     92a:	80 62       	ori	r24, 0x20	; 32
     92c:	80 bf       	out	0x30, r24	; 48
     92e:	08 95       	ret

00000930 <main>:
#include <stdlib.h>

uint8_t playing = 0;

int main(void)
{
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	68 97       	sbiw	r28, 0x18	; 24
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
     944:	8f e1       	ldi	r24, 0x1F	; 31
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 e5 06 	call	0xdca	; 0xdca <USART_Init>

	SRAM_init();
     94c:	0e 94 91 04 	call	0x922	; 0x922 <SRAM_init>

	OLED_init();
     950:	0e 94 61 05 	call	0xac2	; 0xac2 <OLED_init>
	
	interrupt_init();
     954:	0e 94 bb 03 	call	0x776	; 0x776 <interrupt_init>

	adc_init();
     958:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
		
	joystick_init();
     95c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <joystick_init>
		
	SPI_master_init();
     960:	0e 94 c9 06 	call	0xd92	; 0xd92 <SPI_master_init>
		
	OLED_print_menu(MAIN);
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 53 06 	call	0xca6	; 0xca6 <OLED_print_menu>
	
	CAN_init(MODE_NORMAL);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <CAN_init>
	
	CAN_message a;
	a.id = 2;
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	9c 83       	std	Y+4, r25	; 0x04
     976:	8b 83       	std	Y+3, r24	; 0x03
	a.length = 4;
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	
	pos_t j_pos;
	sliderpos_t slider_pos;
	
	printf("I'm NODE 1\r\n");
     980:	8e ed       	ldi	r24, 0xDE	; 222
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 a3 07 	call	0xf46	; 0xf46 <puts>
	
	// Re-initializing Node 2
	CAN_message msgs;
	msgs.id = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	08 2f       	mov	r16, r24
	msgs.length = 1;
     98c:	e8 2e       	mov	r14, r24
	msgs.data[0] = 0x01;
			
	CAN_send(msgs);
     98e:	f1 2c       	mov	r15, r1
     990:	10 e0       	ldi	r17, 0x00	; 0
     992:	21 e0       	ldi	r18, 0x01	; 1
     994:	3a 89       	ldd	r19, Y+18	; 0x12
     996:	4b 89       	ldd	r20, Y+19	; 0x13
     998:	5c 89       	ldd	r21, Y+20	; 0x14
     99a:	6d 89       	ldd	r22, Y+21	; 0x15
     99c:	7e 89       	ldd	r23, Y+22	; 0x16
     99e:	8f 89       	ldd	r24, Y+23	; 0x17
     9a0:	98 8d       	ldd	r25, Y+24	; 0x18
     9a2:	0e 94 13 02 	call	0x426	; 0x426 <CAN_send>
			
			CAN_send(a);	
			
			//print_joystick_position();
			
			printf("%d \r\n", adc_read(0x01));
     9a6:	0f 2e       	mov	r0, r31
     9a8:	fa ee       	ldi	r31, 0xEA	; 234
     9aa:	8f 2e       	mov	r8, r31
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	9f 2e       	mov	r9, r31
     9b0:	f0 2d       	mov	r31, r0
	CAN_send(msgs);
	
	/* MAIN LOOP */
	while (1)
	{
		j_pos = joystick_pos_read();
     9b2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <joystick_pos_read>
     9b6:	b8 2e       	mov	r11, r24
     9b8:	c9 2e       	mov	r12, r25
		slider_pos = slider_pos_read();
     9ba:	0e 94 b9 06 	call	0xd72	; 0xd72 <slider_pos_read>
     9be:	d9 2e       	mov	r13, r25
		
		joystick_menu_navigation(&playing);	
     9c0:	87 e5       	ldi	r24, 0x57	; 87
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 1b 04 	call	0x836	; 0x836 <joystick_menu_navigation>
		
		interrupt_polling();
     9c8:	0e 94 ca 03 	call	0x794	; 0x794 <interrupt_polling>
		
		if(playing)
     9cc:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <playing>
     9d0:	88 23       	and	r24, r24
     9d2:	79 f3       	breq	.-34     	; 0x9b2 <main+0x82>
		{
			a.data[0] = j_pos.x;
			a.data[1] = j_pos.y;
			a.data[2] = button;
     9d4:	40 91 55 02 	lds	r20, 0x0255	; 0x800255 <button>
			a.data[3] = slider_pos.R;
			
			CAN_send(a);	
     9d8:	e9 80       	ldd	r14, Y+1	; 0x01
     9da:	fa 80       	ldd	r15, Y+2	; 0x02
     9dc:	0b 81       	ldd	r16, Y+3	; 0x03
     9de:	1c 81       	ldd	r17, Y+4	; 0x04
     9e0:	2b 2d       	mov	r18, r11
     9e2:	3c 2d       	mov	r19, r12
     9e4:	5d 2d       	mov	r21, r13
     9e6:	69 85       	ldd	r22, Y+9	; 0x09
     9e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ee:	0e 94 13 02 	call	0x426	; 0x426 <CAN_send>
			
			//print_joystick_position();
			
			printf("%d \r\n", adc_read(0x01));
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     9f8:	1f 92       	push	r1
     9fa:	8f 93       	push	r24
     9fc:	9f 92       	push	r9
     9fe:	8f 92       	push	r8
     a00:	0e 94 8d 07 	call	0xf1a	; 0xf1a <printf>
			
			if(you_lose)
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end>
     a10:	88 23       	and	r24, r24
     a12:	79 f2       	breq	.-98     	; 0x9b2 <main+0x82>
			{
				OLED_print_string("You lose", 8, 3);
     a14:	43 e0       	ldi	r20, 0x03	; 3
     a16:	68 e0       	ldi	r22, 0x08	; 8
     a18:	80 ef       	ldi	r24, 0xF0	; 240
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 0c 06 	call	0xc18	; 0xc18 <OLED_print_string>
     a20:	c8 cf       	rjmp	.-112    	; 0x9b2 <main+0x82>

00000a22 <OLED_goto_line>:
}

void OLED_goto_line(uint8_t line)
{

    OLED_write_command(0xB0 | line);
     a22:	80 6b       	ori	r24, 0xB0	; 176
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     a24:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     a28:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     a2c:	80 83       	st	Z, r24
     a2e:	08 95       	ret

00000a30 <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column)
{

    uint8_t numLow = column % 16;
     a30:	98 2f       	mov	r25, r24
     a32:	9f 70       	andi	r25, 0x0F	; 15
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     a34:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     a38:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     a3c:	90 83       	st	Z, r25
{

    uint8_t numLow = column % 16;
    uint8_t numHigh = column / 16;
    OLED_write_command(numLow);
    OLED_write_command(0x10 + numHigh);
     a3e:	82 95       	swap	r24
     a40:	8f 70       	andi	r24, 0x0F	; 15
     a42:	80 5f       	subi	r24, 0xF0	; 240
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     a44:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     a48:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     a4c:	80 83       	st	Z, r24
     a4e:	08 95       	ret

00000a50 <OLED_set_pos>:
    OLED_write_command(numLow);
    OLED_write_command(0x10 + numHigh);
}

void OLED_set_pos(uint8_t line, uint8_t column)
{
     a50:	cf 93       	push	r28
     a52:	c6 2f       	mov	r28, r22
    OLED_goto_line(line);
     a54:	0e 94 11 05 	call	0xa22	; 0xa22 <OLED_goto_line>
    OLED_goto_column(column);
     a58:	8c 2f       	mov	r24, r28
     a5a:	0e 94 18 05 	call	0xa30	; 0xa30 <OLED_goto_column>
}
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <OLED_fill_line>:

void OLED_fill_line(uint8_t line)
{
     a62:	cf 93       	push	r28
     a64:	c8 2f       	mov	r28, r24
    OLED_set_pos(line, 0);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	0e 94 28 05 	call	0xa50	; 0xa50 <OLED_set_pos>
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_data(uint8_t d)
{
    // Writing data to OLED
    OLED_DATA[0] = d;
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_DATA>
     a76:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_DATA+0x1>
     a7a:	20 83       	st	Z, r18
     a7c:	01 97       	sbiw	r24, 0x01	; 1

void OLED_fill_line(uint8_t line)
{
    OLED_set_pos(line, 0);

    for (int col = 0; col < 128; col++)
     a7e:	c9 f7       	brne	.-14     	; 0xa72 <OLED_fill_line+0x10>
    {
        OLED_write_data(~0b00000000);
    }
    OLED_goto_line(line);
     a80:	8c 2f       	mov	r24, r28
     a82:	0e 94 11 05 	call	0xa22	; 0xa22 <OLED_goto_line>
}
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <OLED_clear_all>:

void OLED_clear_all()
{
     a8a:	cf 93       	push	r28
    OLED_set_pos(0, 0);
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 28 05 	call	0xa50	; 0xa50 <OLED_set_pos>
    for (uint8_t lin = 0; lin < 8; lin++)
     a94:	c0 e0       	ldi	r28, 0x00	; 0
    {
        OLED_set_pos(lin, 0);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	8c 2f       	mov	r24, r28
     a9a:	0e 94 28 05 	call	0xa50	; 0xa50 <OLED_set_pos>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
}

void OLED_write_data(uint8_t d)
{
    // Writing data to OLED
    OLED_DATA[0] = d;
     aa0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_DATA>
     aa4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_DATA+0x1>
     aa8:	10 82       	st	Z, r1
{
    OLED_set_pos(0, 0);
    for (uint8_t lin = 0; lin < 8; lin++)
    {
        OLED_set_pos(lin, 0);
        for (uint8_t col = 0; col < 128; col++)
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	80 38       	cpi	r24, 0x80	; 128
     aae:	c1 f7       	brne	.-16     	; 0xaa0 <OLED_clear_all+0x16>
}

void OLED_clear_all()
{
    OLED_set_pos(0, 0);
    for (uint8_t lin = 0; lin < 8; lin++)
     ab0:	cf 5f       	subi	r28, 0xFF	; 255
     ab2:	c8 30       	cpi	r28, 0x08	; 8
     ab4:	81 f7       	brne	.-32     	; 0xa96 <OLED_clear_all+0xc>
        {
            OLED_write_data(0x00);
        }
    }

    OLED_set_pos(0, 0);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 28 05 	call	0xa50	; 0xa50 <OLED_set_pos>
}
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <OLED_init>:
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     ac2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     ac6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     aca:	8e ea       	ldi	r24, 0xAE	; 174
     acc:	80 83       	st	Z, r24
     ace:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     ad2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     ad6:	81 ea       	ldi	r24, 0xA1	; 161
     ad8:	80 83       	st	Z, r24
     ada:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     ade:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     ae2:	8a ed       	ldi	r24, 0xDA	; 218
     ae4:	80 83       	st	Z, r24
     ae6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     aea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     aee:	82 e1       	ldi	r24, 0x12	; 18
     af0:	80 83       	st	Z, r24
     af2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     af6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     afa:	88 ec       	ldi	r24, 0xC8	; 200
     afc:	80 83       	st	Z, r24
     afe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b02:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b06:	88 ea       	ldi	r24, 0xA8	; 168
     b08:	80 83       	st	Z, r24
     b0a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b0e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b12:	8f e3       	ldi	r24, 0x3F	; 63
     b14:	80 83       	st	Z, r24
     b16:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b1a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b1e:	85 ed       	ldi	r24, 0xD5	; 213
     b20:	80 83       	st	Z, r24
     b22:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b26:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	80 83       	st	Z, r24
     b2e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b32:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b36:	81 e8       	ldi	r24, 0x81	; 129
     b38:	80 83       	st	Z, r24
     b3a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b3e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b42:	80 e5       	ldi	r24, 0x50	; 80
     b44:	80 83       	st	Z, r24
     b46:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b4a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b4e:	89 ed       	ldi	r24, 0xD9	; 217
     b50:	80 83       	st	Z, r24
     b52:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b56:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b5a:	81 e2       	ldi	r24, 0x21	; 33
     b5c:	80 83       	st	Z, r24
     b5e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b62:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	80 83       	st	Z, r24
     b6a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b6e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	80 83       	st	Z, r24
     b76:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b7a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b7e:	8b ed       	ldi	r24, 0xDB	; 219
     b80:	80 83       	st	Z, r24
     b82:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b86:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b8a:	80 e3       	ldi	r24, 0x30	; 48
     b8c:	80 83       	st	Z, r24
     b8e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b92:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     b96:	8d ea       	ldi	r24, 0xAD	; 173
     b98:	80 83       	st	Z, r24
     b9a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     b9e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     ba2:	10 82       	st	Z, r1
     ba4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     ba8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     bac:	84 ea       	ldi	r24, 0xA4	; 164
     bae:	80 83       	st	Z, r24
     bb0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     bb4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     bb8:	86 ea       	ldi	r24, 0xA6	; 166
     bba:	80 83       	st	Z, r24
     bbc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     bc0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     bc4:	8f ea       	ldi	r24, 0xAF	; 175
     bc6:	80 83       	st	Z, r24

    OLED_write_command(0xA6); // Set normal display

    OLED_write_command(0xAF); // Set display on

    OLED_clear_all();
     bc8:	0e 94 45 05 	call	0xa8a	; 0xa8a <OLED_clear_all>
     bcc:	08 95       	ret

00000bce <OLED_print_char>:

    OLED_set_pos(0, 0);
}

void OLED_print_char(char c, uint8_t line, uint8_t col)
{
     bce:	cf 93       	push	r28
     bd0:	c8 2f       	mov	r28, r24
     bd2:	86 2f       	mov	r24, r22
    OLED_set_pos(line, col);
     bd4:	64 2f       	mov	r22, r20
     bd6:	0e 94 28 05 	call	0xa50	; 0xa50 <OLED_set_pos>
     bda:	2c 2f       	mov	r18, r28
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	f9 01       	movw	r30, r18
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e0 59       	subi	r30, 0x90	; 144
     bee:	f0 40       	sbci	r31, 0x00	; 0
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	28 58       	subi	r18, 0x88	; 136
     bfe:	30 40       	sbci	r19, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
    {
        // (c-32) is mapping the ascii table to the PROGMEM matrix
        // ex. space character is ASCII 32, 0 in the matrix
        // ex. 'A' is ASCII 65, 65-32=33 in the matrix
        OLED_write_data(pgm_read_byte(&(font8[c - 32][i])));
     c00:	84 91       	lpm	r24, Z
}

void OLED_write_data(uint8_t d)
{
    // Writing data to OLED
    OLED_DATA[0] = d;
     c02:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OLED_DATA>
     c06:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OLED_DATA+0x1>
     c0a:	8c 93       	st	X, r24
     c0c:	31 96       	adiw	r30, 0x01	; 1

void OLED_print_char(char c, uint8_t line, uint8_t col)
{
    OLED_set_pos(line, col);

    for (uint8_t i = 0; i < 8; i++)
     c0e:	e2 17       	cp	r30, r18
     c10:	f3 07       	cpc	r31, r19
     c12:	b1 f7       	brne	.-20     	; 0xc00 <OLED_print_char+0x32>
        // (c-32) is mapping the ascii table to the PROGMEM matrix
        // ex. space character is ASCII 32, 0 in the matrix
        // ex. 'A' is ASCII 65, 65-32=33 in the matrix
        OLED_write_data(pgm_read_byte(&(font8[c - 32][i])));
    }
}
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <OLED_print_string>:

void OLED_print_string(char *s, uint8_t length, uint8_t line)
{
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	d4 2f       	mov	r29, r20
    // Check if the string is too long, prints ~
    if (length * 8 > 128)
     c26:	26 2f       	mov	r18, r22
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	21 31       	cpi	r18, 0x11	; 17
     c2c:	31 05       	cpc	r19, r1
     c2e:	1c f4       	brge	.+6      	; 0xc36 <OLED_print_string+0x1e>
        OLED_print_char('~', line, 0);
        return 0;
    }

    // Printing character by character
    for (uint8_t i = 0; i < length; i++)
     c30:	61 11       	cpse	r22, r1
     c32:	07 c0       	rjmp	.+14     	; 0xc42 <OLED_print_string+0x2a>
     c34:	1b c0       	rjmp	.+54     	; 0xc6c <OLED_print_string+0x54>
void OLED_print_string(char *s, uint8_t length, uint8_t line)
{
    // Check if the string is too long, prints ~
    if (length * 8 > 128)
    {
        OLED_print_char('~', line, 0);
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	6d 2f       	mov	r22, r29
     c3a:	8e e7       	ldi	r24, 0x7E	; 126
     c3c:	0e 94 e7 05 	call	0xbce	; 0xbce <OLED_print_char>
        return 0;
     c40:	15 c0       	rjmp	.+42     	; 0xc6c <OLED_print_string+0x54>
     c42:	8c 01       	movw	r16, r24
     c44:	61 50       	subi	r22, 0x01	; 1
     c46:	e6 2e       	mov	r14, r22
     c48:	f1 2c       	mov	r15, r1
     c4a:	2f ef       	ldi	r18, 0xFF	; 255
     c4c:	e2 1a       	sub	r14, r18
     c4e:	f2 0a       	sbc	r15, r18
     c50:	e8 0e       	add	r14, r24
     c52:	f9 1e       	adc	r15, r25
    }

    // Printing character by character
    for (uint8_t i = 0; i < length; i++)
     c54:	c0 e0       	ldi	r28, 0x00	; 0
    {
        OLED_print_char(s[i], line, 8 * i);
     c56:	4c 2f       	mov	r20, r28
     c58:	6d 2f       	mov	r22, r29
     c5a:	f8 01       	movw	r30, r16
     c5c:	81 91       	ld	r24, Z+
     c5e:	8f 01       	movw	r16, r30
     c60:	0e 94 e7 05 	call	0xbce	; 0xbce <OLED_print_char>
     c64:	c8 5f       	subi	r28, 0xF8	; 248
        OLED_print_char('~', line, 0);
        return 0;
    }

    // Printing character by character
    for (uint8_t i = 0; i < length; i++)
     c66:	0e 15       	cp	r16, r14
     c68:	1f 05       	cpc	r17, r15
     c6a:	a9 f7       	brne	.-22     	; 0xc56 <OLED_print_string+0x3e>
    {
        OLED_print_char(s[i], line, 8 * i);
    }
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	08 95       	ret

00000c7a <OLED_update_menu>:

void OLED_update_menu(uint8_t pos)
{
     c7a:	cf 93       	push	r28
    // Updating menu position and drawing a '<' on the right side
    // of the screen
    if (pos > 0 && pos < 7)
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
     c7e:	98 0f       	add	r25, r24
     c80:	96 30       	cpi	r25, 0x06	; 6
     c82:	78 f4       	brcc	.+30     	; 0xca2 <OLED_update_menu+0x28>
     c84:	c8 2f       	mov	r28, r24
    {
        OLED_print_char(' ', menu_pos, 120);
     c86:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <menu_pos>
     c8a:	48 e7       	ldi	r20, 0x78	; 120
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	0e 94 e7 05 	call	0xbce	; 0xbce <OLED_print_char>
        menu_pos = pos;
     c92:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <menu_pos>
        OLED_print_char('<', menu_pos, 120);
     c96:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <menu_pos>
     c9a:	48 e7       	ldi	r20, 0x78	; 120
     c9c:	8c e3       	ldi	r24, 0x3C	; 60
     c9e:	0e 94 e7 05 	call	0xbce	; 0xbce <OLED_print_char>
    }
}
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <OLED_print_menu>:

void OLED_print_menu(uint8_t menutype)
{
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	c8 2f       	mov	r28, r24
	// Clearing the OLED before printing
	OLED_clear_all();
     cae:	0e 94 45 05 	call	0xa8a	; 0xa8a <OLED_clear_all>
    // Selecting type of menu
    switch (menutype)
     cb2:	c1 30       	cpi	r28, 0x01	; 1
     cb4:	01 f1       	breq	.+64     	; 0xcf6 <OLED_print_menu+0x50>
     cb6:	30 f0       	brcs	.+12     	; 0xcc4 <OLED_print_menu+0x1e>
     cb8:	c2 30       	cpi	r28, 0x02	; 2
     cba:	61 f1       	breq	.+88     	; 0xd14 <OLED_print_menu+0x6e>
     cbc:	c3 30       	cpi	r28, 0x03	; 3
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <OLED_print_menu+0x1c>
     cc0:	3f c0       	rjmp	.+126    	; 0xd40 <OLED_print_menu+0x9a>
     cc2:	53 c0       	rjmp	.+166    	; 0xd6a <OLED_print_menu+0xc4>
    {
    case MAIN:
        OLED_fill_line(0);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
     cca:	0a e2       	ldi	r16, 0x2A	; 42
     ccc:	11 e0       	ldi	r17, 0x01	; 1
        // Drawing menu entries
        for (uint8_t i = 0; i < 4; i++)
     cce:	c0 e0       	ldi	r28, 0x00	; 0
        {
            OLED_print_string(main_menu[i].name, main_menu[i].length, i + 1);
     cd0:	cf 5f       	subi	r28, 0xFF	; 255
     cd2:	4c 2f       	mov	r20, r28
     cd4:	f8 01       	movw	r30, r16
     cd6:	62 81       	ldd	r22, Z+2	; 0x02
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	0e 94 0c 06 	call	0xc18	; 0xc18 <OLED_print_string>
     ce0:	0d 5f       	subi	r16, 0xFD	; 253
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    switch (menutype)
    {
    case MAIN:
        OLED_fill_line(0);
        // Drawing menu entries
        for (uint8_t i = 0; i < 4; i++)
     ce4:	c4 30       	cpi	r28, 0x04	; 4
     ce6:	a1 f7       	brne	.-24     	; 0xcd0 <OLED_print_menu+0x2a>
        {
            OLED_print_string(main_menu[i].name, main_menu[i].length, i + 1);
        }
        OLED_fill_line(7);
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
        // Setting initial position
        OLED_update_menu(1);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <OLED_update_menu>
        break;
     cf4:	3a c0       	rjmp	.+116    	; 0xd6a <OLED_print_menu+0xc4>
	case PLAYMENU:
		OLED_fill_line(0);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
		// Drawing menu entries
		OLED_print_string(play_menu[0].name, play_menu[0].length, 1);
     cfc:	e4 e2       	ldi	r30, 0x24	; 36
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	41 e0       	ldi	r20, 0x01	; 1
     d02:	62 81       	ldd	r22, Z+2	; 0x02
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	0e 94 0c 06 	call	0xc18	; 0xc18 <OLED_print_string>
		OLED_fill_line(7);
     d0c:	87 e0       	ldi	r24, 0x07	; 7
     d0e:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
		break;
     d12:	2b c0       	rjmp	.+86     	; 0xd6a <OLED_print_menu+0xc4>
	case CREDITS:
	    OLED_fill_line(0);
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
     d1a:	08 e1       	ldi	r16, 0x18	; 24
     d1c:	11 e0       	ldi	r17, 0x01	; 1
	    // Drawing menu entries
	    for (uint8_t i = 0; i < 4; i++)
     d1e:	c0 e0       	ldi	r28, 0x00	; 0
	    {
		    OLED_print_string(credits_menu[i].name, credits_menu[i].length, i + 1);
     d20:	cf 5f       	subi	r28, 0xFF	; 255
     d22:	4c 2f       	mov	r20, r28
     d24:	f8 01       	movw	r30, r16
     d26:	62 81       	ldd	r22, Z+2	; 0x02
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	0e 94 0c 06 	call	0xc18	; 0xc18 <OLED_print_string>
     d30:	0d 5f       	subi	r16, 0xFD	; 253
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
		OLED_fill_line(7);
		break;
	case CREDITS:
	    OLED_fill_line(0);
	    // Drawing menu entries
	    for (uint8_t i = 0; i < 4; i++)
     d34:	c4 30       	cpi	r28, 0x04	; 4
     d36:	a1 f7       	brne	.-24     	; 0xd20 <OLED_print_menu+0x7a>
	    {
		    OLED_print_string(credits_menu[i].name, credits_menu[i].length, i + 1);
	    }
	    OLED_fill_line(7);
     d38:	87 e0       	ldi	r24, 0x07	; 7
     d3a:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
	    break;
     d3e:	15 c0       	rjmp	.+42     	; 0xd6a <OLED_print_menu+0xc4>
	case ABOUT:
		OLED_fill_line(0);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
     d46:	0c e0       	ldi	r16, 0x0C	; 12
     d48:	11 e0       	ldi	r17, 0x01	; 1
		// Drawing menu entries
		for (uint8_t i = 0; i < 4; i++)
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
		{
			OLED_print_string(about_menu[i].name, about_menu[i].length, i + 1);
     d4c:	cf 5f       	subi	r28, 0xFF	; 255
     d4e:	4c 2f       	mov	r20, r28
     d50:	f8 01       	movw	r30, r16
     d52:	62 81       	ldd	r22, Z+2	; 0x02
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	0e 94 0c 06 	call	0xc18	; 0xc18 <OLED_print_string>
     d5c:	0d 5f       	subi	r16, 0xFD	; 253
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
	    OLED_fill_line(7);
	    break;
	case ABOUT:
		OLED_fill_line(0);
		// Drawing menu entries
		for (uint8_t i = 0; i < 4; i++)
     d60:	c4 30       	cpi	r28, 0x04	; 4
     d62:	a1 f7       	brne	.-24     	; 0xd4c <OLED_print_menu+0xa6>
		{
			OLED_print_string(about_menu[i].name, about_menu[i].length, i + 1);
		}
		OLED_fill_line(7);
     d64:	87 e0       	ldi	r24, 0x07	; 7
     d66:	0e 94 31 05 	call	0xa62	; 0xa62 <OLED_fill_line>
		break;

    default:
        break;
    }
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <slider_pos_read>:
#include "Slider.h"

sliderpos_t slider_pos_read()
{
     d72:	cf 93       	push	r28
	sliderpos_t pos = {adc_read(S_L_ADDRESS), adc_read(S_R_ADDRESS)};
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     d7a:	c8 2f       	mov	r28, r24
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     d82:	98 2f       	mov	r25, r24
	
	return pos;
}
     d84:	8c 2f       	mov	r24, r28
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <SPI_slave_enable>:
#include "SPI.h"

void SPI_slave_enable()
{
	// Set SS-pin LOW
	PORTB &= ~(1 << PB4);
     d8a:	c4 98       	cbi	0x18, 4	; 24
     d8c:	08 95       	ret

00000d8e <SPI_slave_disable>:
}

void SPI_slave_disable()
{
	// Set SS-pin HIGH
	PORTB |= (1 << PB4);
     d8e:	c4 9a       	sbi	0x18, 4	; 24
     d90:	08 95       	ret

00000d92 <SPI_master_init>:

void SPI_master_init()
{
	// Code adapted from datasheet
	// Set SS (PB4), MOSI (PB5) and SCK (PB7) as output
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
     d92:	80 eb       	ldi	r24, 0xB0	; 176
     d94:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
     d96:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     d98:	81 e5       	ldi	r24, 0x51	; 81
     d9a:	8d b9       	out	0x0d, r24	; 13
	// Starting with slave disabled
	SPI_slave_disable();
     d9c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <SPI_slave_disable>
     da0:	08 95       	ret

00000da2 <SPI_master_transmit>:
}

void SPI_master_transmit(char cData)
{
	// Start transmission
	SPDR = cData;
     da2:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1 << SPIF)))
     da4:	77 9b       	sbis	0x0e, 7	; 14
     da6:	fe cf       	rjmp	.-4      	; 0xda4 <SPI_master_transmit+0x2>
		;
}
     da8:	08 95       	ret

00000daa <SPI_master_read>:

char SPI_master_read()
{
	// Shifting the register by 8bit 
	SPDR = 0x00;
     daa:	1f b8       	out	0x0f, r1	; 15
	// Wait for complete reception
	while(!(SPSR & (1 << SPIF)))
     dac:	77 9b       	sbis	0x0e, 7	; 14
     dae:	fe cf       	rjmp	.-4      	; 0xdac <SPI_master_read+0x2>
		;
		
	return SPDR;
     db0:	8f b1       	in	r24, 0x0f	; 15
     db2:	08 95       	ret

00000db4 <USART_Transmit>:

int USART_Transmit(unsigned char data)
{
    /*Adapted from the datasheet*/
    /*Wait for empty transmit buffer*/
    while (!(UCSR0A & (1 << UDRE0)))
     db4:	5d 9b       	sbis	0x0b, 5	; 11
     db6:	fe cf       	rjmp	.-4      	; 0xdb4 <USART_Transmit>
        ;
    /*Put data into buffer, sends the data*/
    UDR0 = data;
     db8:	8c b9       	out	0x0c, r24	; 12

    return 0;
}
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	08 95       	ret

00000dc0 <USART_Receive>:

int USART_Receive(void)
{
    /* Wait for data to be received */
    while (!(UCSR0A & (1 << RXC0)))
     dc0:	5f 9b       	sbis	0x0b, 7	; 11
     dc2:	fe cf       	rjmp	.-4      	; 0xdc0 <USART_Receive>
        ;
    /* Get and return received data from buffer */
    return UDR0;
     dc4:	8c b1       	in	r24, 0x0c	; 12
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	08 95       	ret

00000dca <USART_Init>:

void USART_Init(unsigned int ubrr)
{
    /*Adapted from the datasheet*/
    /*Set baud rate*/
    UBRR0H = (unsigned char)(ubrr >> 8);
     dca:	90 bd       	out	0x20, r25	; 32
    UBRR0L = (unsigned char)ubrr;
     dcc:	89 b9       	out	0x09, r24	; 9
    /*Enable receiver and transmitter*/
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     dce:	88 e1       	ldi	r24, 0x18	; 24
     dd0:	8a b9       	out	0x0a, r24	; 10
    /*Set frame format: 8data*/
    UCSR0C = (1 << URSEL0) | (3 << UCSZ00);
     dd2:	86 e8       	ldi	r24, 0x86	; 134
     dd4:	80 bd       	out	0x20, r24	; 32
    fdevopen(USART_Transmit, USART_Receive);
     dd6:	60 ee       	ldi	r22, 0xE0	; 224
     dd8:	76 e0       	ldi	r23, 0x06	; 6
     dda:	8a ed       	ldi	r24, 0xDA	; 218
     ddc:	96 e0       	ldi	r25, 0x06	; 6
     dde:	0e 94 42 07 	call	0xe84	; 0xe84 <fdevopen>
     de2:	08 95       	ret

00000de4 <__divmodsi4>:
     de4:	05 2e       	mov	r0, r21
     de6:	97 fb       	bst	r25, 7
     de8:	1e f4       	brtc	.+6      	; 0xdf0 <__divmodsi4+0xc>
     dea:	00 94       	com	r0
     dec:	0e 94 09 07 	call	0xe12	; 0xe12 <__negsi2>
     df0:	57 fd       	sbrc	r21, 7
     df2:	07 d0       	rcall	.+14     	; 0xe02 <__divmodsi4_neg2>
     df4:	0e 94 20 07 	call	0xe40	; 0xe40 <__udivmodsi4>
     df8:	07 fc       	sbrc	r0, 7
     dfa:	03 d0       	rcall	.+6      	; 0xe02 <__divmodsi4_neg2>
     dfc:	4e f4       	brtc	.+18     	; 0xe10 <__divmodsi4_exit>
     dfe:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__negsi2>

00000e02 <__divmodsi4_neg2>:
     e02:	50 95       	com	r21
     e04:	40 95       	com	r20
     e06:	30 95       	com	r19
     e08:	21 95       	neg	r18
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
     e0c:	4f 4f       	sbci	r20, 0xFF	; 255
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e10 <__divmodsi4_exit>:
     e10:	08 95       	ret

00000e12 <__negsi2>:
     e12:	90 95       	com	r25
     e14:	80 95       	com	r24
     e16:	70 95       	com	r23
     e18:	61 95       	neg	r22
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	8f 4f       	sbci	r24, 0xFF	; 255
     e1e:	9f 4f       	sbci	r25, 0xFF	; 255
     e20:	08 95       	ret

00000e22 <__umulhisi3>:
     e22:	a2 9f       	mul	r26, r18
     e24:	b0 01       	movw	r22, r0
     e26:	b3 9f       	mul	r27, r19
     e28:	c0 01       	movw	r24, r0
     e2a:	a3 9f       	mul	r26, r19
     e2c:	70 0d       	add	r23, r0
     e2e:	81 1d       	adc	r24, r1
     e30:	11 24       	eor	r1, r1
     e32:	91 1d       	adc	r25, r1
     e34:	b2 9f       	mul	r27, r18
     e36:	70 0d       	add	r23, r0
     e38:	81 1d       	adc	r24, r1
     e3a:	11 24       	eor	r1, r1
     e3c:	91 1d       	adc	r25, r1
     e3e:	08 95       	ret

00000e40 <__udivmodsi4>:
     e40:	a1 e2       	ldi	r26, 0x21	; 33
     e42:	1a 2e       	mov	r1, r26
     e44:	aa 1b       	sub	r26, r26
     e46:	bb 1b       	sub	r27, r27
     e48:	fd 01       	movw	r30, r26
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <__udivmodsi4_ep>

00000e4c <__udivmodsi4_loop>:
     e4c:	aa 1f       	adc	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	ee 1f       	adc	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	a2 17       	cp	r26, r18
     e56:	b3 07       	cpc	r27, r19
     e58:	e4 07       	cpc	r30, r20
     e5a:	f5 07       	cpc	r31, r21
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <__udivmodsi4_ep>
     e5e:	a2 1b       	sub	r26, r18
     e60:	b3 0b       	sbc	r27, r19
     e62:	e4 0b       	sbc	r30, r20
     e64:	f5 0b       	sbc	r31, r21

00000e66 <__udivmodsi4_ep>:
     e66:	66 1f       	adc	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	88 1f       	adc	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	1a 94       	dec	r1
     e70:	69 f7       	brne	.-38     	; 0xe4c <__udivmodsi4_loop>
     e72:	60 95       	com	r22
     e74:	70 95       	com	r23
     e76:	80 95       	com	r24
     e78:	90 95       	com	r25
     e7a:	9b 01       	movw	r18, r22
     e7c:	ac 01       	movw	r20, r24
     e7e:	bd 01       	movw	r22, r26
     e80:	cf 01       	movw	r24, r30
     e82:	08 95       	ret

00000e84 <fdevopen>:
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	31 f4       	brne	.+12     	; 0xe9c <fdevopen+0x18>
     e90:	61 15       	cp	r22, r1
     e92:	71 05       	cpc	r23, r1
     e94:	19 f4       	brne	.+6      	; 0xe9c <fdevopen+0x18>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	3a c0       	rjmp	.+116    	; 0xf10 <fdevopen+0x8c>
     e9c:	8b 01       	movw	r16, r22
     e9e:	ec 01       	movw	r28, r24
     ea0:	6e e0       	ldi	r22, 0x0E	; 14
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 b4 09 	call	0x1368	; 0x1368 <calloc>
     eac:	fc 01       	movw	r30, r24
     eae:	89 2b       	or	r24, r25
     eb0:	91 f3       	breq	.-28     	; 0xe96 <fdevopen+0x12>
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	83 83       	std	Z+3, r24	; 0x03
     eb6:	01 15       	cp	r16, r1
     eb8:	11 05       	cpc	r17, r1
     eba:	71 f0       	breq	.+28     	; 0xed8 <fdevopen+0x54>
     ebc:	13 87       	std	Z+11, r17	; 0x0b
     ebe:	02 87       	std	Z+10, r16	; 0x0a
     ec0:	81 e8       	ldi	r24, 0x81	; 129
     ec2:	83 83       	std	Z+3, r24	; 0x03
     ec4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__iob>
     ec8:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__iob+0x1>
     ecc:	89 2b       	or	r24, r25
     ece:	21 f4       	brne	.+8      	; 0xed8 <fdevopen+0x54>
     ed0:	f0 93 59 02 	sts	0x0259, r31	; 0x800259 <__iob+0x1>
     ed4:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <__iob>
     ed8:	20 97       	sbiw	r28, 0x00	; 0
     eda:	c9 f0       	breq	.+50     	; 0xf0e <fdevopen+0x8a>
     edc:	d1 87       	std	Z+9, r29	; 0x09
     ede:	c0 87       	std	Z+8, r28	; 0x08
     ee0:	83 81       	ldd	r24, Z+3	; 0x03
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	83 83       	std	Z+3, r24	; 0x03
     ee6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__iob+0x2>
     eea:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__iob+0x3>
     eee:	89 2b       	or	r24, r25
     ef0:	71 f4       	brne	.+28     	; 0xf0e <fdevopen+0x8a>
     ef2:	f0 93 5b 02 	sts	0x025B, r31	; 0x80025b <__iob+0x3>
     ef6:	e0 93 5a 02 	sts	0x025A, r30	; 0x80025a <__iob+0x2>
     efa:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__iob+0x4>
     efe:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__iob+0x5>
     f02:	89 2b       	or	r24, r25
     f04:	21 f4       	brne	.+8      	; 0xf0e <fdevopen+0x8a>
     f06:	f0 93 5d 02 	sts	0x025D, r31	; 0x80025d <__iob+0x5>
     f0a:	e0 93 5c 02 	sts	0x025C, r30	; 0x80025c <__iob+0x4>
     f0e:	cf 01       	movw	r24, r30
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	08 95       	ret

00000f1a <printf>:
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e9       	ldi	r30, 0x93	; 147
     f20:	f7 e0       	ldi	r31, 0x07	; 7
     f22:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__prologue_saves__+0x20>
     f26:	ae 01       	movw	r20, r28
     f28:	4b 5f       	subi	r20, 0xFB	; 251
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	fa 01       	movw	r30, r20
     f2e:	61 91       	ld	r22, Z+
     f30:	71 91       	ld	r23, Z+
     f32:	af 01       	movw	r20, r30
     f34:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__iob+0x2>
     f38:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__iob+0x3>
     f3c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <vfprintf>
     f40:	e2 e0       	ldi	r30, 0x02	; 2
     f42:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__epilogue_restores__+0x20>

00000f46 <puts>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <__iob+0x2>
     f52:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <__iob+0x3>
     f56:	23 81       	ldd	r18, Z+3	; 0x03
     f58:	21 ff       	sbrs	r18, 1
     f5a:	1b c0       	rjmp	.+54     	; 0xf92 <puts+0x4c>
     f5c:	8c 01       	movw	r16, r24
     f5e:	d0 e0       	ldi	r29, 0x00	; 0
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	f8 01       	movw	r30, r16
     f64:	81 91       	ld	r24, Z+
     f66:	8f 01       	movw	r16, r30
     f68:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <__iob+0x2>
     f6c:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <__iob+0x3>
     f70:	db 01       	movw	r26, r22
     f72:	18 96       	adiw	r26, 0x08	; 8
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	19 97       	sbiw	r26, 0x09	; 9
     f7a:	88 23       	and	r24, r24
     f7c:	31 f0       	breq	.+12     	; 0xf8a <puts+0x44>
     f7e:	09 95       	icall
     f80:	89 2b       	or	r24, r25
     f82:	79 f3       	breq	.-34     	; 0xf62 <puts+0x1c>
     f84:	df ef       	ldi	r29, 0xFF	; 255
     f86:	cf ef       	ldi	r28, 0xFF	; 255
     f88:	ec cf       	rjmp	.-40     	; 0xf62 <puts+0x1c>
     f8a:	8a e0       	ldi	r24, 0x0A	; 10
     f8c:	09 95       	icall
     f8e:	89 2b       	or	r24, r25
     f90:	19 f0       	breq	.+6      	; 0xf98 <puts+0x52>
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	9f ef       	ldi	r25, 0xFF	; 255
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <puts+0x56>
     f98:	8d 2f       	mov	r24, r29
     f9a:	9c 2f       	mov	r25, r28
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <vfprintf>:
     fa6:	ab e0       	ldi	r26, 0x0B	; 11
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e9 ed       	ldi	r30, 0xD9	; 217
     fac:	f7 e0       	ldi	r31, 0x07	; 7
     fae:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__prologue_saves__>
     fb2:	6c 01       	movw	r12, r24
     fb4:	7b 01       	movw	r14, r22
     fb6:	8a 01       	movw	r16, r20
     fb8:	fc 01       	movw	r30, r24
     fba:	17 82       	std	Z+7, r1	; 0x07
     fbc:	16 82       	std	Z+6, r1	; 0x06
     fbe:	83 81       	ldd	r24, Z+3	; 0x03
     fc0:	81 ff       	sbrs	r24, 1
     fc2:	cc c1       	rjmp	.+920    	; 0x135c <vfprintf+0x3b6>
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	3c 01       	movw	r6, r24
     fca:	f6 01       	movw	r30, r12
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	f7 01       	movw	r30, r14
     fd0:	93 fd       	sbrc	r25, 3
     fd2:	85 91       	lpm	r24, Z+
     fd4:	93 ff       	sbrs	r25, 3
     fd6:	81 91       	ld	r24, Z+
     fd8:	7f 01       	movw	r14, r30
     fda:	88 23       	and	r24, r24
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <vfprintf+0x3a>
     fde:	ba c1       	rjmp	.+884    	; 0x1354 <vfprintf+0x3ae>
     fe0:	85 32       	cpi	r24, 0x25	; 37
     fe2:	39 f4       	brne	.+14     	; 0xff2 <vfprintf+0x4c>
     fe4:	93 fd       	sbrc	r25, 3
     fe6:	85 91       	lpm	r24, Z+
     fe8:	93 ff       	sbrs	r25, 3
     fea:	81 91       	ld	r24, Z+
     fec:	7f 01       	movw	r14, r30
     fee:	85 32       	cpi	r24, 0x25	; 37
     ff0:	29 f4       	brne	.+10     	; 0xffc <vfprintf+0x56>
     ff2:	b6 01       	movw	r22, r12
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
     ffa:	e7 cf       	rjmp	.-50     	; 0xfca <vfprintf+0x24>
     ffc:	91 2c       	mov	r9, r1
     ffe:	21 2c       	mov	r2, r1
    1000:	31 2c       	mov	r3, r1
    1002:	ff e1       	ldi	r31, 0x1F	; 31
    1004:	f3 15       	cp	r31, r3
    1006:	d8 f0       	brcs	.+54     	; 0x103e <vfprintf+0x98>
    1008:	8b 32       	cpi	r24, 0x2B	; 43
    100a:	79 f0       	breq	.+30     	; 0x102a <vfprintf+0x84>
    100c:	38 f4       	brcc	.+14     	; 0x101c <vfprintf+0x76>
    100e:	80 32       	cpi	r24, 0x20	; 32
    1010:	79 f0       	breq	.+30     	; 0x1030 <vfprintf+0x8a>
    1012:	83 32       	cpi	r24, 0x23	; 35
    1014:	a1 f4       	brne	.+40     	; 0x103e <vfprintf+0x98>
    1016:	23 2d       	mov	r18, r3
    1018:	20 61       	ori	r18, 0x10	; 16
    101a:	1d c0       	rjmp	.+58     	; 0x1056 <vfprintf+0xb0>
    101c:	8d 32       	cpi	r24, 0x2D	; 45
    101e:	61 f0       	breq	.+24     	; 0x1038 <vfprintf+0x92>
    1020:	80 33       	cpi	r24, 0x30	; 48
    1022:	69 f4       	brne	.+26     	; 0x103e <vfprintf+0x98>
    1024:	23 2d       	mov	r18, r3
    1026:	21 60       	ori	r18, 0x01	; 1
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <vfprintf+0xb0>
    102a:	83 2d       	mov	r24, r3
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	38 2e       	mov	r3, r24
    1030:	e3 2d       	mov	r30, r3
    1032:	e4 60       	ori	r30, 0x04	; 4
    1034:	3e 2e       	mov	r3, r30
    1036:	2a c0       	rjmp	.+84     	; 0x108c <vfprintf+0xe6>
    1038:	f3 2d       	mov	r31, r3
    103a:	f8 60       	ori	r31, 0x08	; 8
    103c:	1d c0       	rjmp	.+58     	; 0x1078 <vfprintf+0xd2>
    103e:	37 fc       	sbrc	r3, 7
    1040:	2d c0       	rjmp	.+90     	; 0x109c <vfprintf+0xf6>
    1042:	20 ed       	ldi	r18, 0xD0	; 208
    1044:	28 0f       	add	r18, r24
    1046:	2a 30       	cpi	r18, 0x0A	; 10
    1048:	40 f0       	brcs	.+16     	; 0x105a <vfprintf+0xb4>
    104a:	8e 32       	cpi	r24, 0x2E	; 46
    104c:	b9 f4       	brne	.+46     	; 0x107c <vfprintf+0xd6>
    104e:	36 fc       	sbrc	r3, 6
    1050:	81 c1       	rjmp	.+770    	; 0x1354 <vfprintf+0x3ae>
    1052:	23 2d       	mov	r18, r3
    1054:	20 64       	ori	r18, 0x40	; 64
    1056:	32 2e       	mov	r3, r18
    1058:	19 c0       	rjmp	.+50     	; 0x108c <vfprintf+0xe6>
    105a:	36 fe       	sbrs	r3, 6
    105c:	06 c0       	rjmp	.+12     	; 0x106a <vfprintf+0xc4>
    105e:	8a e0       	ldi	r24, 0x0A	; 10
    1060:	98 9e       	mul	r9, r24
    1062:	20 0d       	add	r18, r0
    1064:	11 24       	eor	r1, r1
    1066:	92 2e       	mov	r9, r18
    1068:	11 c0       	rjmp	.+34     	; 0x108c <vfprintf+0xe6>
    106a:	ea e0       	ldi	r30, 0x0A	; 10
    106c:	2e 9e       	mul	r2, r30
    106e:	20 0d       	add	r18, r0
    1070:	11 24       	eor	r1, r1
    1072:	22 2e       	mov	r2, r18
    1074:	f3 2d       	mov	r31, r3
    1076:	f0 62       	ori	r31, 0x20	; 32
    1078:	3f 2e       	mov	r3, r31
    107a:	08 c0       	rjmp	.+16     	; 0x108c <vfprintf+0xe6>
    107c:	8c 36       	cpi	r24, 0x6C	; 108
    107e:	21 f4       	brne	.+8      	; 0x1088 <vfprintf+0xe2>
    1080:	83 2d       	mov	r24, r3
    1082:	80 68       	ori	r24, 0x80	; 128
    1084:	38 2e       	mov	r3, r24
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0xe6>
    1088:	88 36       	cpi	r24, 0x68	; 104
    108a:	41 f4       	brne	.+16     	; 0x109c <vfprintf+0xf6>
    108c:	f7 01       	movw	r30, r14
    108e:	93 fd       	sbrc	r25, 3
    1090:	85 91       	lpm	r24, Z+
    1092:	93 ff       	sbrs	r25, 3
    1094:	81 91       	ld	r24, Z+
    1096:	7f 01       	movw	r14, r30
    1098:	81 11       	cpse	r24, r1
    109a:	b3 cf       	rjmp	.-154    	; 0x1002 <vfprintf+0x5c>
    109c:	98 2f       	mov	r25, r24
    109e:	9f 7d       	andi	r25, 0xDF	; 223
    10a0:	95 54       	subi	r25, 0x45	; 69
    10a2:	93 30       	cpi	r25, 0x03	; 3
    10a4:	28 f4       	brcc	.+10     	; 0x10b0 <vfprintf+0x10a>
    10a6:	0c 5f       	subi	r16, 0xFC	; 252
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	9f e3       	ldi	r25, 0x3F	; 63
    10ac:	99 83       	std	Y+1, r25	; 0x01
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <vfprintf+0x124>
    10b0:	83 36       	cpi	r24, 0x63	; 99
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <vfprintf+0x11a>
    10b4:	83 37       	cpi	r24, 0x73	; 115
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <vfprintf+0x12e>
    10b8:	83 35       	cpi	r24, 0x53	; 83
    10ba:	09 f0       	breq	.+2      	; 0x10be <vfprintf+0x118>
    10bc:	59 c0       	rjmp	.+178    	; 0x1170 <vfprintf+0x1ca>
    10be:	21 c0       	rjmp	.+66     	; 0x1102 <vfprintf+0x15c>
    10c0:	f8 01       	movw	r30, r16
    10c2:	80 81       	ld	r24, Z
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	0e 5f       	subi	r16, 0xFE	; 254
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	88 24       	eor	r8, r8
    10cc:	83 94       	inc	r8
    10ce:	91 2c       	mov	r9, r1
    10d0:	53 01       	movw	r10, r6
    10d2:	13 c0       	rjmp	.+38     	; 0x10fa <vfprintf+0x154>
    10d4:	28 01       	movw	r4, r16
    10d6:	f2 e0       	ldi	r31, 0x02	; 2
    10d8:	4f 0e       	add	r4, r31
    10da:	51 1c       	adc	r5, r1
    10dc:	f8 01       	movw	r30, r16
    10de:	a0 80       	ld	r10, Z
    10e0:	b1 80       	ldd	r11, Z+1	; 0x01
    10e2:	36 fe       	sbrs	r3, 6
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <vfprintf+0x146>
    10e6:	69 2d       	mov	r22, r9
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <vfprintf+0x14a>
    10ec:	6f ef       	ldi	r22, 0xFF	; 255
    10ee:	7f ef       	ldi	r23, 0xFF	; 255
    10f0:	c5 01       	movw	r24, r10
    10f2:	0e 94 03 0b 	call	0x1606	; 0x1606 <strnlen>
    10f6:	4c 01       	movw	r8, r24
    10f8:	82 01       	movw	r16, r4
    10fa:	f3 2d       	mov	r31, r3
    10fc:	ff 77       	andi	r31, 0x7F	; 127
    10fe:	3f 2e       	mov	r3, r31
    1100:	16 c0       	rjmp	.+44     	; 0x112e <vfprintf+0x188>
    1102:	28 01       	movw	r4, r16
    1104:	22 e0       	ldi	r18, 0x02	; 2
    1106:	42 0e       	add	r4, r18
    1108:	51 1c       	adc	r5, r1
    110a:	f8 01       	movw	r30, r16
    110c:	a0 80       	ld	r10, Z
    110e:	b1 80       	ldd	r11, Z+1	; 0x01
    1110:	36 fe       	sbrs	r3, 6
    1112:	03 c0       	rjmp	.+6      	; 0x111a <vfprintf+0x174>
    1114:	69 2d       	mov	r22, r9
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	02 c0       	rjmp	.+4      	; 0x111e <vfprintf+0x178>
    111a:	6f ef       	ldi	r22, 0xFF	; 255
    111c:	7f ef       	ldi	r23, 0xFF	; 255
    111e:	c5 01       	movw	r24, r10
    1120:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <strnlen_P>
    1124:	4c 01       	movw	r8, r24
    1126:	f3 2d       	mov	r31, r3
    1128:	f0 68       	ori	r31, 0x80	; 128
    112a:	3f 2e       	mov	r3, r31
    112c:	82 01       	movw	r16, r4
    112e:	33 fc       	sbrc	r3, 3
    1130:	1b c0       	rjmp	.+54     	; 0x1168 <vfprintf+0x1c2>
    1132:	82 2d       	mov	r24, r2
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	88 16       	cp	r8, r24
    1138:	99 06       	cpc	r9, r25
    113a:	b0 f4       	brcc	.+44     	; 0x1168 <vfprintf+0x1c2>
    113c:	b6 01       	movw	r22, r12
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    1146:	2a 94       	dec	r2
    1148:	f4 cf       	rjmp	.-24     	; 0x1132 <vfprintf+0x18c>
    114a:	f5 01       	movw	r30, r10
    114c:	37 fc       	sbrc	r3, 7
    114e:	85 91       	lpm	r24, Z+
    1150:	37 fe       	sbrs	r3, 7
    1152:	81 91       	ld	r24, Z+
    1154:	5f 01       	movw	r10, r30
    1156:	b6 01       	movw	r22, r12
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    115e:	21 10       	cpse	r2, r1
    1160:	2a 94       	dec	r2
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	82 1a       	sub	r8, r18
    1166:	91 08       	sbc	r9, r1
    1168:	81 14       	cp	r8, r1
    116a:	91 04       	cpc	r9, r1
    116c:	71 f7       	brne	.-36     	; 0x114a <vfprintf+0x1a4>
    116e:	e8 c0       	rjmp	.+464    	; 0x1340 <vfprintf+0x39a>
    1170:	84 36       	cpi	r24, 0x64	; 100
    1172:	11 f0       	breq	.+4      	; 0x1178 <vfprintf+0x1d2>
    1174:	89 36       	cpi	r24, 0x69	; 105
    1176:	41 f5       	brne	.+80     	; 0x11c8 <vfprintf+0x222>
    1178:	f8 01       	movw	r30, r16
    117a:	37 fe       	sbrs	r3, 7
    117c:	07 c0       	rjmp	.+14     	; 0x118c <vfprintf+0x1e6>
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	0c 5f       	subi	r16, 0xFC	; 252
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	08 c0       	rjmp	.+16     	; 0x119c <vfprintf+0x1f6>
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	07 2e       	mov	r0, r23
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 5f       	subi	r16, 0xFE	; 254
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	f3 2d       	mov	r31, r3
    119e:	ff 76       	andi	r31, 0x6F	; 111
    11a0:	3f 2e       	mov	r3, r31
    11a2:	97 ff       	sbrs	r25, 7
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <vfprintf+0x212>
    11a6:	90 95       	com	r25
    11a8:	80 95       	com	r24
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	f0 68       	ori	r31, 0x80	; 128
    11b6:	3f 2e       	mov	r3, r31
    11b8:	2a e0       	ldi	r18, 0x0A	; 10
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a3 01       	movw	r20, r6
    11be:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__ultoa_invert>
    11c2:	88 2e       	mov	r8, r24
    11c4:	86 18       	sub	r8, r6
    11c6:	45 c0       	rjmp	.+138    	; 0x1252 <vfprintf+0x2ac>
    11c8:	85 37       	cpi	r24, 0x75	; 117
    11ca:	31 f4       	brne	.+12     	; 0x11d8 <vfprintf+0x232>
    11cc:	23 2d       	mov	r18, r3
    11ce:	2f 7e       	andi	r18, 0xEF	; 239
    11d0:	b2 2e       	mov	r11, r18
    11d2:	2a e0       	ldi	r18, 0x0A	; 10
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	25 c0       	rjmp	.+74     	; 0x1222 <vfprintf+0x27c>
    11d8:	93 2d       	mov	r25, r3
    11da:	99 7f       	andi	r25, 0xF9	; 249
    11dc:	b9 2e       	mov	r11, r25
    11de:	8f 36       	cpi	r24, 0x6F	; 111
    11e0:	c1 f0       	breq	.+48     	; 0x1212 <vfprintf+0x26c>
    11e2:	18 f4       	brcc	.+6      	; 0x11ea <vfprintf+0x244>
    11e4:	88 35       	cpi	r24, 0x58	; 88
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0x260>
    11e8:	b5 c0       	rjmp	.+362    	; 0x1354 <vfprintf+0x3ae>
    11ea:	80 37       	cpi	r24, 0x70	; 112
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <vfprintf+0x24e>
    11ee:	88 37       	cpi	r24, 0x78	; 120
    11f0:	21 f0       	breq	.+8      	; 0x11fa <vfprintf+0x254>
    11f2:	b0 c0       	rjmp	.+352    	; 0x1354 <vfprintf+0x3ae>
    11f4:	e9 2f       	mov	r30, r25
    11f6:	e0 61       	ori	r30, 0x10	; 16
    11f8:	be 2e       	mov	r11, r30
    11fa:	b4 fe       	sbrs	r11, 4
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <vfprintf+0x272>
    11fe:	fb 2d       	mov	r31, r11
    1200:	f4 60       	ori	r31, 0x04	; 4
    1202:	bf 2e       	mov	r11, r31
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <vfprintf+0x272>
    1206:	34 fe       	sbrs	r3, 4
    1208:	0a c0       	rjmp	.+20     	; 0x121e <vfprintf+0x278>
    120a:	29 2f       	mov	r18, r25
    120c:	26 60       	ori	r18, 0x06	; 6
    120e:	b2 2e       	mov	r11, r18
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0x278>
    1212:	28 e0       	ldi	r18, 0x08	; 8
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <vfprintf+0x27c>
    1218:	20 e1       	ldi	r18, 0x10	; 16
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <vfprintf+0x27c>
    121e:	20 e1       	ldi	r18, 0x10	; 16
    1220:	32 e0       	ldi	r19, 0x02	; 2
    1222:	f8 01       	movw	r30, r16
    1224:	b7 fe       	sbrs	r11, 7
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <vfprintf+0x290>
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	0c 5f       	subi	r16, 0xFC	; 252
    1232:	1f 4f       	sbci	r17, 0xFF	; 255
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <vfprintf+0x29c>
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 5f       	subi	r16, 0xFE	; 254
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	a3 01       	movw	r20, r6
    1244:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__ultoa_invert>
    1248:	88 2e       	mov	r8, r24
    124a:	86 18       	sub	r8, r6
    124c:	fb 2d       	mov	r31, r11
    124e:	ff 77       	andi	r31, 0x7F	; 127
    1250:	3f 2e       	mov	r3, r31
    1252:	36 fe       	sbrs	r3, 6
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <vfprintf+0x2ca>
    1256:	23 2d       	mov	r18, r3
    1258:	2e 7f       	andi	r18, 0xFE	; 254
    125a:	a2 2e       	mov	r10, r18
    125c:	89 14       	cp	r8, r9
    125e:	58 f4       	brcc	.+22     	; 0x1276 <vfprintf+0x2d0>
    1260:	34 fe       	sbrs	r3, 4
    1262:	0b c0       	rjmp	.+22     	; 0x127a <vfprintf+0x2d4>
    1264:	32 fc       	sbrc	r3, 2
    1266:	09 c0       	rjmp	.+18     	; 0x127a <vfprintf+0x2d4>
    1268:	83 2d       	mov	r24, r3
    126a:	8e 7e       	andi	r24, 0xEE	; 238
    126c:	a8 2e       	mov	r10, r24
    126e:	05 c0       	rjmp	.+10     	; 0x127a <vfprintf+0x2d4>
    1270:	b8 2c       	mov	r11, r8
    1272:	a3 2c       	mov	r10, r3
    1274:	03 c0       	rjmp	.+6      	; 0x127c <vfprintf+0x2d6>
    1276:	b8 2c       	mov	r11, r8
    1278:	01 c0       	rjmp	.+2      	; 0x127c <vfprintf+0x2d6>
    127a:	b9 2c       	mov	r11, r9
    127c:	a4 fe       	sbrs	r10, 4
    127e:	0f c0       	rjmp	.+30     	; 0x129e <vfprintf+0x2f8>
    1280:	fe 01       	movw	r30, r28
    1282:	e8 0d       	add	r30, r8
    1284:	f1 1d       	adc	r31, r1
    1286:	80 81       	ld	r24, Z
    1288:	80 33       	cpi	r24, 0x30	; 48
    128a:	21 f4       	brne	.+8      	; 0x1294 <vfprintf+0x2ee>
    128c:	9a 2d       	mov	r25, r10
    128e:	99 7e       	andi	r25, 0xE9	; 233
    1290:	a9 2e       	mov	r10, r25
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <vfprintf+0x300>
    1294:	a2 fe       	sbrs	r10, 2
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <vfprintf+0x2fe>
    1298:	b3 94       	inc	r11
    129a:	b3 94       	inc	r11
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <vfprintf+0x300>
    129e:	8a 2d       	mov	r24, r10
    12a0:	86 78       	andi	r24, 0x86	; 134
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <vfprintf+0x300>
    12a4:	b3 94       	inc	r11
    12a6:	a3 fc       	sbrc	r10, 3
    12a8:	11 c0       	rjmp	.+34     	; 0x12cc <vfprintf+0x326>
    12aa:	a0 fe       	sbrs	r10, 0
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <vfprintf+0x314>
    12ae:	b2 14       	cp	r11, r2
    12b0:	88 f4       	brcc	.+34     	; 0x12d4 <vfprintf+0x32e>
    12b2:	28 0c       	add	r2, r8
    12b4:	92 2c       	mov	r9, r2
    12b6:	9b 18       	sub	r9, r11
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <vfprintf+0x330>
    12ba:	b2 14       	cp	r11, r2
    12bc:	60 f4       	brcc	.+24     	; 0x12d6 <vfprintf+0x330>
    12be:	b6 01       	movw	r22, r12
    12c0:	80 e2       	ldi	r24, 0x20	; 32
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    12c8:	b3 94       	inc	r11
    12ca:	f7 cf       	rjmp	.-18     	; 0x12ba <vfprintf+0x314>
    12cc:	b2 14       	cp	r11, r2
    12ce:	18 f4       	brcc	.+6      	; 0x12d6 <vfprintf+0x330>
    12d0:	2b 18       	sub	r2, r11
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <vfprintf+0x332>
    12d4:	98 2c       	mov	r9, r8
    12d6:	21 2c       	mov	r2, r1
    12d8:	a4 fe       	sbrs	r10, 4
    12da:	10 c0       	rjmp	.+32     	; 0x12fc <vfprintf+0x356>
    12dc:	b6 01       	movw	r22, r12
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    12e6:	a2 fe       	sbrs	r10, 2
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <vfprintf+0x372>
    12ea:	a1 fc       	sbrc	r10, 1
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <vfprintf+0x34e>
    12ee:	88 e7       	ldi	r24, 0x78	; 120
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <vfprintf+0x352>
    12f4:	88 e5       	ldi	r24, 0x58	; 88
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	b6 01       	movw	r22, r12
    12fa:	0c c0       	rjmp	.+24     	; 0x1314 <vfprintf+0x36e>
    12fc:	8a 2d       	mov	r24, r10
    12fe:	86 78       	andi	r24, 0x86	; 134
    1300:	59 f0       	breq	.+22     	; 0x1318 <vfprintf+0x372>
    1302:	a1 fe       	sbrs	r10, 1
    1304:	02 c0       	rjmp	.+4      	; 0x130a <vfprintf+0x364>
    1306:	8b e2       	ldi	r24, 0x2B	; 43
    1308:	01 c0       	rjmp	.+2      	; 0x130c <vfprintf+0x366>
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	a7 fc       	sbrc	r10, 7
    130e:	8d e2       	ldi	r24, 0x2D	; 45
    1310:	b6 01       	movw	r22, r12
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    1318:	89 14       	cp	r8, r9
    131a:	38 f4       	brcc	.+14     	; 0x132a <vfprintf+0x384>
    131c:	b6 01       	movw	r22, r12
    131e:	80 e3       	ldi	r24, 0x30	; 48
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    1326:	9a 94       	dec	r9
    1328:	f7 cf       	rjmp	.-18     	; 0x1318 <vfprintf+0x372>
    132a:	8a 94       	dec	r8
    132c:	f3 01       	movw	r30, r6
    132e:	e8 0d       	add	r30, r8
    1330:	f1 1d       	adc	r31, r1
    1332:	80 81       	ld	r24, Z
    1334:	b6 01       	movw	r22, r12
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    133c:	81 10       	cpse	r8, r1
    133e:	f5 cf       	rjmp	.-22     	; 0x132a <vfprintf+0x384>
    1340:	22 20       	and	r2, r2
    1342:	09 f4       	brne	.+2      	; 0x1346 <vfprintf+0x3a0>
    1344:	42 ce       	rjmp	.-892    	; 0xfca <vfprintf+0x24>
    1346:	b6 01       	movw	r22, r12
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 0e 0b 	call	0x161c	; 0x161c <fputc>
    1350:	2a 94       	dec	r2
    1352:	f6 cf       	rjmp	.-20     	; 0x1340 <vfprintf+0x39a>
    1354:	f6 01       	movw	r30, r12
    1356:	86 81       	ldd	r24, Z+6	; 0x06
    1358:	97 81       	ldd	r25, Z+7	; 0x07
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <vfprintf+0x3ba>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	2b 96       	adiw	r28, 0x0b	; 11
    1362:	e2 e1       	ldi	r30, 0x12	; 18
    1364:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__epilogue_restores__>

00001368 <calloc>:
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	86 9f       	mul	r24, r22
    1372:	80 01       	movw	r16, r0
    1374:	87 9f       	mul	r24, r23
    1376:	10 0d       	add	r17, r0
    1378:	96 9f       	mul	r25, r22
    137a:	10 0d       	add	r17, r0
    137c:	11 24       	eor	r1, r1
    137e:	c8 01       	movw	r24, r16
    1380:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <malloc>
    1384:	ec 01       	movw	r28, r24
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	29 f0       	breq	.+10     	; 0x1394 <calloc+0x2c>
    138a:	a8 01       	movw	r20, r16
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <memset>
    1394:	ce 01       	movw	r24, r28
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	08 95       	ret

000013a0 <malloc>:
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	91 05       	cpc	r25, r1
    13ac:	10 f4       	brcc	.+4      	; 0x13b2 <malloc+0x12>
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <__flp>
    13b6:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <__flp+0x1>
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	a0 e0       	ldi	r26, 0x00	; 0
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	19 f1       	breq	.+70     	; 0x140c <malloc+0x6c>
    13c6:	40 81       	ld	r20, Z
    13c8:	51 81       	ldd	r21, Z+1	; 0x01
    13ca:	02 81       	ldd	r16, Z+2	; 0x02
    13cc:	13 81       	ldd	r17, Z+3	; 0x03
    13ce:	48 17       	cp	r20, r24
    13d0:	59 07       	cpc	r21, r25
    13d2:	c8 f0       	brcs	.+50     	; 0x1406 <malloc+0x66>
    13d4:	84 17       	cp	r24, r20
    13d6:	95 07       	cpc	r25, r21
    13d8:	69 f4       	brne	.+26     	; 0x13f4 <malloc+0x54>
    13da:	10 97       	sbiw	r26, 0x00	; 0
    13dc:	31 f0       	breq	.+12     	; 0x13ea <malloc+0x4a>
    13de:	12 96       	adiw	r26, 0x02	; 2
    13e0:	0c 93       	st	X, r16
    13e2:	12 97       	sbiw	r26, 0x02	; 2
    13e4:	13 96       	adiw	r26, 0x03	; 3
    13e6:	1c 93       	st	X, r17
    13e8:	27 c0       	rjmp	.+78     	; 0x1438 <malloc+0x98>
    13ea:	00 93 60 02 	sts	0x0260, r16	; 0x800260 <__flp>
    13ee:	10 93 61 02 	sts	0x0261, r17	; 0x800261 <__flp+0x1>
    13f2:	22 c0       	rjmp	.+68     	; 0x1438 <malloc+0x98>
    13f4:	21 15       	cp	r18, r1
    13f6:	31 05       	cpc	r19, r1
    13f8:	19 f0       	breq	.+6      	; 0x1400 <malloc+0x60>
    13fa:	42 17       	cp	r20, r18
    13fc:	53 07       	cpc	r21, r19
    13fe:	18 f4       	brcc	.+6      	; 0x1406 <malloc+0x66>
    1400:	9a 01       	movw	r18, r20
    1402:	bd 01       	movw	r22, r26
    1404:	ef 01       	movw	r28, r30
    1406:	df 01       	movw	r26, r30
    1408:	f8 01       	movw	r30, r16
    140a:	db cf       	rjmp	.-74     	; 0x13c2 <malloc+0x22>
    140c:	21 15       	cp	r18, r1
    140e:	31 05       	cpc	r19, r1
    1410:	f9 f0       	breq	.+62     	; 0x1450 <malloc+0xb0>
    1412:	28 1b       	sub	r18, r24
    1414:	39 0b       	sbc	r19, r25
    1416:	24 30       	cpi	r18, 0x04	; 4
    1418:	31 05       	cpc	r19, r1
    141a:	80 f4       	brcc	.+32     	; 0x143c <malloc+0x9c>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	61 15       	cp	r22, r1
    1422:	71 05       	cpc	r23, r1
    1424:	21 f0       	breq	.+8      	; 0x142e <malloc+0x8e>
    1426:	fb 01       	movw	r30, r22
    1428:	93 83       	std	Z+3, r25	; 0x03
    142a:	82 83       	std	Z+2, r24	; 0x02
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <malloc+0x96>
    142e:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__flp+0x1>
    1432:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__flp>
    1436:	fe 01       	movw	r30, r28
    1438:	32 96       	adiw	r30, 0x02	; 2
    143a:	44 c0       	rjmp	.+136    	; 0x14c4 <malloc+0x124>
    143c:	fe 01       	movw	r30, r28
    143e:	e2 0f       	add	r30, r18
    1440:	f3 1f       	adc	r31, r19
    1442:	81 93       	st	Z+, r24
    1444:	91 93       	st	Z+, r25
    1446:	22 50       	subi	r18, 0x02	; 2
    1448:	31 09       	sbc	r19, r1
    144a:	39 83       	std	Y+1, r19	; 0x01
    144c:	28 83       	st	Y, r18
    144e:	3a c0       	rjmp	.+116    	; 0x14c4 <malloc+0x124>
    1450:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    1454:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    1458:	23 2b       	or	r18, r19
    145a:	41 f4       	brne	.+16     	; 0x146c <malloc+0xcc>
    145c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1460:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1464:	30 93 5f 02 	sts	0x025F, r19	; 0x80025f <__brkval+0x1>
    1468:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <__brkval>
    146c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1470:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	41 f4       	brne	.+16     	; 0x148a <malloc+0xea>
    147a:	2d b7       	in	r18, 0x3d	; 61
    147c:	3e b7       	in	r19, 0x3e	; 62
    147e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1482:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1486:	24 1b       	sub	r18, r20
    1488:	35 0b       	sbc	r19, r21
    148a:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <__brkval>
    148e:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <__brkval+0x1>
    1492:	e2 17       	cp	r30, r18
    1494:	f3 07       	cpc	r31, r19
    1496:	a0 f4       	brcc	.+40     	; 0x14c0 <malloc+0x120>
    1498:	2e 1b       	sub	r18, r30
    149a:	3f 0b       	sbc	r19, r31
    149c:	28 17       	cp	r18, r24
    149e:	39 07       	cpc	r19, r25
    14a0:	78 f0       	brcs	.+30     	; 0x14c0 <malloc+0x120>
    14a2:	ac 01       	movw	r20, r24
    14a4:	4e 5f       	subi	r20, 0xFE	; 254
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	24 17       	cp	r18, r20
    14aa:	35 07       	cpc	r19, r21
    14ac:	48 f0       	brcs	.+18     	; 0x14c0 <malloc+0x120>
    14ae:	4e 0f       	add	r20, r30
    14b0:	5f 1f       	adc	r21, r31
    14b2:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <__brkval+0x1>
    14b6:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <__brkval>
    14ba:	81 93       	st	Z+, r24
    14bc:	91 93       	st	Z+, r25
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <malloc+0x124>
    14c0:	e0 e0       	ldi	r30, 0x00	; 0
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	cf 01       	movw	r24, r30
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	08 95       	ret

000014d0 <free>:
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	09 f4       	brne	.+2      	; 0x14da <free+0xa>
    14d8:	81 c0       	rjmp	.+258    	; 0x15dc <free+0x10c>
    14da:	fc 01       	movw	r30, r24
    14dc:	32 97       	sbiw	r30, 0x02	; 2
    14de:	13 82       	std	Z+3, r1	; 0x03
    14e0:	12 82       	std	Z+2, r1	; 0x02
    14e2:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <__flp>
    14e6:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <__flp+0x1>
    14ea:	10 97       	sbiw	r26, 0x00	; 0
    14ec:	81 f4       	brne	.+32     	; 0x150e <free+0x3e>
    14ee:	20 81       	ld	r18, Z
    14f0:	31 81       	ldd	r19, Z+1	; 0x01
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    14fa:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    14fe:	28 17       	cp	r18, r24
    1500:	39 07       	cpc	r19, r25
    1502:	51 f5       	brne	.+84     	; 0x1558 <free+0x88>
    1504:	f0 93 5f 02 	sts	0x025F, r31	; 0x80025f <__brkval+0x1>
    1508:	e0 93 5e 02 	sts	0x025E, r30	; 0x80025e <__brkval>
    150c:	67 c0       	rjmp	.+206    	; 0x15dc <free+0x10c>
    150e:	ed 01       	movw	r28, r26
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	ce 17       	cp	r28, r30
    1516:	df 07       	cpc	r29, r31
    1518:	40 f4       	brcc	.+16     	; 0x152a <free+0x5a>
    151a:	4a 81       	ldd	r20, Y+2	; 0x02
    151c:	5b 81       	ldd	r21, Y+3	; 0x03
    151e:	9e 01       	movw	r18, r28
    1520:	41 15       	cp	r20, r1
    1522:	51 05       	cpc	r21, r1
    1524:	f1 f0       	breq	.+60     	; 0x1562 <free+0x92>
    1526:	ea 01       	movw	r28, r20
    1528:	f5 cf       	rjmp	.-22     	; 0x1514 <free+0x44>
    152a:	d3 83       	std	Z+3, r29	; 0x03
    152c:	c2 83       	std	Z+2, r28	; 0x02
    152e:	40 81       	ld	r20, Z
    1530:	51 81       	ldd	r21, Z+1	; 0x01
    1532:	84 0f       	add	r24, r20
    1534:	95 1f       	adc	r25, r21
    1536:	c8 17       	cp	r28, r24
    1538:	d9 07       	cpc	r29, r25
    153a:	59 f4       	brne	.+22     	; 0x1552 <free+0x82>
    153c:	88 81       	ld	r24, Y
    153e:	99 81       	ldd	r25, Y+1	; 0x01
    1540:	84 0f       	add	r24, r20
    1542:	95 1f       	adc	r25, r21
    1544:	02 96       	adiw	r24, 0x02	; 2
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	93 83       	std	Z+3, r25	; 0x03
    1550:	82 83       	std	Z+2, r24	; 0x02
    1552:	21 15       	cp	r18, r1
    1554:	31 05       	cpc	r19, r1
    1556:	29 f4       	brne	.+10     	; 0x1562 <free+0x92>
    1558:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <__flp+0x1>
    155c:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <__flp>
    1560:	3d c0       	rjmp	.+122    	; 0x15dc <free+0x10c>
    1562:	e9 01       	movw	r28, r18
    1564:	fb 83       	std	Y+3, r31	; 0x03
    1566:	ea 83       	std	Y+2, r30	; 0x02
    1568:	49 91       	ld	r20, Y+
    156a:	59 91       	ld	r21, Y+
    156c:	c4 0f       	add	r28, r20
    156e:	d5 1f       	adc	r29, r21
    1570:	ec 17       	cp	r30, r28
    1572:	fd 07       	cpc	r31, r29
    1574:	61 f4       	brne	.+24     	; 0x158e <free+0xbe>
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	84 0f       	add	r24, r20
    157c:	95 1f       	adc	r25, r21
    157e:	02 96       	adiw	r24, 0x02	; 2
    1580:	e9 01       	movw	r28, r18
    1582:	99 83       	std	Y+1, r25	; 0x01
    1584:	88 83       	st	Y, r24
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	9b 83       	std	Y+3, r25	; 0x03
    158c:	8a 83       	std	Y+2, r24	; 0x02
    158e:	e0 e0       	ldi	r30, 0x00	; 0
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	12 96       	adiw	r26, 0x02	; 2
    1594:	8d 91       	ld	r24, X+
    1596:	9c 91       	ld	r25, X
    1598:	13 97       	sbiw	r26, 0x03	; 3
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	19 f0       	breq	.+6      	; 0x15a4 <free+0xd4>
    159e:	fd 01       	movw	r30, r26
    15a0:	dc 01       	movw	r26, r24
    15a2:	f7 cf       	rjmp	.-18     	; 0x1592 <free+0xc2>
    15a4:	8d 91       	ld	r24, X+
    15a6:	9c 91       	ld	r25, X
    15a8:	11 97       	sbiw	r26, 0x01	; 1
    15aa:	9d 01       	movw	r18, r26
    15ac:	2e 5f       	subi	r18, 0xFE	; 254
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    15b8:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    15bc:	28 17       	cp	r18, r24
    15be:	39 07       	cpc	r19, r25
    15c0:	69 f4       	brne	.+26     	; 0x15dc <free+0x10c>
    15c2:	30 97       	sbiw	r30, 0x00	; 0
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <free+0x100>
    15c6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__flp+0x1>
    15ca:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__flp>
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <free+0x104>
    15d0:	13 82       	std	Z+3, r1	; 0x03
    15d2:	12 82       	std	Z+2, r1	; 0x02
    15d4:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <__brkval+0x1>
    15d8:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <__brkval>
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <strnlen_P>:
    15e2:	fc 01       	movw	r30, r24
    15e4:	05 90       	lpm	r0, Z+
    15e6:	61 50       	subi	r22, 0x01	; 1
    15e8:	70 40       	sbci	r23, 0x00	; 0
    15ea:	01 10       	cpse	r0, r1
    15ec:	d8 f7       	brcc	.-10     	; 0x15e4 <strnlen_P+0x2>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	8e 0f       	add	r24, r30
    15f4:	9f 1f       	adc	r25, r31
    15f6:	08 95       	ret

000015f8 <memset>:
    15f8:	dc 01       	movw	r26, r24
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <memset+0x6>
    15fc:	6d 93       	st	X+, r22
    15fe:	41 50       	subi	r20, 0x01	; 1
    1600:	50 40       	sbci	r21, 0x00	; 0
    1602:	e0 f7       	brcc	.-8      	; 0x15fc <memset+0x4>
    1604:	08 95       	ret

00001606 <strnlen>:
    1606:	fc 01       	movw	r30, r24
    1608:	61 50       	subi	r22, 0x01	; 1
    160a:	70 40       	sbci	r23, 0x00	; 0
    160c:	01 90       	ld	r0, Z+
    160e:	01 10       	cpse	r0, r1
    1610:	d8 f7       	brcc	.-10     	; 0x1608 <strnlen+0x2>
    1612:	80 95       	com	r24
    1614:	90 95       	com	r25
    1616:	8e 0f       	add	r24, r30
    1618:	9f 1f       	adc	r25, r31
    161a:	08 95       	ret

0000161c <fputc>:
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	fb 01       	movw	r30, r22
    1626:	23 81       	ldd	r18, Z+3	; 0x03
    1628:	21 fd       	sbrc	r18, 1
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <fputc+0x16>
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	9f ef       	ldi	r25, 0xFF	; 255
    1630:	2c c0       	rjmp	.+88     	; 0x168a <fputc+0x6e>
    1632:	22 ff       	sbrs	r18, 2
    1634:	16 c0       	rjmp	.+44     	; 0x1662 <fputc+0x46>
    1636:	46 81       	ldd	r20, Z+6	; 0x06
    1638:	57 81       	ldd	r21, Z+7	; 0x07
    163a:	24 81       	ldd	r18, Z+4	; 0x04
    163c:	35 81       	ldd	r19, Z+5	; 0x05
    163e:	42 17       	cp	r20, r18
    1640:	53 07       	cpc	r21, r19
    1642:	44 f4       	brge	.+16     	; 0x1654 <fputc+0x38>
    1644:	a0 81       	ld	r26, Z
    1646:	b1 81       	ldd	r27, Z+1	; 0x01
    1648:	9d 01       	movw	r18, r26
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	31 83       	std	Z+1, r19	; 0x01
    1650:	20 83       	st	Z, r18
    1652:	8c 93       	st	X, r24
    1654:	26 81       	ldd	r18, Z+6	; 0x06
    1656:	37 81       	ldd	r19, Z+7	; 0x07
    1658:	2f 5f       	subi	r18, 0xFF	; 255
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	37 83       	std	Z+7, r19	; 0x07
    165e:	26 83       	std	Z+6, r18	; 0x06
    1660:	14 c0       	rjmp	.+40     	; 0x168a <fputc+0x6e>
    1662:	8b 01       	movw	r16, r22
    1664:	ec 01       	movw	r28, r24
    1666:	fb 01       	movw	r30, r22
    1668:	00 84       	ldd	r0, Z+8	; 0x08
    166a:	f1 85       	ldd	r31, Z+9	; 0x09
    166c:	e0 2d       	mov	r30, r0
    166e:	09 95       	icall
    1670:	89 2b       	or	r24, r25
    1672:	e1 f6       	brne	.-72     	; 0x162c <fputc+0x10>
    1674:	d8 01       	movw	r26, r16
    1676:	16 96       	adiw	r26, 0x06	; 6
    1678:	8d 91       	ld	r24, X+
    167a:	9c 91       	ld	r25, X
    167c:	17 97       	sbiw	r26, 0x07	; 7
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	17 96       	adiw	r26, 0x07	; 7
    1682:	9c 93       	st	X, r25
    1684:	8e 93       	st	-X, r24
    1686:	16 97       	sbiw	r26, 0x06	; 6
    1688:	ce 01       	movw	r24, r28
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret

00001694 <__ultoa_invert>:
    1694:	fa 01       	movw	r30, r20
    1696:	aa 27       	eor	r26, r26
    1698:	28 30       	cpi	r18, 0x08	; 8
    169a:	51 f1       	breq	.+84     	; 0x16f0 <__ultoa_invert+0x5c>
    169c:	20 31       	cpi	r18, 0x10	; 16
    169e:	81 f1       	breq	.+96     	; 0x1700 <__ultoa_invert+0x6c>
    16a0:	e8 94       	clt
    16a2:	6f 93       	push	r22
    16a4:	6e 7f       	andi	r22, 0xFE	; 254
    16a6:	6e 5f       	subi	r22, 0xFE	; 254
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	af 4f       	sbci	r26, 0xFF	; 255
    16b0:	b1 e0       	ldi	r27, 0x01	; 1
    16b2:	3e d0       	rcall	.+124    	; 0x1730 <__ultoa_invert+0x9c>
    16b4:	b4 e0       	ldi	r27, 0x04	; 4
    16b6:	3c d0       	rcall	.+120    	; 0x1730 <__ultoa_invert+0x9c>
    16b8:	67 0f       	add	r22, r23
    16ba:	78 1f       	adc	r23, r24
    16bc:	89 1f       	adc	r24, r25
    16be:	9a 1f       	adc	r25, r26
    16c0:	a1 1d       	adc	r26, r1
    16c2:	68 0f       	add	r22, r24
    16c4:	79 1f       	adc	r23, r25
    16c6:	8a 1f       	adc	r24, r26
    16c8:	91 1d       	adc	r25, r1
    16ca:	a1 1d       	adc	r26, r1
    16cc:	6a 0f       	add	r22, r26
    16ce:	71 1d       	adc	r23, r1
    16d0:	81 1d       	adc	r24, r1
    16d2:	91 1d       	adc	r25, r1
    16d4:	a1 1d       	adc	r26, r1
    16d6:	20 d0       	rcall	.+64     	; 0x1718 <__ultoa_invert+0x84>
    16d8:	09 f4       	brne	.+2      	; 0x16dc <__ultoa_invert+0x48>
    16da:	68 94       	set
    16dc:	3f 91       	pop	r19
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	26 9f       	mul	r18, r22
    16e2:	11 24       	eor	r1, r1
    16e4:	30 19       	sub	r19, r0
    16e6:	30 5d       	subi	r19, 0xD0	; 208
    16e8:	31 93       	st	Z+, r19
    16ea:	de f6       	brtc	.-74     	; 0x16a2 <__ultoa_invert+0xe>
    16ec:	cf 01       	movw	r24, r30
    16ee:	08 95       	ret
    16f0:	46 2f       	mov	r20, r22
    16f2:	47 70       	andi	r20, 0x07	; 7
    16f4:	40 5d       	subi	r20, 0xD0	; 208
    16f6:	41 93       	st	Z+, r20
    16f8:	b3 e0       	ldi	r27, 0x03	; 3
    16fa:	0f d0       	rcall	.+30     	; 0x171a <__ultoa_invert+0x86>
    16fc:	c9 f7       	brne	.-14     	; 0x16f0 <__ultoa_invert+0x5c>
    16fe:	f6 cf       	rjmp	.-20     	; 0x16ec <__ultoa_invert+0x58>
    1700:	46 2f       	mov	r20, r22
    1702:	4f 70       	andi	r20, 0x0F	; 15
    1704:	40 5d       	subi	r20, 0xD0	; 208
    1706:	4a 33       	cpi	r20, 0x3A	; 58
    1708:	18 f0       	brcs	.+6      	; 0x1710 <__ultoa_invert+0x7c>
    170a:	49 5d       	subi	r20, 0xD9	; 217
    170c:	31 fd       	sbrc	r19, 1
    170e:	40 52       	subi	r20, 0x20	; 32
    1710:	41 93       	st	Z+, r20
    1712:	02 d0       	rcall	.+4      	; 0x1718 <__ultoa_invert+0x84>
    1714:	a9 f7       	brne	.-22     	; 0x1700 <__ultoa_invert+0x6c>
    1716:	ea cf       	rjmp	.-44     	; 0x16ec <__ultoa_invert+0x58>
    1718:	b4 e0       	ldi	r27, 0x04	; 4
    171a:	a6 95       	lsr	r26
    171c:	97 95       	ror	r25
    171e:	87 95       	ror	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	ba 95       	dec	r27
    1726:	c9 f7       	brne	.-14     	; 0x171a <__ultoa_invert+0x86>
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	61 05       	cpc	r22, r1
    172c:	71 05       	cpc	r23, r1
    172e:	08 95       	ret
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	0a 2e       	mov	r0, r26
    1736:	06 94       	lsr	r0
    1738:	57 95       	ror	r21
    173a:	47 95       	ror	r20
    173c:	37 95       	ror	r19
    173e:	27 95       	ror	r18
    1740:	ba 95       	dec	r27
    1742:	c9 f7       	brne	.-14     	; 0x1736 <__ultoa_invert+0xa2>
    1744:	62 0f       	add	r22, r18
    1746:	73 1f       	adc	r23, r19
    1748:	84 1f       	adc	r24, r20
    174a:	95 1f       	adc	r25, r21
    174c:	a0 1d       	adc	r26, r0
    174e:	08 95       	ret

00001750 <__prologue_saves__>:
    1750:	2f 92       	push	r2
    1752:	3f 92       	push	r3
    1754:	4f 92       	push	r4
    1756:	5f 92       	push	r5
    1758:	6f 92       	push	r6
    175a:	7f 92       	push	r7
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	ca 1b       	sub	r28, r26
    177a:	db 0b       	sbc	r29, r27
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	09 94       	ijmp

00001788 <__epilogue_restores__>:
    1788:	2a 88       	ldd	r2, Y+18	; 0x12
    178a:	39 88       	ldd	r3, Y+17	; 0x11
    178c:	48 88       	ldd	r4, Y+16	; 0x10
    178e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1790:	6e 84       	ldd	r6, Y+14	; 0x0e
    1792:	7d 84       	ldd	r7, Y+13	; 0x0d
    1794:	8c 84       	ldd	r8, Y+12	; 0x0c
    1796:	9b 84       	ldd	r9, Y+11	; 0x0b
    1798:	aa 84       	ldd	r10, Y+10	; 0x0a
    179a:	b9 84       	ldd	r11, Y+9	; 0x09
    179c:	c8 84       	ldd	r12, Y+8	; 0x08
    179e:	df 80       	ldd	r13, Y+7	; 0x07
    17a0:	ee 80       	ldd	r14, Y+6	; 0x06
    17a2:	fd 80       	ldd	r15, Y+5	; 0x05
    17a4:	0c 81       	ldd	r16, Y+4	; 0x04
    17a6:	1b 81       	ldd	r17, Y+3	; 0x03
    17a8:	aa 81       	ldd	r26, Y+2	; 0x02
    17aa:	b9 81       	ldd	r27, Y+1	; 0x01
    17ac:	ce 0f       	add	r28, r30
    17ae:	d1 1d       	adc	r29, r1
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	ed 01       	movw	r28, r26
    17bc:	08 95       	ret

000017be <_exit>:
    17be:	f8 94       	cli

000017c0 <__stop_program>:
    17c0:	ff cf       	rjmp	.-2      	; 0x17c0 <__stop_program>
