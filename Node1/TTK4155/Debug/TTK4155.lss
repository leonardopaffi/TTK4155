
TTK4155.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  0000164c  000016e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800240  00800240  00001820  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002971  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000134a  00000000  00000000  000044a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ce  00000000  00000000  000057eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00006abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fa  00000000  00000000  000070f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001793  00000000  00000000  000079f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00009185  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_2>
       c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_print_menu+0x4e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e4       	ldi	r30, 0x4C	; 76
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 34       	cpi	r26, 0x40	; 64
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a0 e4       	ldi	r26, 0x40	; 64
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	af 34       	cpi	r26, 0x4F	; 79
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <main>
     39e:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
 */
volatile char* ext_adc = ADC_ADDRESS;

void adc_init()
{
	SFIOR = 0x01;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 bf       	out	0x30, r24	; 48
	// PB0 as OUTPUT
	DDRB = 0x01;
     3aa:	87 bb       	out	0x17, r24	; 23
	// PORTB = 0x01;
	
	// CTC, Toggle OC0 on compare match, no pre-scaler
	TCCR0 |= (1<<WGM01) | (1<<COM00) | (1<<CS00);
     3ac:	83 b7       	in	r24, 0x33	; 51
     3ae:	89 61       	ori	r24, 0x19	; 25
     3b0:	83 bf       	out	0x33, r24	; 51
	
	// Setting Output Compare Register to force the oscillator to 500kHz
	// Pin n.1 (OC0) is used
	OCR0 = 0x04;
     3b2:	84 e0       	ldi	r24, 0x04	; 4
     3b4:	81 bf       	out	0x31, r24	; 49
     3b6:	08 95       	ret

000003b8 <adc_read>:
	uint8_t offset_adc= 0x01;
	
	// Setting ADC mode for multiplexer configuration (page 8 of ADC datasheet)
	// setting channels
	// for channel 0 uint8_t adc_mode = 0b1000 0001;
	uint8_t adc_mode = (1 << SINGLE_CHANNEL_SAMPLE) | (channel);
     3b8:	80 68       	ori	r24, 0x80	; 128
	
	ext_adc[offset_adc] = adc_mode;
     3ba:	e1 e0       	ldi	r30, 0x01	; 1
     3bc:	f4 e1       	ldi	r31, 0x14	; 20
     3be:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c0:	83 ef       	ldi	r24, 0xF3	; 243
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <adc_read+0xc>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <adc_read+0x12>
     3ca:	00 00       	nop

	// Wait for conversion
	_delay_us(2000);
	
	// Returns the value inside the ADC
	return ext_adc[offset_adc];
     3cc:	80 81       	ld	r24, Z
}
     3ce:	08 95       	ret

000003d0 <CAN_init>:
#include "CAN.h"

void CAN_init(uint8_t mode)
{
     3d0:	cf 93       	push	r28
     3d2:	c8 2f       	mov	r28, r24
	MCP2515_reset();
     3d4:	0e 94 c8 02 	call	0x590	; 0x590 <MCP2515_reset>
	
	printf("%x", MCP2515_read(MCP_CANSTAT));
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MCP2515_read>
     3de:	1f 92       	push	r1
     3e0:	8f 93       	push	r24
     3e2:	86 e3       	ldi	r24, 0x36	; 54
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
	
	MCP2515_write(MCP_CNF3, 0b00000001);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	88 e2       	ldi	r24, 0x28	; 40
     3f2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	MCP2515_write(MCP_CNF2, 0b10110101);
     3f6:	65 eb       	ldi	r22, 0xB5	; 181
     3f8:	89 e2       	ldi	r24, 0x29	; 41
     3fa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	MCP2515_write(MCP_CNF1, 0b00000011);
     3fe:	63 e0       	ldi	r22, 0x03	; 3
     400:	8a e2       	ldi	r24, 0x2A	; 42
     402:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	
	MCP2515_set_mode(mode);
     406:	8c 2f       	mov	r24, r28
     408:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <MCP2515_set_mode>
	
	// Enables output interrupt
	MCP2515_write(MCP_CANINTE, 0X03);	
     40c:	63 e0       	ldi	r22, 0x03	; 3
     40e:	8b e2       	ldi	r24, 0x2B	; 43
     410:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
}
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <CAN_send>:

void CAN_send(CAN_message message)
{
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	2c 97       	sbiw	r28, 0x0c	; 12
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	e9 82       	std	Y+1, r14	; 0x01
     43e:	fa 82       	std	Y+2, r15	; 0x02
     440:	0b 83       	std	Y+3, r16	; 0x03
     442:	1c 83       	std	Y+4, r17	; 0x04
     444:	2d 83       	std	Y+5, r18	; 0x05
     446:	3e 83       	std	Y+6, r19	; 0x06
     448:	4f 83       	std	Y+7, r20	; 0x07
     44a:	58 87       	std	Y+8, r21	; 0x08
     44c:	69 87       	std	Y+9, r22	; 0x09
     44e:	7a 87       	std	Y+10, r23	; 0x0a
     450:	8b 87       	std	Y+11, r24	; 0x0b
     452:	9c 87       	std	Y+12, r25	; 0x0c
     454:	e9 80       	ldd	r14, Y+1	; 0x01
     456:	fa 80       	ldd	r15, Y+2	; 0x02
     458:	0b 81       	ldd	r16, Y+3	; 0x03
     45a:	1c 81       	ldd	r17, Y+4	; 0x04
	// Writing ID registers
	MCP2515_write(MCP_TXB0SIDH, message.id >> 3);
     45c:	b8 01       	movw	r22, r16
     45e:	76 95       	lsr	r23
     460:	67 95       	ror	r22
     462:	76 95       	lsr	r23
     464:	67 95       	ror	r22
     466:	76 95       	lsr	r23
     468:	67 95       	ror	r22
     46a:	81 e3       	ldi	r24, 0x31	; 49
     46c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, message.id << 5);
     470:	60 2f       	mov	r22, r16
     472:	62 95       	swap	r22
     474:	66 0f       	add	r22, r22
     476:	60 7e       	andi	r22, 0xE0	; 224
     478:	82 e3       	ldi	r24, 0x32	; 50
     47a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	// Setting message length
	MCP2515_write(MCP_TXB0DLC, message.length);
     47e:	6e 2d       	mov	r22, r14
     480:	85 e3       	ldi	r24, 0x35	; 53
     482:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	
	// Sending message
	for(uint8_t i = 0; i < (message.length); i++){
     486:	e1 14       	cp	r14, r1
     488:	f1 04       	cpc	r15, r1
     48a:	91 f0       	breq	.+36     	; 0x4b0 <CAN_send+0x90>
     48c:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXB0D0 + i, message.data[i]);
     48e:	e5 e0       	ldi	r30, 0x05	; 5
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ec 0f       	add	r30, r28
     494:	fd 1f       	adc	r31, r29
     496:	e1 0f       	add	r30, r17
     498:	f1 1d       	adc	r31, r1
     49a:	60 81       	ld	r22, Z
     49c:	86 e3       	ldi	r24, 0x36	; 54
     49e:	81 0f       	add	r24, r17
     4a0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, message.id << 5);
	// Setting message length
	MCP2515_write(MCP_TXB0DLC, message.length);
	
	// Sending message
	for(uint8_t i = 0; i < (message.length); i++){
     4a4:	1f 5f       	subi	r17, 0xFF	; 255
     4a6:	81 2f       	mov	r24, r17
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	8e 15       	cp	r24, r14
     4ac:	9f 05       	cpc	r25, r15
     4ae:	78 f3       	brcs	.-34     	; 0x48e <CAN_send+0x6e>
		MCP2515_write(MCP_TXB0D0 + i, message.data[i]);
		//printf("\r\nSENDING MESSAGE: \r\n data: %d\r\n", message.data[i]);
	}
	//printf("\r\n");
	// Enables sending
	MCP2515_RTS(MCP_RTS_TX0);
     4b0:	81 e8       	ldi	r24, 0x81	; 129
     4b2:	0e 94 8e 02 	call	0x51c	; 0x51c <MCP2515_RTS>
}
     4b6:	2c 96       	adiw	r28, 0x0c	; 12
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret

000004d0 <MCP2515_read>:
	SPI_master_transmit(MCP_READ_STATUS);
	value = SPI_master_read();
	SPI_slave_disable();
	
	return value;
}
     4d0:	cf 93       	push	r28
     4d2:	c8 2f       	mov	r28, r24
     4d4:	0e 94 0a 06 	call	0xc14	; 0xc14 <SPI_slave_enable>
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
     4e4:	0e 94 1a 06 	call	0xc34	; 0xc34 <SPI_master_read>
     4e8:	c8 2f       	mov	r28, r24
     4ea:	0e 94 0c 06 	call	0xc18	; 0xc18 <SPI_slave_disable>
     4ee:	8c 2f       	mov	r24, r28
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <MCP2515_write>:
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	d8 2f       	mov	r29, r24
     4fa:	c6 2f       	mov	r28, r22
     4fc:	0e 94 0a 06 	call	0xc14	; 0xc14 <SPI_slave_enable>
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
     506:	8d 2f       	mov	r24, r29
     508:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
     50c:	8c 2f       	mov	r24, r28
     50e:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
     512:	0e 94 0c 06 	call	0xc18	; 0xc18 <SPI_slave_disable>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <MCP2515_RTS>:
     51c:	cf 93       	push	r28
     51e:	c8 2f       	mov	r28, r24
     520:	8f e7       	ldi	r24, 0x7F	; 127
     522:	8c 0f       	add	r24, r28
     524:	82 30       	cpi	r24, 0x02	; 2
     526:	20 f0       	brcs	.+8      	; 0x530 <MCP2515_RTS+0x14>
     528:	c4 38       	cpi	r28, 0x84	; 132
     52a:	11 f0       	breq	.+4      	; 0x530 <MCP2515_RTS+0x14>
     52c:	c7 38       	cpi	r28, 0x87	; 135
     52e:	41 f4       	brne	.+16     	; 0x540 <MCP2515_RTS+0x24>
     530:	0e 94 0a 06 	call	0xc14	; 0xc14 <SPI_slave_enable>
     534:	8c 2f       	mov	r24, r28
     536:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
     53a:	0e 94 0c 06 	call	0xc18	; 0xc18 <SPI_slave_disable>
     53e:	0c c0       	rjmp	.+24     	; 0x558 <MCP2515_RTS+0x3c>
     540:	1f 92       	push	r1
     542:	cf 93       	push	r28
     544:	89 e6       	ldi	r24, 0x69	; 105
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t address, uint8_t byte_mask, uint8_t data)
{
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	18 2f       	mov	r17, r24
     564:	d6 2f       	mov	r29, r22
     566:	c4 2f       	mov	r28, r20
	SPI_slave_enable();
     568:	0e 94 0a 06 	call	0xc14	; 0xc14 <SPI_slave_enable>
	SPI_master_transmit(MCP_BITMOD);
     56c:	85 e0       	ldi	r24, 0x05	; 5
     56e:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
	SPI_master_transmit(address);
     572:	81 2f       	mov	r24, r17
     574:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
	SPI_master_transmit(byte_mask);
     578:	8d 2f       	mov	r24, r29
     57a:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
	SPI_master_transmit(data);
     57e:	8c 2f       	mov	r24, r28
     580:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
	SPI_slave_disable();
     584:	0e 94 0c 06 	call	0xc18	; 0xc18 <SPI_slave_disable>
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	08 95       	ret

00000590 <MCP2515_reset>:

void MCP2515_reset()
{
	SPI_slave_enable();
     590:	0e 94 0a 06 	call	0xc14	; 0xc14 <SPI_slave_enable>
	SPI_master_transmit(MCP_RESET);
     594:	80 ec       	ldi	r24, 0xC0	; 192
     596:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_master_transmit>
	SPI_slave_disable();
     59a:	0e 94 0c 06 	call	0xc18	; 0xc18 <SPI_slave_disable>
     59e:	08 95       	ret

000005a0 <MCP2515_set_mode>:
}

void MCP2515_set_mode(uint8_t mode)
{
	MCP2515_bit_modify(MCP_CANCTRL, 0xE0, mode);
     5a0:	48 2f       	mov	r20, r24
     5a2:	60 ee       	ldi	r22, 0xE0	; 224
     5a4:	8f e0       	ldi	r24, 0x0F	; 15
     5a6:	0e 94 ae 02 	call	0x55c	; 0x55c <MCP2515_bit_modify>
     5aa:	08 95       	ret

000005ac <interrupt_init>:
volatile uint8_t LEFT_BUTTON_PRESSED = 0;
volatile uint8_t JOYSTICK_BUTTON_PRESSED = 0;

void interrupt_init()
{
	cli();
     5ac:	f8 94       	cli
	
	//DDRE &= ~(1 << PE0);
	
	// Enable interrupt 0 on falling edge
	MCUCR |= (1 << ISC01);
     5ae:	85 b7       	in	r24, 0x35	; 53
     5b0:	82 60       	ori	r24, 0x02	; 2
     5b2:	85 bf       	out	0x35, r24	; 53
	
	// Enable interrupt 1 on rising edge
	MCUCR |= (1 << ISC11) | (1 << ISC10);
     5b4:	85 b7       	in	r24, 0x35	; 53
     5b6:	8c 60       	ori	r24, 0x0C	; 12
     5b8:	85 bf       	out	0x35, r24	; 53
	
	// Enable interrupt 2 on rising edge
	EMCUCR |= (1 << ISC2);
     5ba:	86 b7       	in	r24, 0x36	; 54
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	86 bf       	out	0x36, r24	; 54
	
	// Enable interrupts on MCU
	GICR |= (1 << INT2) | (1 << INT1) | (1 << INT0);
     5c0:	8b b7       	in	r24, 0x3b	; 59
     5c2:	80 6e       	ori	r24, 0xE0	; 224
     5c4:	8b bf       	out	0x3b, r24	; 59
	
	sei();
     5c6:	78 94       	sei
     5c8:	08 95       	ret

000005ca <interrupt_polling>:
// 		printf("RIGHT B\n\r");
// 		//Reset button variable
// 		RIGHT_BUTTON_PRESSED = 0;
// 	}
	
	if(LEFT_BUTTON_PRESSED)
     5ca:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     5ce:	88 23       	and	r24, r24
     5d0:	51 f0       	breq	.+20     	; 0x5e6 <interrupt_polling+0x1c>
	{
		// Do stuff
		printf("LEFT B\n\r");
     5d2:	80 e9       	ldi	r24, 0x90	; 144
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
		//Reset button variable
		LEFT_BUTTON_PRESSED = 0;
     5de:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	08 95       	ret

000005e8 <__vector_3>:
	}
	
}

ISR(INT2_vect)
{
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	8f 93       	push	r24
	// Wakes the MCU up when right button is pressed
	RIGHT_BUTTON_PRESSED = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <RIGHT_BUTTON_PRESSED>
}
     5fa:	8f 91       	pop	r24
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_2>:

ISR(INT1_vect)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	8f 93       	push	r24
	// Wakes the MCU up when left button is pressed
	LEFT_BUTTON_PRESSED = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
     618:	8f 91       	pop	r24
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <joystick_init>:
        dir.y_dir = DOWN;
    else
        dir.y_dir = Y_IDLE;

    return dir;
}
     624:	c2 9a       	sbi	0x18, 2	; 24
     626:	ba 9a       	sbi	0x17, 2	; 23
     628:	08 95       	ret

0000062a <joystick_pos_read>:
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     63c:	d8 2f       	mov	r29, r24
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     644:	c8 2f       	mov	r28, r24
     646:	2d 2f       	mov	r18, r29
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	a4 e6       	ldi	r26, 0x64	; 100
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	0e 94 56 06 	call	0xcac	; 0xcac <__umulhisi3>
     652:	c1 2c       	mov	r12, r1
     654:	d1 2c       	mov	r13, r1
     656:	76 01       	movw	r14, r12
     658:	ca 94       	dec	r12
     65a:	a7 01       	movw	r20, r14
     65c:	96 01       	movw	r18, r12
     65e:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divmodsi4>
     662:	d2 2f       	mov	r29, r18
     664:	2c 2f       	mov	r18, r28
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a4 e6       	ldi	r26, 0x64	; 100
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	0e 94 56 06 	call	0xcac	; 0xcac <__umulhisi3>
     670:	a7 01       	movw	r20, r14
     672:	96 01       	movw	r18, r12
     674:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divmodsi4>
     678:	92 2f       	mov	r25, r18
     67a:	8d 2f       	mov	r24, r29
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	08 95       	ret

0000068a <print_joystick_position>:
     68a:	cf 93       	push	r28
     68c:	0e 94 15 03 	call	0x62a	; 0x62a <joystick_pos_read>
     690:	c9 2f       	mov	r28, r25
     692:	1f 92       	push	r1
     694:	8f 93       	push	r24
     696:	89 e9       	ldi	r24, 0x99	; 153
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
     6a2:	1f 92       	push	r1
     6a4:	cf 93       	push	r28
     6a6:	80 ea       	ldi	r24, 0xA0	; 160
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
     6b2:	8d b7       	in	r24, 0x3d	; 61
     6b4:	9e b7       	in	r25, 0x3e	; 62
     6b6:	08 96       	adiw	r24, 0x08	; 8
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	9e bf       	out	0x3e, r25	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	8d bf       	out	0x3d, r24	; 61
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <joystick_menu_navigation>:

void joystick_menu_navigation(uint8_t* playing)
{
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
    // Updating the button state
    button = !((PINB & (1 << PB2)) / 4);
     6d0:	86 b3       	in	r24, 0x16	; 22
     6d2:	84 70       	andi	r24, 0x04	; 4
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	03 96       	adiw	r24, 0x03	; 3
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	07 97       	sbiw	r24, 0x07	; 7
     6dc:	08 f0       	brcs	.+2      	; 0x6e0 <joystick_menu_navigation+0x1a>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	20 93 42 02 	sts	0x0242, r18	; 0x800242 <button>

    // Getting the position
    pos_t joystick_position = joystick_pos_read();
     6e4:	0e 94 15 03 	call	0x62a	; 0x62a <joystick_pos_read>
     6e8:	19 2f       	mov	r17, r25

    if (button == 1 && stop == 0 && *playing == 0 && is_main_menu)
     6ea:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <button>
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	b9 f5       	brne	.+110    	; 0x760 <joystick_menu_navigation+0x9a>
     6f2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stop>
     6f6:	81 11       	cpse	r24, r1
     6f8:	5e c0       	rjmp	.+188    	; 0x7b6 <joystick_menu_navigation+0xf0>
     6fa:	88 81       	ld	r24, Y
     6fc:	81 11       	cpse	r24, r1
     6fe:	5b c0       	rjmp	.+182    	; 0x7b6 <joystick_menu_navigation+0xf0>
     700:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <is_main_menu>
     704:	88 23       	and	r24, r24
     706:	09 f4       	brne	.+2      	; 0x70a <joystick_menu_navigation+0x44>
     708:	56 c0       	rjmp	.+172    	; 0x7b6 <joystick_menu_navigation+0xf0>
    {
        // Button on menu is pressed
        printf("%d\r\n", menu_pos);
     70a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     70e:	1f 92       	push	r1
     710:	8f 93       	push	r24
     712:	84 e6       	ldi	r24, 0x64	; 100
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
		
		switch(menu_pos)
     71e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	59 f0       	breq	.+22     	; 0x744 <joystick_menu_navigation+0x7e>
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	79 f0       	breq	.+30     	; 0x750 <joystick_menu_navigation+0x8a>
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	91 f4       	brne	.+36     	; 0x75a <joystick_menu_navigation+0x94>
		{
			case PLAYMENU:
				*playing = 1;
     736:	01 e0       	ldi	r16, 0x01	; 1
     738:	08 83       	st	Y, r16
				OLED_print_menu(PLAYMENU);
     73a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <OLED_print_menu>
				is_main_menu = 1; 
     73e:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <is_main_menu>
				break;
     742:	0b c0       	rjmp	.+22     	; 0x75a <joystick_menu_navigation+0x94>
			
			case CREDITS:
				OLED_print_menu(CREDITS);
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <OLED_print_menu>
				is_main_menu = 0;
     74a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <is_main_menu>
				break;
     74e:	05 c0       	rjmp	.+10     	; 0x75a <joystick_menu_navigation+0x94>
			
			case ABOUT:
				OLED_print_menu(ABOUT);
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <OLED_print_menu>
				is_main_menu = 0;
     756:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <is_main_menu>
			
			default:
				break;
		}
		
        stop = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stop>
    }

    // Navigating when button is NOT pressed
    if (button == 0 && *playing == 0 && is_main_menu)
     760:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <button>
     764:	81 11       	cpse	r24, r1
     766:	27 c0       	rjmp	.+78     	; 0x7b6 <joystick_menu_navigation+0xf0>
     768:	88 81       	ld	r24, Y
     76a:	81 11       	cpse	r24, r1
     76c:	24 c0       	rjmp	.+72     	; 0x7b6 <joystick_menu_navigation+0xf0>
     76e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <is_main_menu>
     772:	88 23       	and	r24, r24
     774:	01 f1       	breq	.+64     	; 0x7b6 <joystick_menu_navigation+0xf0>
    {
        // Going UP
        if (joystick_position.y > IDLE_Y_MAX)
     776:	11 35       	cpi	r17, 0x51	; 81
     778:	68 f0       	brcs	.+26     	; 0x794 <joystick_menu_navigation+0xce>
        {
            if (stop == 0 && button == 0)
     77a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stop>
     77e:	81 11       	cpse	r24, r1
     780:	1a c0       	rjmp	.+52     	; 0x7b6 <joystick_menu_navigation+0xf0>
            {
                OLED_update_menu(menu_pos - 1);
     782:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     786:	81 50       	subi	r24, 0x01	; 1
     788:	0e 94 64 05 	call	0xac8	; 0xac8 <OLED_update_menu>
                stop = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stop>
     792:	11 c0       	rjmp	.+34     	; 0x7b6 <joystick_menu_navigation+0xf0>
            }
        }
        // Going DOWN
        else if (joystick_position.y < IDLE_Y_MIN)
     794:	14 31       	cpi	r17, 0x14	; 20
     796:	68 f4       	brcc	.+26     	; 0x7b2 <joystick_menu_navigation+0xec>
        {
            if (stop == 0 && button == 0)
     798:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <stop>
     79c:	81 11       	cpse	r24, r1
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <joystick_menu_navigation+0xf0>
            {
                OLED_update_menu(menu_pos + 1);
     7a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menu_pos>
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	0e 94 64 05 	call	0xac8	; 0xac8 <OLED_update_menu>
                stop = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <stop>
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <joystick_menu_navigation+0xf0>
        // Position: IDLE
        else
        {
            if (button == 0)
            {
                stop = 0;
     7b2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <stop>
            }
        }
    }
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <SRAM_init>:
 * 
 */
void SRAM_init(void)
{
	/*Enabling memory reading*/
	MCUCR |= (1 << SRE);
     7c0:	85 b7       	in	r24, 0x35	; 53
     7c2:	80 68       	ori	r24, 0x80	; 128
     7c4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     7c6:	80 b7       	in	r24, 0x30	; 48
     7c8:	80 62       	ori	r24, 0x20	; 32
     7ca:	80 bf       	out	0x30, r24	; 48
     7cc:	08 95       	ret

000007ce <main>:
#include <stdlib.h>

uint8_t playing = 0;

int main(void)
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	2c 97       	sbiw	r28, 0x0c	; 12
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR);
     7e2:	8f e1       	ldi	r24, 0x1F	; 31
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 2a 06 	call	0xc54	; 0xc54 <USART_Init>

	SRAM_init();
     7ea:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <SRAM_init>

	OLED_init();
     7ee:	0e 94 88 04 	call	0x910	; 0x910 <OLED_init>
	
	interrupt_init();
     7f2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <interrupt_init>

	adc_init();
     7f6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
		
	joystick_init();
     7fa:	0e 94 12 03 	call	0x624	; 0x624 <joystick_init>
		
	SPI_master_init();
     7fe:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_master_init>
		
	OLED_print_menu(MAIN);
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <OLED_print_menu>
	
	CAN_init(MODE_NORMAL);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <CAN_init>
	
	CAN_message a;
	a.id = 2;
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	9c 83       	std	Y+4, r25	; 0x04
     814:	8b 83       	std	Y+3, r24	; 0x03
	a.length = 4;
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
	
	pos_t j_pos;
	sliderpos_t slider_pos;
	
	printf("I'm NODE 1\r\n");
     81e:	8b ec       	ldi	r24, 0xCB	; 203
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <puts>
	
	/* MAIN LOOP */
	while (1)
	{
		j_pos = joystick_pos_read();
     826:	0e 94 15 03 	call	0x62a	; 0x62a <joystick_pos_read>
     82a:	b8 2e       	mov	r11, r24
     82c:	c9 2e       	mov	r12, r25
		slider_pos = slider_pos_read();
     82e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <slider_pos_read>
     832:	d9 2e       	mov	r13, r25
		
		joystick_menu_navigation(&playing);	
     834:	84 e4       	ldi	r24, 0x44	; 68
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	0e 94 63 03 	call	0x6c6	; 0x6c6 <joystick_menu_navigation>
		
		interrupt_polling();
     83c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <interrupt_polling>
		
		if(playing)
     840:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <playing>
     844:	88 23       	and	r24, r24
     846:	79 f3       	breq	.-34     	; 0x826 <main+0x58>
		{
			a.data[0] = j_pos.x;
			a.data[1] = j_pos.y;
			a.data[2] = button;
     848:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <button>
			a.data[3] = slider_pos.R;
		
			CAN_send(a);	
     84c:	e9 80       	ldd	r14, Y+1	; 0x01
     84e:	fa 80       	ldd	r15, Y+2	; 0x02
     850:	0b 81       	ldd	r16, Y+3	; 0x03
     852:	1c 81       	ldd	r17, Y+4	; 0x04
     854:	2b 2d       	mov	r18, r11
     856:	3c 2d       	mov	r19, r12
     858:	5d 2d       	mov	r21, r13
     85a:	69 85       	ldd	r22, Y+9	; 0x09
     85c:	7a 85       	ldd	r23, Y+10	; 0x0a
     85e:	8b 85       	ldd	r24, Y+11	; 0x0b
     860:	9c 85       	ldd	r25, Y+12	; 0x0c
     862:	0e 94 10 02 	call	0x420	; 0x420 <CAN_send>
			
			print_joystick_position();
     866:	0e 94 45 03 	call	0x68a	; 0x68a <print_joystick_position>
			print_slider_position();
     86a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <print_slider_position>
     86e:	db cf       	rjmp	.-74     	; 0x826 <main+0x58>

00000870 <OLED_goto_line>:
}

void OLED_goto_line(uint8_t line)
{

    OLED_write_command(0xB0 | line);
     870:	80 6b       	ori	r24, 0xB0	; 176
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     872:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     876:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     87a:	80 83       	st	Z, r24
     87c:	08 95       	ret

0000087e <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column)
{

    uint8_t numLow = column % 16;
     87e:	98 2f       	mov	r25, r24
     880:	9f 70       	andi	r25, 0x0F	; 15
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     882:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     886:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     88a:	90 83       	st	Z, r25
{

    uint8_t numLow = column % 16;
    uint8_t numHigh = column / 16;
    OLED_write_command(numLow);
    OLED_write_command(0x10 + numHigh);
     88c:	82 95       	swap	r24
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	80 5f       	subi	r24, 0xF0	; 240
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     892:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     896:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     89a:	80 83       	st	Z, r24
     89c:	08 95       	ret

0000089e <OLED_set_pos>:
    OLED_write_command(numLow);
    OLED_write_command(0x10 + numHigh);
}

void OLED_set_pos(uint8_t line, uint8_t column)
{
     89e:	cf 93       	push	r28
     8a0:	c6 2f       	mov	r28, r22
    OLED_goto_line(line);
     8a2:	0e 94 38 04 	call	0x870	; 0x870 <OLED_goto_line>
    OLED_goto_column(column);
     8a6:	8c 2f       	mov	r24, r28
     8a8:	0e 94 3f 04 	call	0x87e	; 0x87e <OLED_goto_column>
}
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <OLED_fill_line>:

void OLED_fill_line(uint8_t line)
{
     8b0:	cf 93       	push	r28
     8b2:	c8 2f       	mov	r28, r24
    OLED_set_pos(line, 0);
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_set_pos>
     8ba:	80 e8       	ldi	r24, 0x80	; 128
     8bc:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_data(uint8_t d)
{
    // Writing data to OLED
    OLED_DATA[0] = d;
     8be:	2f ef       	ldi	r18, 0xFF	; 255
     8c0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_DATA>
     8c4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_DATA+0x1>
     8c8:	20 83       	st	Z, r18
     8ca:	01 97       	sbiw	r24, 0x01	; 1

void OLED_fill_line(uint8_t line)
{
    OLED_set_pos(line, 0);

    for (int col = 0; col < 128; col++)
     8cc:	c9 f7       	brne	.-14     	; 0x8c0 <OLED_fill_line+0x10>
    {
        OLED_write_data(~0b00000000);
    }
    OLED_goto_line(line);
     8ce:	8c 2f       	mov	r24, r28
     8d0:	0e 94 38 04 	call	0x870	; 0x870 <OLED_goto_line>
}
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <OLED_clear_all>:

void OLED_clear_all()
{
     8d8:	cf 93       	push	r28
    OLED_set_pos(0, 0);
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_set_pos>
    for (uint8_t lin = 0; lin < 8; lin++)
     8e2:	c0 e0       	ldi	r28, 0x00	; 0
    {
        OLED_set_pos(lin, 0);
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	8c 2f       	mov	r24, r28
     8e8:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_set_pos>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
}

void OLED_write_data(uint8_t d)
{
    // Writing data to OLED
    OLED_DATA[0] = d;
     8ee:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_DATA>
     8f2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_DATA+0x1>
     8f6:	10 82       	st	Z, r1
{
    OLED_set_pos(0, 0);
    for (uint8_t lin = 0; lin < 8; lin++)
    {
        OLED_set_pos(lin, 0);
        for (uint8_t col = 0; col < 128; col++)
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 38       	cpi	r24, 0x80	; 128
     8fc:	c1 f7       	brne	.-16     	; 0x8ee <OLED_clear_all+0x16>
}

void OLED_clear_all()
{
    OLED_set_pos(0, 0);
    for (uint8_t lin = 0; lin < 8; lin++)
     8fe:	cf 5f       	subi	r28, 0xFF	; 255
     900:	c8 30       	cpi	r28, 0x08	; 8
     902:	81 f7       	brne	.-32     	; 0x8e4 <OLED_clear_all+0xc>
        {
            OLED_write_data(0x00);
        }
    }

    OLED_set_pos(0, 0);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_set_pos>
}
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <OLED_init>:
volatile char *OLED_DATA = (char *)0x1200;

void OLED_write_command(uint8_t c)
{
    // Writing command to OLED
    OLED_COMMAND[0] = c;
     910:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     914:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     918:	8e ea       	ldi	r24, 0xAE	; 174
     91a:	80 83       	st	Z, r24
     91c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     920:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     924:	81 ea       	ldi	r24, 0xA1	; 161
     926:	80 83       	st	Z, r24
     928:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     92c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     930:	8a ed       	ldi	r24, 0xDA	; 218
     932:	80 83       	st	Z, r24
     934:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     938:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     93c:	82 e1       	ldi	r24, 0x12	; 18
     93e:	80 83       	st	Z, r24
     940:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     944:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     948:	88 ec       	ldi	r24, 0xC8	; 200
     94a:	80 83       	st	Z, r24
     94c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     950:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     954:	88 ea       	ldi	r24, 0xA8	; 168
     956:	80 83       	st	Z, r24
     958:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     95c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     960:	8f e3       	ldi	r24, 0x3F	; 63
     962:	80 83       	st	Z, r24
     964:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     968:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     96c:	85 ed       	ldi	r24, 0xD5	; 213
     96e:	80 83       	st	Z, r24
     970:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     974:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	80 83       	st	Z, r24
     97c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     980:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     984:	81 e8       	ldi	r24, 0x81	; 129
     986:	80 83       	st	Z, r24
     988:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     98c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     990:	80 e5       	ldi	r24, 0x50	; 80
     992:	80 83       	st	Z, r24
     994:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     998:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     99c:	89 ed       	ldi	r24, 0xD9	; 217
     99e:	80 83       	st	Z, r24
     9a0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9a4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9a8:	81 e2       	ldi	r24, 0x21	; 33
     9aa:	80 83       	st	Z, r24
     9ac:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9b0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9b4:	80 e2       	ldi	r24, 0x20	; 32
     9b6:	80 83       	st	Z, r24
     9b8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9bc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	80 83       	st	Z, r24
     9c4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9c8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9cc:	8b ed       	ldi	r24, 0xDB	; 219
     9ce:	80 83       	st	Z, r24
     9d0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9d4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9d8:	80 e3       	ldi	r24, 0x30	; 48
     9da:	80 83       	st	Z, r24
     9dc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9e0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9e4:	8d ea       	ldi	r24, 0xAD	; 173
     9e6:	80 83       	st	Z, r24
     9e8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9ec:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9f0:	10 82       	st	Z, r1
     9f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     9f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     9fa:	84 ea       	ldi	r24, 0xA4	; 164
     9fc:	80 83       	st	Z, r24
     9fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     a02:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     a06:	86 ea       	ldi	r24, 0xA6	; 166
     a08:	80 83       	st	Z, r24
     a0a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_COMMAND>
     a0e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_COMMAND+0x1>
     a12:	8f ea       	ldi	r24, 0xAF	; 175
     a14:	80 83       	st	Z, r24

    OLED_write_command(0xA6); // Set normal display

    OLED_write_command(0xAF); // Set display on

    OLED_clear_all();
     a16:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <OLED_clear_all>
     a1a:	08 95       	ret

00000a1c <OLED_print_char>:

    OLED_set_pos(0, 0);
}

void OLED_print_char(char c, uint8_t line, uint8_t col)
{
     a1c:	cf 93       	push	r28
     a1e:	c8 2f       	mov	r28, r24
     a20:	86 2f       	mov	r24, r22
    OLED_set_pos(line, col);
     a22:	64 2f       	mov	r22, r20
     a24:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_set_pos>
     a28:	2c 2f       	mov	r18, r28
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e0 59       	subi	r30, 0x90	; 144
     a3c:	f0 40       	sbci	r31, 0x00	; 0
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	22 0f       	add	r18, r18
     a48:	33 1f       	adc	r19, r19
     a4a:	28 58       	subi	r18, 0x88	; 136
     a4c:	30 40       	sbci	r19, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
    {
        // (c-32) is mapping the ascii table to the PROGMEM matrix
        // ex. space character is ASCII 32, 0 in the matrix
        // ex. 'A' is ASCII 65, 65-32=33 in the matrix
        OLED_write_data(pgm_read_byte(&(font8[c - 32][i])));
     a4e:	84 91       	lpm	r24, Z
}

void OLED_write_data(uint8_t d)
{
    // Writing data to OLED
    OLED_DATA[0] = d;
     a50:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OLED_DATA>
     a54:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OLED_DATA+0x1>
     a58:	8c 93       	st	X, r24
     a5a:	31 96       	adiw	r30, 0x01	; 1

void OLED_print_char(char c, uint8_t line, uint8_t col)
{
    OLED_set_pos(line, col);

    for (uint8_t i = 0; i < 8; i++)
     a5c:	e2 17       	cp	r30, r18
     a5e:	f3 07       	cpc	r31, r19
     a60:	b1 f7       	brne	.-20     	; 0xa4e <OLED_print_char+0x32>
        // (c-32) is mapping the ascii table to the PROGMEM matrix
        // ex. space character is ASCII 32, 0 in the matrix
        // ex. 'A' is ASCII 65, 65-32=33 in the matrix
        OLED_write_data(pgm_read_byte(&(font8[c - 32][i])));
    }
}
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <OLED_print_string>:

void OLED_print_string(char *s, uint8_t length, uint8_t line)
{
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	d4 2f       	mov	r29, r20
    // Check if the string is too long, prints ~
    if (length * 8 > 128)
     a74:	26 2f       	mov	r18, r22
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	21 31       	cpi	r18, 0x11	; 17
     a7a:	31 05       	cpc	r19, r1
     a7c:	1c f4       	brge	.+6      	; 0xa84 <OLED_print_string+0x1e>
        OLED_print_char('~', line, 0);
        return 0;
    }

    // Printing character by character
    for (uint8_t i = 0; i < length; i++)
     a7e:	61 11       	cpse	r22, r1
     a80:	07 c0       	rjmp	.+14     	; 0xa90 <OLED_print_string+0x2a>
     a82:	1b c0       	rjmp	.+54     	; 0xaba <OLED_print_string+0x54>
void OLED_print_string(char *s, uint8_t length, uint8_t line)
{
    // Check if the string is too long, prints ~
    if (length * 8 > 128)
    {
        OLED_print_char('~', line, 0);
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	6d 2f       	mov	r22, r29
     a88:	8e e7       	ldi	r24, 0x7E	; 126
     a8a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <OLED_print_char>
        return 0;
     a8e:	15 c0       	rjmp	.+42     	; 0xaba <OLED_print_string+0x54>
     a90:	8c 01       	movw	r16, r24
     a92:	61 50       	subi	r22, 0x01	; 1
     a94:	e6 2e       	mov	r14, r22
     a96:	f1 2c       	mov	r15, r1
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	e2 1a       	sub	r14, r18
     a9c:	f2 0a       	sbc	r15, r18
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
    }

    // Printing character by character
    for (uint8_t i = 0; i < length; i++)
     aa2:	c0 e0       	ldi	r28, 0x00	; 0
    {
        OLED_print_char(s[i], line, 8 * i);
     aa4:	4c 2f       	mov	r20, r28
     aa6:	6d 2f       	mov	r22, r29
     aa8:	f8 01       	movw	r30, r16
     aaa:	81 91       	ld	r24, Z+
     aac:	8f 01       	movw	r16, r30
     aae:	0e 94 0e 05 	call	0xa1c	; 0xa1c <OLED_print_char>
     ab2:	c8 5f       	subi	r28, 0xF8	; 248
        OLED_print_char('~', line, 0);
        return 0;
    }

    // Printing character by character
    for (uint8_t i = 0; i < length; i++)
     ab4:	0e 15       	cp	r16, r14
     ab6:	1f 05       	cpc	r17, r15
     ab8:	a9 f7       	brne	.-22     	; 0xaa4 <OLED_print_string+0x3e>
    {
        OLED_print_char(s[i], line, 8 * i);
    }
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <OLED_update_menu>:

void OLED_update_menu(uint8_t pos)
{
     ac8:	cf 93       	push	r28
    // Updating menu position and drawing a '<' on the right side
    // of the screen
    if (pos > 0 && pos < 7)
     aca:	9f ef       	ldi	r25, 0xFF	; 255
     acc:	98 0f       	add	r25, r24
     ace:	96 30       	cpi	r25, 0x06	; 6
     ad0:	78 f4       	brcc	.+30     	; 0xaf0 <OLED_update_menu+0x28>
     ad2:	c8 2f       	mov	r28, r24
    {
        OLED_print_char(' ', menu_pos, 120);
     ad4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <menu_pos>
     ad8:	48 e7       	ldi	r20, 0x78	; 120
     ada:	80 e2       	ldi	r24, 0x20	; 32
     adc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <OLED_print_char>
        menu_pos = pos;
     ae0:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <menu_pos>
        OLED_print_char('<', menu_pos, 120);
     ae4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <menu_pos>
     ae8:	48 e7       	ldi	r20, 0x78	; 120
     aea:	8c e3       	ldi	r24, 0x3C	; 60
     aec:	0e 94 0e 05 	call	0xa1c	; 0xa1c <OLED_print_char>
    }
}
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <OLED_print_menu>:

void OLED_print_menu(uint8_t menutype)
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	c8 2f       	mov	r28, r24
	// Clearing the OLED before printing
	OLED_clear_all();
     afc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <OLED_clear_all>
    // Selecting type of menu
    switch (menutype)
     b00:	c1 30       	cpi	r28, 0x01	; 1
     b02:	01 f1       	breq	.+64     	; 0xb44 <OLED_print_menu+0x50>
     b04:	30 f0       	brcs	.+12     	; 0xb12 <OLED_print_menu+0x1e>
     b06:	c2 30       	cpi	r28, 0x02	; 2
     b08:	61 f1       	breq	.+88     	; 0xb62 <OLED_print_menu+0x6e>
     b0a:	c3 30       	cpi	r28, 0x03	; 3
     b0c:	09 f4       	brne	.+2      	; 0xb10 <OLED_print_menu+0x1c>
     b0e:	3f c0       	rjmp	.+126    	; 0xb8e <OLED_print_menu+0x9a>
     b10:	53 c0       	rjmp	.+166    	; 0xbb8 <OLED_print_menu+0xc4>
    {
    case MAIN:
        OLED_fill_line(0);
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
     b18:	0a e2       	ldi	r16, 0x2A	; 42
     b1a:	11 e0       	ldi	r17, 0x01	; 1
        // Drawing menu entries
        for (uint8_t i = 0; i < 4; i++)
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
        {
            OLED_print_string(main_menu[i].name, main_menu[i].length, i + 1);
     b1e:	cf 5f       	subi	r28, 0xFF	; 255
     b20:	4c 2f       	mov	r20, r28
     b22:	f8 01       	movw	r30, r16
     b24:	62 81       	ldd	r22, Z+2	; 0x02
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	0e 94 33 05 	call	0xa66	; 0xa66 <OLED_print_string>
     b2e:	0d 5f       	subi	r16, 0xFD	; 253
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
    switch (menutype)
    {
    case MAIN:
        OLED_fill_line(0);
        // Drawing menu entries
        for (uint8_t i = 0; i < 4; i++)
     b32:	c4 30       	cpi	r28, 0x04	; 4
     b34:	a1 f7       	brne	.-24     	; 0xb1e <OLED_print_menu+0x2a>
        {
            OLED_print_string(main_menu[i].name, main_menu[i].length, i + 1);
        }
        OLED_fill_line(7);
     b36:	87 e0       	ldi	r24, 0x07	; 7
     b38:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
        // Setting initial position
        OLED_update_menu(1);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	0e 94 64 05 	call	0xac8	; 0xac8 <OLED_update_menu>
        break;
     b42:	3a c0       	rjmp	.+116    	; 0xbb8 <OLED_print_menu+0xc4>
	case PLAYMENU:
		OLED_fill_line(0);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
		// Drawing menu entries
		OLED_print_string(play_menu[0].name, play_menu[0].length, 1);
     b4a:	e4 e2       	ldi	r30, 0x24	; 36
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	62 81       	ldd	r22, Z+2	; 0x02
     b52:	80 81       	ld	r24, Z
     b54:	91 81       	ldd	r25, Z+1	; 0x01
     b56:	0e 94 33 05 	call	0xa66	; 0xa66 <OLED_print_string>
		OLED_fill_line(7);
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
		break;
     b60:	2b c0       	rjmp	.+86     	; 0xbb8 <OLED_print_menu+0xc4>
	case CREDITS:
	    OLED_fill_line(0);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
     b68:	08 e1       	ldi	r16, 0x18	; 24
     b6a:	11 e0       	ldi	r17, 0x01	; 1
	    // Drawing menu entries
	    for (uint8_t i = 0; i < 4; i++)
     b6c:	c0 e0       	ldi	r28, 0x00	; 0
	    {
		    OLED_print_string(credits_menu[i].name, credits_menu[i].length, i + 1);
     b6e:	cf 5f       	subi	r28, 0xFF	; 255
     b70:	4c 2f       	mov	r20, r28
     b72:	f8 01       	movw	r30, r16
     b74:	62 81       	ldd	r22, Z+2	; 0x02
     b76:	80 81       	ld	r24, Z
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	0e 94 33 05 	call	0xa66	; 0xa66 <OLED_print_string>
     b7e:	0d 5f       	subi	r16, 0xFD	; 253
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
		OLED_fill_line(7);
		break;
	case CREDITS:
	    OLED_fill_line(0);
	    // Drawing menu entries
	    for (uint8_t i = 0; i < 4; i++)
     b82:	c4 30       	cpi	r28, 0x04	; 4
     b84:	a1 f7       	brne	.-24     	; 0xb6e <OLED_print_menu+0x7a>
	    {
		    OLED_print_string(credits_menu[i].name, credits_menu[i].length, i + 1);
	    }
	    OLED_fill_line(7);
     b86:	87 e0       	ldi	r24, 0x07	; 7
     b88:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
	    break;
     b8c:	15 c0       	rjmp	.+42     	; 0xbb8 <OLED_print_menu+0xc4>
	case ABOUT:
		OLED_fill_line(0);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
     b94:	0c e0       	ldi	r16, 0x0C	; 12
     b96:	11 e0       	ldi	r17, 0x01	; 1
		// Drawing menu entries
		for (uint8_t i = 0; i < 4; i++)
     b98:	c0 e0       	ldi	r28, 0x00	; 0
		{
			OLED_print_string(about_menu[i].name, about_menu[i].length, i + 1);
     b9a:	cf 5f       	subi	r28, 0xFF	; 255
     b9c:	4c 2f       	mov	r20, r28
     b9e:	f8 01       	movw	r30, r16
     ba0:	62 81       	ldd	r22, Z+2	; 0x02
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	0e 94 33 05 	call	0xa66	; 0xa66 <OLED_print_string>
     baa:	0d 5f       	subi	r16, 0xFD	; 253
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
	    OLED_fill_line(7);
	    break;
	case ABOUT:
		OLED_fill_line(0);
		// Drawing menu entries
		for (uint8_t i = 0; i < 4; i++)
     bae:	c4 30       	cpi	r28, 0x04	; 4
     bb0:	a1 f7       	brne	.-24     	; 0xb9a <OLED_print_menu+0xa6>
		{
			OLED_print_string(about_menu[i].name, about_menu[i].length, i + 1);
		}
		OLED_fill_line(7);
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_fill_line>
		break;

    default:
        break;
    }
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <slider_pos_read>:
#include "Slider.h"

sliderpos_t slider_pos_read()
{
     bc0:	cf 93       	push	r28
	sliderpos_t pos = {adc_read(S_L_ADDRESS), adc_read(S_R_ADDRESS)};
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     bc8:	c8 2f       	mov	r28, r24
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <adc_read>
     bd0:	98 2f       	mov	r25, r24
	
	return pos;
}
     bd2:	8c 2f       	mov	r24, r28
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <print_slider_position>:

void print_slider_position()
{
     bd8:	cf 93       	push	r28
	sliderpos_t slider_position = slider_pos_read();
     bda:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <slider_pos_read>
     bde:	c9 2f       	mov	r28, r25
	
	printf("L: %d " , slider_position.L);
     be0:	1f 92       	push	r1
     be2:	8f 93       	push	r24
     be4:	80 e3       	ldi	r24, 0x30	; 48
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
	printf("R: %d\n\r", slider_position.R);
     bf0:	1f 92       	push	r1
     bf2:	cf 93       	push	r28
     bf4:	87 e3       	ldi	r24, 0x37	; 55
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	0e 94 d2 06 	call	0xda4	; 0xda4 <printf>
}
     c00:	8d b7       	in	r24, 0x3d	; 61
     c02:	9e b7       	in	r25, 0x3e	; 62
     c04:	08 96       	adiw	r24, 0x08	; 8
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	9e bf       	out	0x3e, r25	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	8d bf       	out	0x3d, r24	; 61
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <SPI_slave_enable>:
#include "SPI.h"

void SPI_slave_enable()
{
	// Set SS-pin LOW
	PORTB &= ~(1 << PB4);
     c14:	c4 98       	cbi	0x18, 4	; 24
     c16:	08 95       	ret

00000c18 <SPI_slave_disable>:
}

void SPI_slave_disable()
{
	// Set SS-pin HIGH
	PORTB |= (1 << PB4);
     c18:	c4 9a       	sbi	0x18, 4	; 24
     c1a:	08 95       	ret

00000c1c <SPI_master_init>:

void SPI_master_init()
{
	// Code adapted from datasheet
	// Set SS (PB4), MOSI (PB5) and SCK (PB7) as output
	DDRB = (1<<PB4)|(1<<PB5)|(1<<PB7);
     c1c:	80 eb       	ldi	r24, 0xB0	; 176
     c1e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6);
     c20:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     c22:	81 e5       	ldi	r24, 0x51	; 81
     c24:	8d b9       	out	0x0d, r24	; 13
	// Starting with slave disabled
	SPI_slave_disable();
     c26:	0e 94 0c 06 	call	0xc18	; 0xc18 <SPI_slave_disable>
     c2a:	08 95       	ret

00000c2c <SPI_master_transmit>:
}

void SPI_master_transmit(char cData)
{
	// Start transmission
	SPDR = cData;
     c2c:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1 << SPIF)))
     c2e:	77 9b       	sbis	0x0e, 7	; 14
     c30:	fe cf       	rjmp	.-4      	; 0xc2e <SPI_master_transmit+0x2>
		;
}
     c32:	08 95       	ret

00000c34 <SPI_master_read>:

char SPI_master_read()
{
	// Shifting the register by 8bit 
	SPDR = 0x00;
     c34:	1f b8       	out	0x0f, r1	; 15
	// Wait for complete reception
	while(!(SPSR & (1 << SPIF)))
     c36:	77 9b       	sbis	0x0e, 7	; 14
     c38:	fe cf       	rjmp	.-4      	; 0xc36 <SPI_master_read+0x2>
		;
		
	return SPDR;
     c3a:	8f b1       	in	r24, 0x0f	; 15
     c3c:	08 95       	ret

00000c3e <USART_Transmit>:

int USART_Transmit(unsigned char data)
{
    /*Adapted from the datasheet*/
    /*Wait for empty transmit buffer*/
    while (!(UCSR0A & (1 << UDRE0)))
     c3e:	5d 9b       	sbis	0x0b, 5	; 11
     c40:	fe cf       	rjmp	.-4      	; 0xc3e <USART_Transmit>
        ;
    /*Put data into buffer, sends the data*/
    UDR0 = data;
     c42:	8c b9       	out	0x0c, r24	; 12

    return 0;
}
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	08 95       	ret

00000c4a <USART_Receive>:

int USART_Receive(void)
{
    /* Wait for data to be received */
    while (!(UCSR0A & (1 << RXC0)))
     c4a:	5f 9b       	sbis	0x0b, 7	; 11
     c4c:	fe cf       	rjmp	.-4      	; 0xc4a <USART_Receive>
        ;
    /* Get and return received data from buffer */
    return UDR0;
     c4e:	8c b1       	in	r24, 0x0c	; 12
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	08 95       	ret

00000c54 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
    /*Adapted from the datasheet*/
    /*Set baud rate*/
    UBRR0H = (unsigned char)(ubrr >> 8);
     c54:	90 bd       	out	0x20, r25	; 32
    UBRR0L = (unsigned char)ubrr;
     c56:	89 b9       	out	0x09, r24	; 9
    /*Enable receiver and transmitter*/
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     c58:	88 e1       	ldi	r24, 0x18	; 24
     c5a:	8a b9       	out	0x0a, r24	; 10
    /*Set frame format: 8data*/
    UCSR0C = (1 << URSEL0) | (3 << UCSZ00);
     c5c:	86 e8       	ldi	r24, 0x86	; 134
     c5e:	80 bd       	out	0x20, r24	; 32
    fdevopen(USART_Transmit, USART_Receive);
     c60:	65 e2       	ldi	r22, 0x25	; 37
     c62:	76 e0       	ldi	r23, 0x06	; 6
     c64:	8f e1       	ldi	r24, 0x1F	; 31
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	0e 94 87 06 	call	0xd0e	; 0xd0e <fdevopen>
     c6c:	08 95       	ret

00000c6e <__divmodsi4>:
     c6e:	05 2e       	mov	r0, r21
     c70:	97 fb       	bst	r25, 7
     c72:	1e f4       	brtc	.+6      	; 0xc7a <__divmodsi4+0xc>
     c74:	00 94       	com	r0
     c76:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__negsi2>
     c7a:	57 fd       	sbrc	r21, 7
     c7c:	07 d0       	rcall	.+14     	; 0xc8c <__divmodsi4_neg2>
     c7e:	0e 94 65 06 	call	0xcca	; 0xcca <__udivmodsi4>
     c82:	07 fc       	sbrc	r0, 7
     c84:	03 d0       	rcall	.+6      	; 0xc8c <__divmodsi4_neg2>
     c86:	4e f4       	brtc	.+18     	; 0xc9a <__divmodsi4_exit>
     c88:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__negsi2>

00000c8c <__divmodsi4_neg2>:
     c8c:	50 95       	com	r21
     c8e:	40 95       	com	r20
     c90:	30 95       	com	r19
     c92:	21 95       	neg	r18
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	4f 4f       	sbci	r20, 0xFF	; 255
     c98:	5f 4f       	sbci	r21, 0xFF	; 255

00000c9a <__divmodsi4_exit>:
     c9a:	08 95       	ret

00000c9c <__negsi2>:
     c9c:	90 95       	com	r25
     c9e:	80 95       	com	r24
     ca0:	70 95       	com	r23
     ca2:	61 95       	neg	r22
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	8f 4f       	sbci	r24, 0xFF	; 255
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	08 95       	ret

00000cac <__umulhisi3>:
     cac:	a2 9f       	mul	r26, r18
     cae:	b0 01       	movw	r22, r0
     cb0:	b3 9f       	mul	r27, r19
     cb2:	c0 01       	movw	r24, r0
     cb4:	a3 9f       	mul	r26, r19
     cb6:	70 0d       	add	r23, r0
     cb8:	81 1d       	adc	r24, r1
     cba:	11 24       	eor	r1, r1
     cbc:	91 1d       	adc	r25, r1
     cbe:	b2 9f       	mul	r27, r18
     cc0:	70 0d       	add	r23, r0
     cc2:	81 1d       	adc	r24, r1
     cc4:	11 24       	eor	r1, r1
     cc6:	91 1d       	adc	r25, r1
     cc8:	08 95       	ret

00000cca <__udivmodsi4>:
     cca:	a1 e2       	ldi	r26, 0x21	; 33
     ccc:	1a 2e       	mov	r1, r26
     cce:	aa 1b       	sub	r26, r26
     cd0:	bb 1b       	sub	r27, r27
     cd2:	fd 01       	movw	r30, r26
     cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <__udivmodsi4_ep>

00000cd6 <__udivmodsi4_loop>:
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	ee 1f       	adc	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	a2 17       	cp	r26, r18
     ce0:	b3 07       	cpc	r27, r19
     ce2:	e4 07       	cpc	r30, r20
     ce4:	f5 07       	cpc	r31, r21
     ce6:	20 f0       	brcs	.+8      	; 0xcf0 <__udivmodsi4_ep>
     ce8:	a2 1b       	sub	r26, r18
     cea:	b3 0b       	sbc	r27, r19
     cec:	e4 0b       	sbc	r30, r20
     cee:	f5 0b       	sbc	r31, r21

00000cf0 <__udivmodsi4_ep>:
     cf0:	66 1f       	adc	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	88 1f       	adc	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	1a 94       	dec	r1
     cfa:	69 f7       	brne	.-38     	; 0xcd6 <__udivmodsi4_loop>
     cfc:	60 95       	com	r22
     cfe:	70 95       	com	r23
     d00:	80 95       	com	r24
     d02:	90 95       	com	r25
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
     d08:	bd 01       	movw	r22, r26
     d0a:	cf 01       	movw	r24, r30
     d0c:	08 95       	ret

00000d0e <fdevopen>:
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	31 f4       	brne	.+12     	; 0xd26 <fdevopen+0x18>
     d1a:	61 15       	cp	r22, r1
     d1c:	71 05       	cpc	r23, r1
     d1e:	19 f4       	brne	.+6      	; 0xd26 <fdevopen+0x18>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	3a c0       	rjmp	.+116    	; 0xd9a <fdevopen+0x8c>
     d26:	8b 01       	movw	r16, r22
     d28:	ec 01       	movw	r28, r24
     d2a:	6e e0       	ldi	r22, 0x0E	; 14
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <calloc>
     d36:	fc 01       	movw	r30, r24
     d38:	89 2b       	or	r24, r25
     d3a:	91 f3       	breq	.-28     	; 0xd20 <fdevopen+0x12>
     d3c:	80 e8       	ldi	r24, 0x80	; 128
     d3e:	83 83       	std	Z+3, r24	; 0x03
     d40:	01 15       	cp	r16, r1
     d42:	11 05       	cpc	r17, r1
     d44:	71 f0       	breq	.+28     	; 0xd62 <fdevopen+0x54>
     d46:	13 87       	std	Z+11, r17	; 0x0b
     d48:	02 87       	std	Z+10, r16	; 0x0a
     d4a:	81 e8       	ldi	r24, 0x81	; 129
     d4c:	83 83       	std	Z+3, r24	; 0x03
     d4e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <__iob>
     d52:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__iob+0x1>
     d56:	89 2b       	or	r24, r25
     d58:	21 f4       	brne	.+8      	; 0xd62 <fdevopen+0x54>
     d5a:	f0 93 46 02 	sts	0x0246, r31	; 0x800246 <__iob+0x1>
     d5e:	e0 93 45 02 	sts	0x0245, r30	; 0x800245 <__iob>
     d62:	20 97       	sbiw	r28, 0x00	; 0
     d64:	c9 f0       	breq	.+50     	; 0xd98 <fdevopen+0x8a>
     d66:	d1 87       	std	Z+9, r29	; 0x09
     d68:	c0 87       	std	Z+8, r28	; 0x08
     d6a:	83 81       	ldd	r24, Z+3	; 0x03
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	83 83       	std	Z+3, r24	; 0x03
     d70:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <__iob+0x2>
     d74:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <__iob+0x3>
     d78:	89 2b       	or	r24, r25
     d7a:	71 f4       	brne	.+28     	; 0xd98 <fdevopen+0x8a>
     d7c:	f0 93 48 02 	sts	0x0248, r31	; 0x800248 <__iob+0x3>
     d80:	e0 93 47 02 	sts	0x0247, r30	; 0x800247 <__iob+0x2>
     d84:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <__iob+0x4>
     d88:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <__iob+0x5>
     d8c:	89 2b       	or	r24, r25
     d8e:	21 f4       	brne	.+8      	; 0xd98 <fdevopen+0x8a>
     d90:	f0 93 4a 02 	sts	0x024A, r31	; 0x80024a <__iob+0x5>
     d94:	e0 93 49 02 	sts	0x0249, r30	; 0x800249 <__iob+0x4>
     d98:	cf 01       	movw	r24, r30
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <printf>:
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 ed       	ldi	r30, 0xD8	; 216
     daa:	f6 e0       	ldi	r31, 0x06	; 6
     dac:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__prologue_saves__+0x20>
     db0:	ae 01       	movw	r20, r28
     db2:	4b 5f       	subi	r20, 0xFB	; 251
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	fa 01       	movw	r30, r20
     db8:	61 91       	ld	r22, Z+
     dba:	71 91       	ld	r23, Z+
     dbc:	af 01       	movw	r20, r30
     dbe:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <__iob+0x2>
     dc2:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <__iob+0x3>
     dc6:	0e 94 18 07 	call	0xe30	; 0xe30 <vfprintf>
     dca:	e2 e0       	ldi	r30, 0x02	; 2
     dcc:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__epilogue_restores__+0x20>

00000dd0 <puts>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <__iob+0x2>
     ddc:	f0 91 48 02 	lds	r31, 0x0248	; 0x800248 <__iob+0x3>
     de0:	23 81       	ldd	r18, Z+3	; 0x03
     de2:	21 ff       	sbrs	r18, 1
     de4:	1b c0       	rjmp	.+54     	; 0xe1c <puts+0x4c>
     de6:	8c 01       	movw	r16, r24
     de8:	d0 e0       	ldi	r29, 0x00	; 0
     dea:	c0 e0       	ldi	r28, 0x00	; 0
     dec:	f8 01       	movw	r30, r16
     dee:	81 91       	ld	r24, Z+
     df0:	8f 01       	movw	r16, r30
     df2:	60 91 47 02 	lds	r22, 0x0247	; 0x800247 <__iob+0x2>
     df6:	70 91 48 02 	lds	r23, 0x0248	; 0x800248 <__iob+0x3>
     dfa:	db 01       	movw	r26, r22
     dfc:	18 96       	adiw	r26, 0x08	; 8
     dfe:	ed 91       	ld	r30, X+
     e00:	fc 91       	ld	r31, X
     e02:	19 97       	sbiw	r26, 0x09	; 9
     e04:	88 23       	and	r24, r24
     e06:	31 f0       	breq	.+12     	; 0xe14 <puts+0x44>
     e08:	09 95       	icall
     e0a:	89 2b       	or	r24, r25
     e0c:	79 f3       	breq	.-34     	; 0xdec <puts+0x1c>
     e0e:	df ef       	ldi	r29, 0xFF	; 255
     e10:	cf ef       	ldi	r28, 0xFF	; 255
     e12:	ec cf       	rjmp	.-40     	; 0xdec <puts+0x1c>
     e14:	8a e0       	ldi	r24, 0x0A	; 10
     e16:	09 95       	icall
     e18:	89 2b       	or	r24, r25
     e1a:	19 f0       	breq	.+6      	; 0xe22 <puts+0x52>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	9f ef       	ldi	r25, 0xFF	; 255
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <puts+0x56>
     e22:	8d 2f       	mov	r24, r29
     e24:	9c 2f       	mov	r25, r28
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	08 95       	ret

00000e30 <vfprintf>:
     e30:	ab e0       	ldi	r26, 0x0B	; 11
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ee e1       	ldi	r30, 0x1E	; 30
     e36:	f7 e0       	ldi	r31, 0x07	; 7
     e38:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__prologue_saves__>
     e3c:	6c 01       	movw	r12, r24
     e3e:	7b 01       	movw	r14, r22
     e40:	8a 01       	movw	r16, r20
     e42:	fc 01       	movw	r30, r24
     e44:	17 82       	std	Z+7, r1	; 0x07
     e46:	16 82       	std	Z+6, r1	; 0x06
     e48:	83 81       	ldd	r24, Z+3	; 0x03
     e4a:	81 ff       	sbrs	r24, 1
     e4c:	cc c1       	rjmp	.+920    	; 0x11e6 <vfprintf+0x3b6>
     e4e:	ce 01       	movw	r24, r28
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	3c 01       	movw	r6, r24
     e54:	f6 01       	movw	r30, r12
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	f7 01       	movw	r30, r14
     e5a:	93 fd       	sbrc	r25, 3
     e5c:	85 91       	lpm	r24, Z+
     e5e:	93 ff       	sbrs	r25, 3
     e60:	81 91       	ld	r24, Z+
     e62:	7f 01       	movw	r14, r30
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <vfprintf+0x3a>
     e68:	ba c1       	rjmp	.+884    	; 0x11de <vfprintf+0x3ae>
     e6a:	85 32       	cpi	r24, 0x25	; 37
     e6c:	39 f4       	brne	.+14     	; 0xe7c <vfprintf+0x4c>
     e6e:	93 fd       	sbrc	r25, 3
     e70:	85 91       	lpm	r24, Z+
     e72:	93 ff       	sbrs	r25, 3
     e74:	81 91       	ld	r24, Z+
     e76:	7f 01       	movw	r14, r30
     e78:	85 32       	cpi	r24, 0x25	; 37
     e7a:	29 f4       	brne	.+10     	; 0xe86 <vfprintf+0x56>
     e7c:	b6 01       	movw	r22, r12
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e84:	e7 cf       	rjmp	.-50     	; 0xe54 <vfprintf+0x24>
     e86:	91 2c       	mov	r9, r1
     e88:	21 2c       	mov	r2, r1
     e8a:	31 2c       	mov	r3, r1
     e8c:	ff e1       	ldi	r31, 0x1F	; 31
     e8e:	f3 15       	cp	r31, r3
     e90:	d8 f0       	brcs	.+54     	; 0xec8 <vfprintf+0x98>
     e92:	8b 32       	cpi	r24, 0x2B	; 43
     e94:	79 f0       	breq	.+30     	; 0xeb4 <vfprintf+0x84>
     e96:	38 f4       	brcc	.+14     	; 0xea6 <vfprintf+0x76>
     e98:	80 32       	cpi	r24, 0x20	; 32
     e9a:	79 f0       	breq	.+30     	; 0xeba <vfprintf+0x8a>
     e9c:	83 32       	cpi	r24, 0x23	; 35
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <vfprintf+0x98>
     ea0:	23 2d       	mov	r18, r3
     ea2:	20 61       	ori	r18, 0x10	; 16
     ea4:	1d c0       	rjmp	.+58     	; 0xee0 <vfprintf+0xb0>
     ea6:	8d 32       	cpi	r24, 0x2D	; 45
     ea8:	61 f0       	breq	.+24     	; 0xec2 <vfprintf+0x92>
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	69 f4       	brne	.+26     	; 0xec8 <vfprintf+0x98>
     eae:	23 2d       	mov	r18, r3
     eb0:	21 60       	ori	r18, 0x01	; 1
     eb2:	16 c0       	rjmp	.+44     	; 0xee0 <vfprintf+0xb0>
     eb4:	83 2d       	mov	r24, r3
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	38 2e       	mov	r3, r24
     eba:	e3 2d       	mov	r30, r3
     ebc:	e4 60       	ori	r30, 0x04	; 4
     ebe:	3e 2e       	mov	r3, r30
     ec0:	2a c0       	rjmp	.+84     	; 0xf16 <vfprintf+0xe6>
     ec2:	f3 2d       	mov	r31, r3
     ec4:	f8 60       	ori	r31, 0x08	; 8
     ec6:	1d c0       	rjmp	.+58     	; 0xf02 <vfprintf+0xd2>
     ec8:	37 fc       	sbrc	r3, 7
     eca:	2d c0       	rjmp	.+90     	; 0xf26 <vfprintf+0xf6>
     ecc:	20 ed       	ldi	r18, 0xD0	; 208
     ece:	28 0f       	add	r18, r24
     ed0:	2a 30       	cpi	r18, 0x0A	; 10
     ed2:	40 f0       	brcs	.+16     	; 0xee4 <vfprintf+0xb4>
     ed4:	8e 32       	cpi	r24, 0x2E	; 46
     ed6:	b9 f4       	brne	.+46     	; 0xf06 <vfprintf+0xd6>
     ed8:	36 fc       	sbrc	r3, 6
     eda:	81 c1       	rjmp	.+770    	; 0x11de <vfprintf+0x3ae>
     edc:	23 2d       	mov	r18, r3
     ede:	20 64       	ori	r18, 0x40	; 64
     ee0:	32 2e       	mov	r3, r18
     ee2:	19 c0       	rjmp	.+50     	; 0xf16 <vfprintf+0xe6>
     ee4:	36 fe       	sbrs	r3, 6
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <vfprintf+0xc4>
     ee8:	8a e0       	ldi	r24, 0x0A	; 10
     eea:	98 9e       	mul	r9, r24
     eec:	20 0d       	add	r18, r0
     eee:	11 24       	eor	r1, r1
     ef0:	92 2e       	mov	r9, r18
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <vfprintf+0xe6>
     ef4:	ea e0       	ldi	r30, 0x0A	; 10
     ef6:	2e 9e       	mul	r2, r30
     ef8:	20 0d       	add	r18, r0
     efa:	11 24       	eor	r1, r1
     efc:	22 2e       	mov	r2, r18
     efe:	f3 2d       	mov	r31, r3
     f00:	f0 62       	ori	r31, 0x20	; 32
     f02:	3f 2e       	mov	r3, r31
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <vfprintf+0xe6>
     f06:	8c 36       	cpi	r24, 0x6C	; 108
     f08:	21 f4       	brne	.+8      	; 0xf12 <vfprintf+0xe2>
     f0a:	83 2d       	mov	r24, r3
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	38 2e       	mov	r3, r24
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0xe6>
     f12:	88 36       	cpi	r24, 0x68	; 104
     f14:	41 f4       	brne	.+16     	; 0xf26 <vfprintf+0xf6>
     f16:	f7 01       	movw	r30, r14
     f18:	93 fd       	sbrc	r25, 3
     f1a:	85 91       	lpm	r24, Z+
     f1c:	93 ff       	sbrs	r25, 3
     f1e:	81 91       	ld	r24, Z+
     f20:	7f 01       	movw	r14, r30
     f22:	81 11       	cpse	r24, r1
     f24:	b3 cf       	rjmp	.-154    	; 0xe8c <vfprintf+0x5c>
     f26:	98 2f       	mov	r25, r24
     f28:	9f 7d       	andi	r25, 0xDF	; 223
     f2a:	95 54       	subi	r25, 0x45	; 69
     f2c:	93 30       	cpi	r25, 0x03	; 3
     f2e:	28 f4       	brcc	.+10     	; 0xf3a <vfprintf+0x10a>
     f30:	0c 5f       	subi	r16, 0xFC	; 252
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	9f e3       	ldi	r25, 0x3F	; 63
     f36:	99 83       	std	Y+1, r25	; 0x01
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <vfprintf+0x124>
     f3a:	83 36       	cpi	r24, 0x63	; 99
     f3c:	31 f0       	breq	.+12     	; 0xf4a <vfprintf+0x11a>
     f3e:	83 37       	cpi	r24, 0x73	; 115
     f40:	71 f0       	breq	.+28     	; 0xf5e <vfprintf+0x12e>
     f42:	83 35       	cpi	r24, 0x53	; 83
     f44:	09 f0       	breq	.+2      	; 0xf48 <vfprintf+0x118>
     f46:	59 c0       	rjmp	.+178    	; 0xffa <vfprintf+0x1ca>
     f48:	21 c0       	rjmp	.+66     	; 0xf8c <vfprintf+0x15c>
     f4a:	f8 01       	movw	r30, r16
     f4c:	80 81       	ld	r24, Z
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	88 24       	eor	r8, r8
     f56:	83 94       	inc	r8
     f58:	91 2c       	mov	r9, r1
     f5a:	53 01       	movw	r10, r6
     f5c:	13 c0       	rjmp	.+38     	; 0xf84 <vfprintf+0x154>
     f5e:	28 01       	movw	r4, r16
     f60:	f2 e0       	ldi	r31, 0x02	; 2
     f62:	4f 0e       	add	r4, r31
     f64:	51 1c       	adc	r5, r1
     f66:	f8 01       	movw	r30, r16
     f68:	a0 80       	ld	r10, Z
     f6a:	b1 80       	ldd	r11, Z+1	; 0x01
     f6c:	36 fe       	sbrs	r3, 6
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <vfprintf+0x146>
     f70:	69 2d       	mov	r22, r9
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0x14a>
     f76:	6f ef       	ldi	r22, 0xFF	; 255
     f78:	7f ef       	ldi	r23, 0xFF	; 255
     f7a:	c5 01       	movw	r24, r10
     f7c:	0e 94 48 0a 	call	0x1490	; 0x1490 <strnlen>
     f80:	4c 01       	movw	r8, r24
     f82:	82 01       	movw	r16, r4
     f84:	f3 2d       	mov	r31, r3
     f86:	ff 77       	andi	r31, 0x7F	; 127
     f88:	3f 2e       	mov	r3, r31
     f8a:	16 c0       	rjmp	.+44     	; 0xfb8 <vfprintf+0x188>
     f8c:	28 01       	movw	r4, r16
     f8e:	22 e0       	ldi	r18, 0x02	; 2
     f90:	42 0e       	add	r4, r18
     f92:	51 1c       	adc	r5, r1
     f94:	f8 01       	movw	r30, r16
     f96:	a0 80       	ld	r10, Z
     f98:	b1 80       	ldd	r11, Z+1	; 0x01
     f9a:	36 fe       	sbrs	r3, 6
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <vfprintf+0x174>
     f9e:	69 2d       	mov	r22, r9
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <vfprintf+0x178>
     fa4:	6f ef       	ldi	r22, 0xFF	; 255
     fa6:	7f ef       	ldi	r23, 0xFF	; 255
     fa8:	c5 01       	movw	r24, r10
     faa:	0e 94 36 0a 	call	0x146c	; 0x146c <strnlen_P>
     fae:	4c 01       	movw	r8, r24
     fb0:	f3 2d       	mov	r31, r3
     fb2:	f0 68       	ori	r31, 0x80	; 128
     fb4:	3f 2e       	mov	r3, r31
     fb6:	82 01       	movw	r16, r4
     fb8:	33 fc       	sbrc	r3, 3
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <vfprintf+0x1c2>
     fbc:	82 2d       	mov	r24, r2
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	88 16       	cp	r8, r24
     fc2:	99 06       	cpc	r9, r25
     fc4:	b0 f4       	brcc	.+44     	; 0xff2 <vfprintf+0x1c2>
     fc6:	b6 01       	movw	r22, r12
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     fd0:	2a 94       	dec	r2
     fd2:	f4 cf       	rjmp	.-24     	; 0xfbc <vfprintf+0x18c>
     fd4:	f5 01       	movw	r30, r10
     fd6:	37 fc       	sbrc	r3, 7
     fd8:	85 91       	lpm	r24, Z+
     fda:	37 fe       	sbrs	r3, 7
     fdc:	81 91       	ld	r24, Z+
     fde:	5f 01       	movw	r10, r30
     fe0:	b6 01       	movw	r22, r12
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     fe8:	21 10       	cpse	r2, r1
     fea:	2a 94       	dec	r2
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	82 1a       	sub	r8, r18
     ff0:	91 08       	sbc	r9, r1
     ff2:	81 14       	cp	r8, r1
     ff4:	91 04       	cpc	r9, r1
     ff6:	71 f7       	brne	.-36     	; 0xfd4 <vfprintf+0x1a4>
     ff8:	e8 c0       	rjmp	.+464    	; 0x11ca <vfprintf+0x39a>
     ffa:	84 36       	cpi	r24, 0x64	; 100
     ffc:	11 f0       	breq	.+4      	; 0x1002 <vfprintf+0x1d2>
     ffe:	89 36       	cpi	r24, 0x69	; 105
    1000:	41 f5       	brne	.+80     	; 0x1052 <vfprintf+0x222>
    1002:	f8 01       	movw	r30, r16
    1004:	37 fe       	sbrs	r3, 7
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <vfprintf+0x1e6>
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	0c 5f       	subi	r16, 0xFC	; 252
    1012:	1f 4f       	sbci	r17, 0xFF	; 255
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <vfprintf+0x1f6>
    1016:	60 81       	ld	r22, Z
    1018:	71 81       	ldd	r23, Z+1	; 0x01
    101a:	07 2e       	mov	r0, r23
    101c:	00 0c       	add	r0, r0
    101e:	88 0b       	sbc	r24, r24
    1020:	99 0b       	sbc	r25, r25
    1022:	0e 5f       	subi	r16, 0xFE	; 254
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	f3 2d       	mov	r31, r3
    1028:	ff 76       	andi	r31, 0x6F	; 111
    102a:	3f 2e       	mov	r3, r31
    102c:	97 ff       	sbrs	r25, 7
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <vfprintf+0x212>
    1030:	90 95       	com	r25
    1032:	80 95       	com	r24
    1034:	70 95       	com	r23
    1036:	61 95       	neg	r22
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	f0 68       	ori	r31, 0x80	; 128
    1040:	3f 2e       	mov	r3, r31
    1042:	2a e0       	ldi	r18, 0x0A	; 10
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	a3 01       	movw	r20, r6
    1048:	0e 94 8f 0a 	call	0x151e	; 0x151e <__ultoa_invert>
    104c:	88 2e       	mov	r8, r24
    104e:	86 18       	sub	r8, r6
    1050:	45 c0       	rjmp	.+138    	; 0x10dc <vfprintf+0x2ac>
    1052:	85 37       	cpi	r24, 0x75	; 117
    1054:	31 f4       	brne	.+12     	; 0x1062 <vfprintf+0x232>
    1056:	23 2d       	mov	r18, r3
    1058:	2f 7e       	andi	r18, 0xEF	; 239
    105a:	b2 2e       	mov	r11, r18
    105c:	2a e0       	ldi	r18, 0x0A	; 10
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	25 c0       	rjmp	.+74     	; 0x10ac <vfprintf+0x27c>
    1062:	93 2d       	mov	r25, r3
    1064:	99 7f       	andi	r25, 0xF9	; 249
    1066:	b9 2e       	mov	r11, r25
    1068:	8f 36       	cpi	r24, 0x6F	; 111
    106a:	c1 f0       	breq	.+48     	; 0x109c <vfprintf+0x26c>
    106c:	18 f4       	brcc	.+6      	; 0x1074 <vfprintf+0x244>
    106e:	88 35       	cpi	r24, 0x58	; 88
    1070:	79 f0       	breq	.+30     	; 0x1090 <vfprintf+0x260>
    1072:	b5 c0       	rjmp	.+362    	; 0x11de <vfprintf+0x3ae>
    1074:	80 37       	cpi	r24, 0x70	; 112
    1076:	19 f0       	breq	.+6      	; 0x107e <vfprintf+0x24e>
    1078:	88 37       	cpi	r24, 0x78	; 120
    107a:	21 f0       	breq	.+8      	; 0x1084 <vfprintf+0x254>
    107c:	b0 c0       	rjmp	.+352    	; 0x11de <vfprintf+0x3ae>
    107e:	e9 2f       	mov	r30, r25
    1080:	e0 61       	ori	r30, 0x10	; 16
    1082:	be 2e       	mov	r11, r30
    1084:	b4 fe       	sbrs	r11, 4
    1086:	0d c0       	rjmp	.+26     	; 0x10a2 <vfprintf+0x272>
    1088:	fb 2d       	mov	r31, r11
    108a:	f4 60       	ori	r31, 0x04	; 4
    108c:	bf 2e       	mov	r11, r31
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <vfprintf+0x272>
    1090:	34 fe       	sbrs	r3, 4
    1092:	0a c0       	rjmp	.+20     	; 0x10a8 <vfprintf+0x278>
    1094:	29 2f       	mov	r18, r25
    1096:	26 60       	ori	r18, 0x06	; 6
    1098:	b2 2e       	mov	r11, r18
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <vfprintf+0x278>
    109c:	28 e0       	ldi	r18, 0x08	; 8
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <vfprintf+0x27c>
    10a2:	20 e1       	ldi	r18, 0x10	; 16
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x27c>
    10a8:	20 e1       	ldi	r18, 0x10	; 16
    10aa:	32 e0       	ldi	r19, 0x02	; 2
    10ac:	f8 01       	movw	r30, r16
    10ae:	b7 fe       	sbrs	r11, 7
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <vfprintf+0x290>
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	0c 5f       	subi	r16, 0xFC	; 252
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <vfprintf+0x29c>
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 5f       	subi	r16, 0xFE	; 254
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	a3 01       	movw	r20, r6
    10ce:	0e 94 8f 0a 	call	0x151e	; 0x151e <__ultoa_invert>
    10d2:	88 2e       	mov	r8, r24
    10d4:	86 18       	sub	r8, r6
    10d6:	fb 2d       	mov	r31, r11
    10d8:	ff 77       	andi	r31, 0x7F	; 127
    10da:	3f 2e       	mov	r3, r31
    10dc:	36 fe       	sbrs	r3, 6
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <vfprintf+0x2ca>
    10e0:	23 2d       	mov	r18, r3
    10e2:	2e 7f       	andi	r18, 0xFE	; 254
    10e4:	a2 2e       	mov	r10, r18
    10e6:	89 14       	cp	r8, r9
    10e8:	58 f4       	brcc	.+22     	; 0x1100 <vfprintf+0x2d0>
    10ea:	34 fe       	sbrs	r3, 4
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <vfprintf+0x2d4>
    10ee:	32 fc       	sbrc	r3, 2
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <vfprintf+0x2d4>
    10f2:	83 2d       	mov	r24, r3
    10f4:	8e 7e       	andi	r24, 0xEE	; 238
    10f6:	a8 2e       	mov	r10, r24
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <vfprintf+0x2d4>
    10fa:	b8 2c       	mov	r11, r8
    10fc:	a3 2c       	mov	r10, r3
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <vfprintf+0x2d6>
    1100:	b8 2c       	mov	r11, r8
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <vfprintf+0x2d6>
    1104:	b9 2c       	mov	r11, r9
    1106:	a4 fe       	sbrs	r10, 4
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <vfprintf+0x2f8>
    110a:	fe 01       	movw	r30, r28
    110c:	e8 0d       	add	r30, r8
    110e:	f1 1d       	adc	r31, r1
    1110:	80 81       	ld	r24, Z
    1112:	80 33       	cpi	r24, 0x30	; 48
    1114:	21 f4       	brne	.+8      	; 0x111e <vfprintf+0x2ee>
    1116:	9a 2d       	mov	r25, r10
    1118:	99 7e       	andi	r25, 0xE9	; 233
    111a:	a9 2e       	mov	r10, r25
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <vfprintf+0x300>
    111e:	a2 fe       	sbrs	r10, 2
    1120:	06 c0       	rjmp	.+12     	; 0x112e <vfprintf+0x2fe>
    1122:	b3 94       	inc	r11
    1124:	b3 94       	inc	r11
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <vfprintf+0x300>
    1128:	8a 2d       	mov	r24, r10
    112a:	86 78       	andi	r24, 0x86	; 134
    112c:	09 f0       	breq	.+2      	; 0x1130 <vfprintf+0x300>
    112e:	b3 94       	inc	r11
    1130:	a3 fc       	sbrc	r10, 3
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <vfprintf+0x326>
    1134:	a0 fe       	sbrs	r10, 0
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <vfprintf+0x314>
    1138:	b2 14       	cp	r11, r2
    113a:	88 f4       	brcc	.+34     	; 0x115e <vfprintf+0x32e>
    113c:	28 0c       	add	r2, r8
    113e:	92 2c       	mov	r9, r2
    1140:	9b 18       	sub	r9, r11
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <vfprintf+0x330>
    1144:	b2 14       	cp	r11, r2
    1146:	60 f4       	brcc	.+24     	; 0x1160 <vfprintf+0x330>
    1148:	b6 01       	movw	r22, r12
    114a:	80 e2       	ldi	r24, 0x20	; 32
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
    1152:	b3 94       	inc	r11
    1154:	f7 cf       	rjmp	.-18     	; 0x1144 <vfprintf+0x314>
    1156:	b2 14       	cp	r11, r2
    1158:	18 f4       	brcc	.+6      	; 0x1160 <vfprintf+0x330>
    115a:	2b 18       	sub	r2, r11
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <vfprintf+0x332>
    115e:	98 2c       	mov	r9, r8
    1160:	21 2c       	mov	r2, r1
    1162:	a4 fe       	sbrs	r10, 4
    1164:	10 c0       	rjmp	.+32     	; 0x1186 <vfprintf+0x356>
    1166:	b6 01       	movw	r22, r12
    1168:	80 e3       	ldi	r24, 0x30	; 48
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
    1170:	a2 fe       	sbrs	r10, 2
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <vfprintf+0x372>
    1174:	a1 fc       	sbrc	r10, 1
    1176:	03 c0       	rjmp	.+6      	; 0x117e <vfprintf+0x34e>
    1178:	88 e7       	ldi	r24, 0x78	; 120
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <vfprintf+0x352>
    117e:	88 e5       	ldi	r24, 0x58	; 88
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	b6 01       	movw	r22, r12
    1184:	0c c0       	rjmp	.+24     	; 0x119e <vfprintf+0x36e>
    1186:	8a 2d       	mov	r24, r10
    1188:	86 78       	andi	r24, 0x86	; 134
    118a:	59 f0       	breq	.+22     	; 0x11a2 <vfprintf+0x372>
    118c:	a1 fe       	sbrs	r10, 1
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <vfprintf+0x364>
    1190:	8b e2       	ldi	r24, 0x2B	; 43
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <vfprintf+0x366>
    1194:	80 e2       	ldi	r24, 0x20	; 32
    1196:	a7 fc       	sbrc	r10, 7
    1198:	8d e2       	ldi	r24, 0x2D	; 45
    119a:	b6 01       	movw	r22, r12
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
    11a2:	89 14       	cp	r8, r9
    11a4:	38 f4       	brcc	.+14     	; 0x11b4 <vfprintf+0x384>
    11a6:	b6 01       	movw	r22, r12
    11a8:	80 e3       	ldi	r24, 0x30	; 48
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
    11b0:	9a 94       	dec	r9
    11b2:	f7 cf       	rjmp	.-18     	; 0x11a2 <vfprintf+0x372>
    11b4:	8a 94       	dec	r8
    11b6:	f3 01       	movw	r30, r6
    11b8:	e8 0d       	add	r30, r8
    11ba:	f1 1d       	adc	r31, r1
    11bc:	80 81       	ld	r24, Z
    11be:	b6 01       	movw	r22, r12
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
    11c6:	81 10       	cpse	r8, r1
    11c8:	f5 cf       	rjmp	.-22     	; 0x11b4 <vfprintf+0x384>
    11ca:	22 20       	and	r2, r2
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <vfprintf+0x3a0>
    11ce:	42 ce       	rjmp	.-892    	; 0xe54 <vfprintf+0x24>
    11d0:	b6 01       	movw	r22, r12
    11d2:	80 e2       	ldi	r24, 0x20	; 32
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
    11da:	2a 94       	dec	r2
    11dc:	f6 cf       	rjmp	.-20     	; 0x11ca <vfprintf+0x39a>
    11de:	f6 01       	movw	r30, r12
    11e0:	86 81       	ldd	r24, Z+6	; 0x06
    11e2:	97 81       	ldd	r25, Z+7	; 0x07
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <vfprintf+0x3ba>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	2b 96       	adiw	r28, 0x0b	; 11
    11ec:	e2 e1       	ldi	r30, 0x12	; 18
    11ee:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__epilogue_restores__>

000011f2 <calloc>:
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	86 9f       	mul	r24, r22
    11fc:	80 01       	movw	r16, r0
    11fe:	87 9f       	mul	r24, r23
    1200:	10 0d       	add	r17, r0
    1202:	96 9f       	mul	r25, r22
    1204:	10 0d       	add	r17, r0
    1206:	11 24       	eor	r1, r1
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 15 09 	call	0x122a	; 0x122a <malloc>
    120e:	ec 01       	movw	r28, r24
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	29 f0       	breq	.+10     	; 0x121e <calloc+0x2c>
    1214:	a8 01       	movw	r20, r16
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	0e 94 41 0a 	call	0x1482	; 0x1482 <memset>
    121e:	ce 01       	movw	r24, r28
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <malloc>:
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	91 05       	cpc	r25, r1
    1236:	10 f4       	brcc	.+4      	; 0x123c <malloc+0x12>
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <__flp>
    1240:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <__flp+0x1>
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	30 97       	sbiw	r30, 0x00	; 0
    124e:	19 f1       	breq	.+70     	; 0x1296 <malloc+0x6c>
    1250:	40 81       	ld	r20, Z
    1252:	51 81       	ldd	r21, Z+1	; 0x01
    1254:	02 81       	ldd	r16, Z+2	; 0x02
    1256:	13 81       	ldd	r17, Z+3	; 0x03
    1258:	48 17       	cp	r20, r24
    125a:	59 07       	cpc	r21, r25
    125c:	c8 f0       	brcs	.+50     	; 0x1290 <malloc+0x66>
    125e:	84 17       	cp	r24, r20
    1260:	95 07       	cpc	r25, r21
    1262:	69 f4       	brne	.+26     	; 0x127e <malloc+0x54>
    1264:	10 97       	sbiw	r26, 0x00	; 0
    1266:	31 f0       	breq	.+12     	; 0x1274 <malloc+0x4a>
    1268:	12 96       	adiw	r26, 0x02	; 2
    126a:	0c 93       	st	X, r16
    126c:	12 97       	sbiw	r26, 0x02	; 2
    126e:	13 96       	adiw	r26, 0x03	; 3
    1270:	1c 93       	st	X, r17
    1272:	27 c0       	rjmp	.+78     	; 0x12c2 <malloc+0x98>
    1274:	00 93 4d 02 	sts	0x024D, r16	; 0x80024d <__flp>
    1278:	10 93 4e 02 	sts	0x024E, r17	; 0x80024e <__flp+0x1>
    127c:	22 c0       	rjmp	.+68     	; 0x12c2 <malloc+0x98>
    127e:	21 15       	cp	r18, r1
    1280:	31 05       	cpc	r19, r1
    1282:	19 f0       	breq	.+6      	; 0x128a <malloc+0x60>
    1284:	42 17       	cp	r20, r18
    1286:	53 07       	cpc	r21, r19
    1288:	18 f4       	brcc	.+6      	; 0x1290 <malloc+0x66>
    128a:	9a 01       	movw	r18, r20
    128c:	bd 01       	movw	r22, r26
    128e:	ef 01       	movw	r28, r30
    1290:	df 01       	movw	r26, r30
    1292:	f8 01       	movw	r30, r16
    1294:	db cf       	rjmp	.-74     	; 0x124c <malloc+0x22>
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	f9 f0       	breq	.+62     	; 0x12da <malloc+0xb0>
    129c:	28 1b       	sub	r18, r24
    129e:	39 0b       	sbc	r19, r25
    12a0:	24 30       	cpi	r18, 0x04	; 4
    12a2:	31 05       	cpc	r19, r1
    12a4:	80 f4       	brcc	.+32     	; 0x12c6 <malloc+0x9c>
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	61 15       	cp	r22, r1
    12ac:	71 05       	cpc	r23, r1
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <malloc+0x8e>
    12b0:	fb 01       	movw	r30, r22
    12b2:	93 83       	std	Z+3, r25	; 0x03
    12b4:	82 83       	std	Z+2, r24	; 0x02
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <malloc+0x96>
    12b8:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <__flp+0x1>
    12bc:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <__flp>
    12c0:	fe 01       	movw	r30, r28
    12c2:	32 96       	adiw	r30, 0x02	; 2
    12c4:	44 c0       	rjmp	.+136    	; 0x134e <malloc+0x124>
    12c6:	fe 01       	movw	r30, r28
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	81 93       	st	Z+, r24
    12ce:	91 93       	st	Z+, r25
    12d0:	22 50       	subi	r18, 0x02	; 2
    12d2:	31 09       	sbc	r19, r1
    12d4:	39 83       	std	Y+1, r19	; 0x01
    12d6:	28 83       	st	Y, r18
    12d8:	3a c0       	rjmp	.+116    	; 0x134e <malloc+0x124>
    12da:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <__brkval>
    12de:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <__brkval+0x1>
    12e2:	23 2b       	or	r18, r19
    12e4:	41 f4       	brne	.+16     	; 0x12f6 <malloc+0xcc>
    12e6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    12ea:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    12ee:	30 93 4c 02 	sts	0x024C, r19	; 0x80024c <__brkval+0x1>
    12f2:	20 93 4b 02 	sts	0x024B, r18	; 0x80024b <__brkval>
    12f6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12fa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12fe:	21 15       	cp	r18, r1
    1300:	31 05       	cpc	r19, r1
    1302:	41 f4       	brne	.+16     	; 0x1314 <malloc+0xea>
    1304:	2d b7       	in	r18, 0x3d	; 61
    1306:	3e b7       	in	r19, 0x3e	; 62
    1308:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    130c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1310:	24 1b       	sub	r18, r20
    1312:	35 0b       	sbc	r19, r21
    1314:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <__brkval>
    1318:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <__brkval+0x1>
    131c:	e2 17       	cp	r30, r18
    131e:	f3 07       	cpc	r31, r19
    1320:	a0 f4       	brcc	.+40     	; 0x134a <malloc+0x120>
    1322:	2e 1b       	sub	r18, r30
    1324:	3f 0b       	sbc	r19, r31
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	78 f0       	brcs	.+30     	; 0x134a <malloc+0x120>
    132c:	ac 01       	movw	r20, r24
    132e:	4e 5f       	subi	r20, 0xFE	; 254
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    1332:	24 17       	cp	r18, r20
    1334:	35 07       	cpc	r19, r21
    1336:	48 f0       	brcs	.+18     	; 0x134a <malloc+0x120>
    1338:	4e 0f       	add	r20, r30
    133a:	5f 1f       	adc	r21, r31
    133c:	50 93 4c 02 	sts	0x024C, r21	; 0x80024c <__brkval+0x1>
    1340:	40 93 4b 02 	sts	0x024B, r20	; 0x80024b <__brkval>
    1344:	81 93       	st	Z+, r24
    1346:	91 93       	st	Z+, r25
    1348:	02 c0       	rjmp	.+4      	; 0x134e <malloc+0x124>
    134a:	e0 e0       	ldi	r30, 0x00	; 0
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	cf 01       	movw	r24, r30
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <free>:
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	09 f4       	brne	.+2      	; 0x1364 <free+0xa>
    1362:	81 c0       	rjmp	.+258    	; 0x1466 <free+0x10c>
    1364:	fc 01       	movw	r30, r24
    1366:	32 97       	sbiw	r30, 0x02	; 2
    1368:	13 82       	std	Z+3, r1	; 0x03
    136a:	12 82       	std	Z+2, r1	; 0x02
    136c:	a0 91 4d 02 	lds	r26, 0x024D	; 0x80024d <__flp>
    1370:	b0 91 4e 02 	lds	r27, 0x024E	; 0x80024e <__flp+0x1>
    1374:	10 97       	sbiw	r26, 0x00	; 0
    1376:	81 f4       	brne	.+32     	; 0x1398 <free+0x3e>
    1378:	20 81       	ld	r18, Z
    137a:	31 81       	ldd	r19, Z+1	; 0x01
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <__brkval>
    1384:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <__brkval+0x1>
    1388:	28 17       	cp	r18, r24
    138a:	39 07       	cpc	r19, r25
    138c:	51 f5       	brne	.+84     	; 0x13e2 <free+0x88>
    138e:	f0 93 4c 02 	sts	0x024C, r31	; 0x80024c <__brkval+0x1>
    1392:	e0 93 4b 02 	sts	0x024B, r30	; 0x80024b <__brkval>
    1396:	67 c0       	rjmp	.+206    	; 0x1466 <free+0x10c>
    1398:	ed 01       	movw	r28, r26
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	ce 17       	cp	r28, r30
    13a0:	df 07       	cpc	r29, r31
    13a2:	40 f4       	brcc	.+16     	; 0x13b4 <free+0x5a>
    13a4:	4a 81       	ldd	r20, Y+2	; 0x02
    13a6:	5b 81       	ldd	r21, Y+3	; 0x03
    13a8:	9e 01       	movw	r18, r28
    13aa:	41 15       	cp	r20, r1
    13ac:	51 05       	cpc	r21, r1
    13ae:	f1 f0       	breq	.+60     	; 0x13ec <free+0x92>
    13b0:	ea 01       	movw	r28, r20
    13b2:	f5 cf       	rjmp	.-22     	; 0x139e <free+0x44>
    13b4:	d3 83       	std	Z+3, r29	; 0x03
    13b6:	c2 83       	std	Z+2, r28	; 0x02
    13b8:	40 81       	ld	r20, Z
    13ba:	51 81       	ldd	r21, Z+1	; 0x01
    13bc:	84 0f       	add	r24, r20
    13be:	95 1f       	adc	r25, r21
    13c0:	c8 17       	cp	r28, r24
    13c2:	d9 07       	cpc	r29, r25
    13c4:	59 f4       	brne	.+22     	; 0x13dc <free+0x82>
    13c6:	88 81       	ld	r24, Y
    13c8:	99 81       	ldd	r25, Y+1	; 0x01
    13ca:	84 0f       	add	r24, r20
    13cc:	95 1f       	adc	r25, r21
    13ce:	02 96       	adiw	r24, 0x02	; 2
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	93 83       	std	Z+3, r25	; 0x03
    13da:	82 83       	std	Z+2, r24	; 0x02
    13dc:	21 15       	cp	r18, r1
    13de:	31 05       	cpc	r19, r1
    13e0:	29 f4       	brne	.+10     	; 0x13ec <free+0x92>
    13e2:	f0 93 4e 02 	sts	0x024E, r31	; 0x80024e <__flp+0x1>
    13e6:	e0 93 4d 02 	sts	0x024D, r30	; 0x80024d <__flp>
    13ea:	3d c0       	rjmp	.+122    	; 0x1466 <free+0x10c>
    13ec:	e9 01       	movw	r28, r18
    13ee:	fb 83       	std	Y+3, r31	; 0x03
    13f0:	ea 83       	std	Y+2, r30	; 0x02
    13f2:	49 91       	ld	r20, Y+
    13f4:	59 91       	ld	r21, Y+
    13f6:	c4 0f       	add	r28, r20
    13f8:	d5 1f       	adc	r29, r21
    13fa:	ec 17       	cp	r30, r28
    13fc:	fd 07       	cpc	r31, r29
    13fe:	61 f4       	brne	.+24     	; 0x1418 <free+0xbe>
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	84 0f       	add	r24, r20
    1406:	95 1f       	adc	r25, r21
    1408:	02 96       	adiw	r24, 0x02	; 2
    140a:	e9 01       	movw	r28, r18
    140c:	99 83       	std	Y+1, r25	; 0x01
    140e:	88 83       	st	Y, r24
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	9b 83       	std	Y+3, r25	; 0x03
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	12 96       	adiw	r26, 0x02	; 2
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	13 97       	sbiw	r26, 0x03	; 3
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	19 f0       	breq	.+6      	; 0x142e <free+0xd4>
    1428:	fd 01       	movw	r30, r26
    142a:	dc 01       	movw	r26, r24
    142c:	f7 cf       	rjmp	.-18     	; 0x141c <free+0xc2>
    142e:	8d 91       	ld	r24, X+
    1430:	9c 91       	ld	r25, X
    1432:	11 97       	sbiw	r26, 0x01	; 1
    1434:	9d 01       	movw	r18, r26
    1436:	2e 5f       	subi	r18, 0xFE	; 254
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <__brkval>
    1442:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <__brkval+0x1>
    1446:	28 17       	cp	r18, r24
    1448:	39 07       	cpc	r19, r25
    144a:	69 f4       	brne	.+26     	; 0x1466 <free+0x10c>
    144c:	30 97       	sbiw	r30, 0x00	; 0
    144e:	29 f4       	brne	.+10     	; 0x145a <free+0x100>
    1450:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__flp+0x1>
    1454:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <__flp>
    1458:	02 c0       	rjmp	.+4      	; 0x145e <free+0x104>
    145a:	13 82       	std	Z+3, r1	; 0x03
    145c:	12 82       	std	Z+2, r1	; 0x02
    145e:	b0 93 4c 02 	sts	0x024C, r27	; 0x80024c <__brkval+0x1>
    1462:	a0 93 4b 02 	sts	0x024B, r26	; 0x80024b <__brkval>
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <strnlen_P>:
    146c:	fc 01       	movw	r30, r24
    146e:	05 90       	lpm	r0, Z+
    1470:	61 50       	subi	r22, 0x01	; 1
    1472:	70 40       	sbci	r23, 0x00	; 0
    1474:	01 10       	cpse	r0, r1
    1476:	d8 f7       	brcc	.-10     	; 0x146e <strnlen_P+0x2>
    1478:	80 95       	com	r24
    147a:	90 95       	com	r25
    147c:	8e 0f       	add	r24, r30
    147e:	9f 1f       	adc	r25, r31
    1480:	08 95       	ret

00001482 <memset>:
    1482:	dc 01       	movw	r26, r24
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <memset+0x6>
    1486:	6d 93       	st	X+, r22
    1488:	41 50       	subi	r20, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	e0 f7       	brcc	.-8      	; 0x1486 <memset+0x4>
    148e:	08 95       	ret

00001490 <strnlen>:
    1490:	fc 01       	movw	r30, r24
    1492:	61 50       	subi	r22, 0x01	; 1
    1494:	70 40       	sbci	r23, 0x00	; 0
    1496:	01 90       	ld	r0, Z+
    1498:	01 10       	cpse	r0, r1
    149a:	d8 f7       	brcc	.-10     	; 0x1492 <strnlen+0x2>
    149c:	80 95       	com	r24
    149e:	90 95       	com	r25
    14a0:	8e 0f       	add	r24, r30
    14a2:	9f 1f       	adc	r25, r31
    14a4:	08 95       	ret

000014a6 <fputc>:
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	fb 01       	movw	r30, r22
    14b0:	23 81       	ldd	r18, Z+3	; 0x03
    14b2:	21 fd       	sbrc	r18, 1
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <fputc+0x16>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	2c c0       	rjmp	.+88     	; 0x1514 <fputc+0x6e>
    14bc:	22 ff       	sbrs	r18, 2
    14be:	16 c0       	rjmp	.+44     	; 0x14ec <fputc+0x46>
    14c0:	46 81       	ldd	r20, Z+6	; 0x06
    14c2:	57 81       	ldd	r21, Z+7	; 0x07
    14c4:	24 81       	ldd	r18, Z+4	; 0x04
    14c6:	35 81       	ldd	r19, Z+5	; 0x05
    14c8:	42 17       	cp	r20, r18
    14ca:	53 07       	cpc	r21, r19
    14cc:	44 f4       	brge	.+16     	; 0x14de <fputc+0x38>
    14ce:	a0 81       	ld	r26, Z
    14d0:	b1 81       	ldd	r27, Z+1	; 0x01
    14d2:	9d 01       	movw	r18, r26
    14d4:	2f 5f       	subi	r18, 0xFF	; 255
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	31 83       	std	Z+1, r19	; 0x01
    14da:	20 83       	st	Z, r18
    14dc:	8c 93       	st	X, r24
    14de:	26 81       	ldd	r18, Z+6	; 0x06
    14e0:	37 81       	ldd	r19, Z+7	; 0x07
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	37 83       	std	Z+7, r19	; 0x07
    14e8:	26 83       	std	Z+6, r18	; 0x06
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <fputc+0x6e>
    14ec:	8b 01       	movw	r16, r22
    14ee:	ec 01       	movw	r28, r24
    14f0:	fb 01       	movw	r30, r22
    14f2:	00 84       	ldd	r0, Z+8	; 0x08
    14f4:	f1 85       	ldd	r31, Z+9	; 0x09
    14f6:	e0 2d       	mov	r30, r0
    14f8:	09 95       	icall
    14fa:	89 2b       	or	r24, r25
    14fc:	e1 f6       	brne	.-72     	; 0x14b6 <fputc+0x10>
    14fe:	d8 01       	movw	r26, r16
    1500:	16 96       	adiw	r26, 0x06	; 6
    1502:	8d 91       	ld	r24, X+
    1504:	9c 91       	ld	r25, X
    1506:	17 97       	sbiw	r26, 0x07	; 7
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	17 96       	adiw	r26, 0x07	; 7
    150c:	9c 93       	st	X, r25
    150e:	8e 93       	st	-X, r24
    1510:	16 97       	sbiw	r26, 0x06	; 6
    1512:	ce 01       	movw	r24, r28
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <__ultoa_invert>:
    151e:	fa 01       	movw	r30, r20
    1520:	aa 27       	eor	r26, r26
    1522:	28 30       	cpi	r18, 0x08	; 8
    1524:	51 f1       	breq	.+84     	; 0x157a <__ultoa_invert+0x5c>
    1526:	20 31       	cpi	r18, 0x10	; 16
    1528:	81 f1       	breq	.+96     	; 0x158a <__ultoa_invert+0x6c>
    152a:	e8 94       	clt
    152c:	6f 93       	push	r22
    152e:	6e 7f       	andi	r22, 0xFE	; 254
    1530:	6e 5f       	subi	r22, 0xFE	; 254
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	8f 4f       	sbci	r24, 0xFF	; 255
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	af 4f       	sbci	r26, 0xFF	; 255
    153a:	b1 e0       	ldi	r27, 0x01	; 1
    153c:	3e d0       	rcall	.+124    	; 0x15ba <__ultoa_invert+0x9c>
    153e:	b4 e0       	ldi	r27, 0x04	; 4
    1540:	3c d0       	rcall	.+120    	; 0x15ba <__ultoa_invert+0x9c>
    1542:	67 0f       	add	r22, r23
    1544:	78 1f       	adc	r23, r24
    1546:	89 1f       	adc	r24, r25
    1548:	9a 1f       	adc	r25, r26
    154a:	a1 1d       	adc	r26, r1
    154c:	68 0f       	add	r22, r24
    154e:	79 1f       	adc	r23, r25
    1550:	8a 1f       	adc	r24, r26
    1552:	91 1d       	adc	r25, r1
    1554:	a1 1d       	adc	r26, r1
    1556:	6a 0f       	add	r22, r26
    1558:	71 1d       	adc	r23, r1
    155a:	81 1d       	adc	r24, r1
    155c:	91 1d       	adc	r25, r1
    155e:	a1 1d       	adc	r26, r1
    1560:	20 d0       	rcall	.+64     	; 0x15a2 <__ultoa_invert+0x84>
    1562:	09 f4       	brne	.+2      	; 0x1566 <__ultoa_invert+0x48>
    1564:	68 94       	set
    1566:	3f 91       	pop	r19
    1568:	2a e0       	ldi	r18, 0x0A	; 10
    156a:	26 9f       	mul	r18, r22
    156c:	11 24       	eor	r1, r1
    156e:	30 19       	sub	r19, r0
    1570:	30 5d       	subi	r19, 0xD0	; 208
    1572:	31 93       	st	Z+, r19
    1574:	de f6       	brtc	.-74     	; 0x152c <__ultoa_invert+0xe>
    1576:	cf 01       	movw	r24, r30
    1578:	08 95       	ret
    157a:	46 2f       	mov	r20, r22
    157c:	47 70       	andi	r20, 0x07	; 7
    157e:	40 5d       	subi	r20, 0xD0	; 208
    1580:	41 93       	st	Z+, r20
    1582:	b3 e0       	ldi	r27, 0x03	; 3
    1584:	0f d0       	rcall	.+30     	; 0x15a4 <__ultoa_invert+0x86>
    1586:	c9 f7       	brne	.-14     	; 0x157a <__ultoa_invert+0x5c>
    1588:	f6 cf       	rjmp	.-20     	; 0x1576 <__ultoa_invert+0x58>
    158a:	46 2f       	mov	r20, r22
    158c:	4f 70       	andi	r20, 0x0F	; 15
    158e:	40 5d       	subi	r20, 0xD0	; 208
    1590:	4a 33       	cpi	r20, 0x3A	; 58
    1592:	18 f0       	brcs	.+6      	; 0x159a <__ultoa_invert+0x7c>
    1594:	49 5d       	subi	r20, 0xD9	; 217
    1596:	31 fd       	sbrc	r19, 1
    1598:	40 52       	subi	r20, 0x20	; 32
    159a:	41 93       	st	Z+, r20
    159c:	02 d0       	rcall	.+4      	; 0x15a2 <__ultoa_invert+0x84>
    159e:	a9 f7       	brne	.-22     	; 0x158a <__ultoa_invert+0x6c>
    15a0:	ea cf       	rjmp	.-44     	; 0x1576 <__ultoa_invert+0x58>
    15a2:	b4 e0       	ldi	r27, 0x04	; 4
    15a4:	a6 95       	lsr	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	77 95       	ror	r23
    15ac:	67 95       	ror	r22
    15ae:	ba 95       	dec	r27
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0x86>
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 05       	cpc	r22, r1
    15b6:	71 05       	cpc	r23, r1
    15b8:	08 95       	ret
    15ba:	9b 01       	movw	r18, r22
    15bc:	ac 01       	movw	r20, r24
    15be:	0a 2e       	mov	r0, r26
    15c0:	06 94       	lsr	r0
    15c2:	57 95       	ror	r21
    15c4:	47 95       	ror	r20
    15c6:	37 95       	ror	r19
    15c8:	27 95       	ror	r18
    15ca:	ba 95       	dec	r27
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__ultoa_invert+0xa2>
    15ce:	62 0f       	add	r22, r18
    15d0:	73 1f       	adc	r23, r19
    15d2:	84 1f       	adc	r24, r20
    15d4:	95 1f       	adc	r25, r21
    15d6:	a0 1d       	adc	r26, r0
    15d8:	08 95       	ret

000015da <__prologue_saves__>:
    15da:	2f 92       	push	r2
    15dc:	3f 92       	push	r3
    15de:	4f 92       	push	r4
    15e0:	5f 92       	push	r5
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	ca 1b       	sub	r28, r26
    1604:	db 0b       	sbc	r29, r27
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	09 94       	ijmp

00001612 <__epilogue_restores__>:
    1612:	2a 88       	ldd	r2, Y+18	; 0x12
    1614:	39 88       	ldd	r3, Y+17	; 0x11
    1616:	48 88       	ldd	r4, Y+16	; 0x10
    1618:	5f 84       	ldd	r5, Y+15	; 0x0f
    161a:	6e 84       	ldd	r6, Y+14	; 0x0e
    161c:	7d 84       	ldd	r7, Y+13	; 0x0d
    161e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1620:	9b 84       	ldd	r9, Y+11	; 0x0b
    1622:	aa 84       	ldd	r10, Y+10	; 0x0a
    1624:	b9 84       	ldd	r11, Y+9	; 0x09
    1626:	c8 84       	ldd	r12, Y+8	; 0x08
    1628:	df 80       	ldd	r13, Y+7	; 0x07
    162a:	ee 80       	ldd	r14, Y+6	; 0x06
    162c:	fd 80       	ldd	r15, Y+5	; 0x05
    162e:	0c 81       	ldd	r16, Y+4	; 0x04
    1630:	1b 81       	ldd	r17, Y+3	; 0x03
    1632:	aa 81       	ldd	r26, Y+2	; 0x02
    1634:	b9 81       	ldd	r27, Y+1	; 0x01
    1636:	ce 0f       	add	r28, r30
    1638:	d1 1d       	adc	r29, r1
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	ed 01       	movw	r28, r26
    1646:	08 95       	ret

00001648 <_exit>:
    1648:	f8 94       	cli

0000164a <__stop_program>:
    164a:	ff cf       	rjmp	.-2      	; 0x164a <__stop_program>
